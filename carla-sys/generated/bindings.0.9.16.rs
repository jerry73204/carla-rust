# [allow (non_snake_case)] # [allow (dead_code)] # [allow (non_upper_case_globals)] # [allow (non_camel_case_types)] mod ffi { pub trait ToCppString { fn into_cpp (self) -> cxx :: UniquePtr < cxx :: CxxString > ; } impl ToCppString for & str { fn into_cpp (self) -> cxx :: UniquePtr < cxx :: CxxString > { make_string (self) } } impl ToCppString for String { fn into_cpp (self) -> cxx :: UniquePtr < cxx :: CxxString > { make_string (& self) } } impl ToCppString for & String { fn into_cpp (self) -> cxx :: UniquePtr < cxx :: CxxString > { make_string (self) } } impl ToCppString for cxx :: UniquePtr < cxx :: CxxString > { fn into_cpp (self) -> cxx :: UniquePtr < cxx :: CxxString > { self } } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: geom :: Vector3D { type Id = cxx :: type_id ! ("carla::geom::Vector3D") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: geom :: Vector3DInt { type Id = cxx :: type_id ! ("carla::geom::Vector3DInt") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: geom :: Math { type Id = cxx :: type_id ! ("carla::geom::Math") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: geom :: Rotation { type Id = cxx :: type_id ! ("carla::geom::Rotation") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: geom :: BoundingBox { type Id = cxx :: type_id ! ("carla::geom::BoundingBox") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: geom :: Vector2D { type Id = cxx :: type_id ! ("carla::geom::Vector2D") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: geom :: MeshMaterial { type Id = cxx :: type_id ! ("carla::geom::MeshMaterial") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: geom :: Mesh { type Id = cxx :: type_id ! ("carla::geom::Mesh") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: geom :: GeoLocation { type Id = cxx :: type_id ! ("carla::geom::GeoLocation") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: geom :: CubicPolynomial { type Id = cxx :: type_id ! ("carla::geom::CubicPolynomial") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: rpc :: TrafficLightState { type Id = cxx :: type_id ! ("carla::rpc::TrafficLightState") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: rpc :: VehicleControl { type Id = cxx :: type_id ! ("carla::rpc::VehicleControl") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: rpc :: ActorAttributeType { type Id = cxx :: type_id ! ("carla::rpc::ActorAttributeType") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: rpc :: AttachmentType { type Id = cxx :: type_id ! ("carla::rpc::AttachmentType") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: rpc :: EpisodeSettings { type Id = cxx :: type_id ! ("carla::rpc::EpisodeSettings") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: rpc :: CityObjectLabel { type Id = cxx :: type_id ! ("carla::rpc::CityObjectLabel") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: rpc :: LabelledPoint { type Id = cxx :: type_id ! ("carla::rpc::LabelledPoint") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: rpc :: GearPhysicsControl { type Id = cxx :: type_id ! ("carla::rpc::GearPhysicsControl") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: rpc :: WheelPhysicsControl { type Id = cxx :: type_id ! ("carla::rpc::WheelPhysicsControl") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: rpc :: WeatherParameters { type Id = cxx :: type_id ! ("carla::rpc::WeatherParameters") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: rpc :: VehicleLightState { type Id = cxx :: type_id ! ("carla::rpc::VehicleLightState") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: rpc :: AckermannControllerSettings { type Id = cxx :: type_id ! ("carla::rpc::AckermannControllerSettings") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: rpc :: VehicleAckermannControl { type Id = cxx :: type_id ! ("carla::rpc::VehicleAckermannControl") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: rpc :: VehicleDoor { type Id = cxx :: type_id ! ("carla::rpc::VehicleDoor") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: rpc :: VehicleWheelLocation { type Id = cxx :: type_id ! ("carla::rpc::VehicleWheelLocation") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: rpc :: OpendriveGenerationParameters { type Id = cxx :: type_id ! ("carla::rpc::OpendriveGenerationParameters") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: sensor :: SensorData { type Id = cxx :: type_id ! ("carla::sensor::SensorData") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: sensor :: data :: SemanticLidarDetection { type Id = cxx :: type_id ! ("carla::sensor::data::SemanticLidarDetection") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: sensor :: data :: SemanticLidarData { type Id = cxx :: type_id ! ("carla::sensor::data::SemanticLidarData") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: sensor :: data :: LidarDetection { type Id = cxx :: type_id ! ("carla::sensor::data::LidarDetection") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: sensor :: data :: LidarData { type Id = cxx :: type_id ! ("carla::sensor::data::LidarData") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: sensor :: data :: IMUMeasurement { type Id = cxx :: type_id ! ("carla::sensor::data::IMUMeasurement") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: sensor :: data :: GnssMeasurement { type Id = cxx :: type_id ! ("carla::sensor::data::GnssMeasurement") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: sensor :: data :: LidarMeasurement { type Id = cxx :: type_id ! ("carla::sensor::data::LidarMeasurement") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: sensor :: data :: SemanticLidarMeasurement { type Id = cxx :: type_id ! ("carla::sensor::data::SemanticLidarMeasurement") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: sensor :: data :: RadarDetection { type Id = cxx :: type_id ! ("carla::sensor::data::RadarDetection") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: sensor :: data :: RadarData { type Id = cxx :: type_id ! ("carla::sensor::data::RadarData") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: sensor :: data :: RadarMeasurement { type Id = cxx :: type_id ! ("carla::sensor::data::RadarMeasurement") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: client :: Landmark { type Id = cxx :: type_id ! ("carla::client::Landmark") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: client :: Timestamp { type Id = cxx :: type_id ! ("carla::client::Timestamp") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: client :: WorldSnapshot { type Id = cxx :: type_id ! ("carla::client::WorldSnapshot") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: client :: Light { type Id = cxx :: type_id ! ("carla::client::Light") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: client :: Vehicle { type Id = cxx :: type_id ! ("carla::client::Vehicle") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: client :: TrafficSign { type Id = cxx :: type_id ! ("carla::client::TrafficSign") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: client :: TrafficLight { type Id = cxx :: type_id ! ("carla::client::TrafficLight") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: client :: Walker { type Id = cxx :: type_id ! ("carla::client::Walker") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: client :: ActorBlueprint { type Id = cxx :: type_id ! ("carla::client::ActorBlueprint") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: client :: ActorList { type Id = cxx :: type_id ! ("carla::client::ActorList") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: client :: LaneInvasionSensor { type Id = cxx :: type_id ! ("carla::client::LaneInvasionSensor") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: road :: element :: LaneMarking_Type { type Id = cxx :: type_id ! ("carla::road::element::LaneMarking::Type") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: road :: element :: LaneMarking_Color { type Id = cxx :: type_id ! ("carla::road::element::LaneMarking::Color") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: road :: element :: LaneMarking_LaneChange { type Id = cxx :: type_id ! ("carla::road::element::LaneMarking::LaneChange") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: traffic_manager :: RoadOption { type Id = cxx :: type_id ! ("carla::traffic_manager::RoadOption") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: geom :: FfiLocation { type Id = cxx :: type_id ! ("carla_rust::geom::FfiLocation") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: geom :: FfiTransform { type Id = cxx :: type_id ! ("carla_rust::geom::FfiTransform") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: geom :: FfiBoundingBox { type Id = cxx :: type_id ! ("carla_rust::geom::FfiBoundingBox") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: rpc :: FfiVehiclePhysicsControl { type Id = cxx :: type_id ! ("carla_rust::rpc::FfiVehiclePhysicsControl") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: rpc :: FfiEpisodeSettings { type Id = cxx :: type_id ! ("carla_rust::rpc::FfiEpisodeSettings") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: rpc :: FfiLabelledPoint { type Id = cxx :: type_id ! ("carla_rust::rpc::FfiLabelledPoint") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: rpc :: FfiVehicleLightStateElementRef { type Id = cxx :: type_id ! ("carla_rust::rpc::FfiVehicleLightStateElementRef") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: rpc :: FfiVehicleLightStateList { type Id = cxx :: type_id ! ("carla_rust::rpc::FfiVehicleLightStateList") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: rpc :: FfiEnvironmentObjectRef { type Id = cxx :: type_id ! ("carla_rust::rpc::FfiEnvironmentObjectRef") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: rpc :: FfiRpcColor { type Id = cxx :: type_id ! ("carla_rust::rpc::FfiRpcColor") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: rpc :: FfiRpcLightGroup { type Id = cxx :: type_id ! ("carla_rust::rpc::FfiRpcLightGroup") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: rpc :: FfiRpcLightState { type Id = cxx :: type_id ! ("carla_rust::rpc::FfiRpcLightState") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: sensor :: data :: FfiColor { type Id = cxx :: type_id ! ("carla_rust::sensor::data::FfiColor") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: sensor :: data :: FfiCollisionEvent { type Id = cxx :: type_id ! ("carla_rust::sensor::data::FfiCollisionEvent") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: sensor :: data :: FfiImage { type Id = cxx :: type_id ! ("carla_rust::sensor::data::FfiImage") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: sensor :: data :: FfiLaneInvasionEvent { type Id = cxx :: type_id ! ("carla_rust::sensor::data::FfiLaneInvasionEvent") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: sensor :: data :: FfiLidarDetection { type Id = cxx :: type_id ! ("carla_rust::sensor::data::FfiLidarDetection") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: sensor :: data :: FfiObstacleDetectionEvent { type Id = cxx :: type_id ! ("carla_rust::sensor::data::FfiObstacleDetectionEvent") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: sensor :: data :: FfiSemanticLidarDetection { type Id = cxx :: type_id ! ("carla_rust::sensor::data::FfiSemanticLidarDetection") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: sensor :: data :: FfiLidarMeasurement { type Id = cxx :: type_id ! ("carla_rust::sensor::data::FfiLidarMeasurement") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: sensor :: data :: FfiSemanticLidarMeasurement { type Id = cxx :: type_id ! ("carla_rust::sensor::data::FfiSemanticLidarMeasurement") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: sensor :: data :: FfiRadarMeasurement { type Id = cxx :: type_id ! ("carla_rust::sensor::data::FfiRadarMeasurement") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: sensor :: data :: FfiGnssMeasurement { type Id = cxx :: type_id ! ("carla_rust::sensor::data::FfiGnssMeasurement") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: sensor :: data :: FfiImuMeasurement { type Id = cxx :: type_id ! ("carla_rust::sensor::data::FfiImuMeasurement") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: sensor :: FfiSensorData { type Id = cxx :: type_id ! ("carla_rust::sensor::FfiSensorData") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: client :: FfiActorAttributeValue { type Id = cxx :: type_id ! ("carla_rust::client::FfiActorAttributeValue") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: client :: FfiActorAttributeValueList { type Id = cxx :: type_id ! ("carla_rust::client::FfiActorAttributeValueList") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: client :: FfiActor { type Id = cxx :: type_id ! ("carla_rust::client::FfiActor") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: client :: ListenCallback { type Id = cxx :: type_id ! ("carla_rust::client::ListenCallback") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: client :: FfiWaypointList { type Id = cxx :: type_id ! ("carla_rust::client::FfiWaypointList") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: client :: FfiWaypointPair { type Id = cxx :: type_id ! ("carla_rust::client::FfiWaypointPair") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: client :: FfiJunction { type Id = cxx :: type_id ! ("carla_rust::client::FfiJunction") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: client :: FfiLandmarkList { type Id = cxx :: type_id ! ("carla_rust::client::FfiLandmarkList") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: client :: FfiWaypoint { type Id = cxx :: type_id ! ("carla_rust::client::FfiWaypoint") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: client :: FfiLandmark { type Id = cxx :: type_id ! ("carla_rust::client::FfiLandmark") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: client :: FfiTransformList { type Id = cxx :: type_id ! ("carla_rust::client::FfiTransformList") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: client :: FfiMap { type Id = cxx :: type_id ! ("carla_rust::client::FfiMap") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: client :: FfiTrafficSign { type Id = cxx :: type_id ! ("carla_rust::client::FfiTrafficSign") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: client :: FfiVehicle { type Id = cxx :: type_id ! ("carla_rust::client::FfiVehicle") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: client :: FfiSensor { type Id = cxx :: type_id ! ("carla_rust::client::FfiSensor") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: client :: FfiBlueprintLibrary { type Id = cxx :: type_id ! ("carla_rust::client::FfiBlueprintLibrary") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: client :: FfiActorList { type Id = cxx :: type_id ! ("carla_rust::client::FfiActorList") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: client :: FfiBoundingBoxList { type Id = cxx :: type_id ! ("carla_rust::client::FfiBoundingBoxList") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: client :: FfiLabelledPointList { type Id = cxx :: type_id ! ("carla_rust::client::FfiLabelledPointList") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: client :: FfiEnvironmentObjectList { type Id = cxx :: type_id ! ("carla_rust::client::FfiEnvironmentObjectList") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: client :: FfiActorVec { type Id = cxx :: type_id ! ("carla_rust::client::FfiActorVec") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: client :: FfiWorldSnapshot { type Id = cxx :: type_id ! ("carla_rust::client::FfiWorldSnapshot") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: client :: FfiClientLightState { type Id = cxx :: type_id ! ("carla_rust::client::FfiClientLightState") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: client :: FfiLightRef { type Id = cxx :: type_id ! ("carla_rust::client::FfiLightRef") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: client :: FfiLightList { type Id = cxx :: type_id ! ("carla_rust::client::FfiLightList") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: client :: FfiLightManager { type Id = cxx :: type_id ! ("carla_rust::client::FfiLightManager") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: client :: FfiWorld { type Id = cxx :: type_id ! ("carla_rust::client::FfiWorld") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: client :: FfiClient { type Id = cxx :: type_id ! ("carla_rust::client::FfiClient") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: client :: FfiTrafficLightList { type Id = cxx :: type_id ! ("carla_rust::client::FfiTrafficLightList") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: client :: FfiTrafficLight { type Id = cxx :: type_id ! ("carla_rust::client::FfiTrafficLight") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: road :: element :: FfiLaneMarking { type Id = cxx :: type_id ! ("carla_rust::road::element::FfiLaneMarking") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: traffic_manager :: FfiAction { type Id = cxx :: type_id ! ("carla_rust::traffic_manager::FfiAction") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: traffic_manager :: FfiActionBuffer { type Id = cxx :: type_id ! ("carla_rust::traffic_manager::FfiActionBuffer") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla_rust :: traffic_manager :: FfiTrafficManager { type Id = cxx :: type_id ! ("carla_rust::traffic_manager::FfiTrafficManager") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: rpc :: VehicleLightState_LightState { type Id = cxx :: type_id ! ("carla::rpc::VehicleLightState::LightState") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: sensor :: RawData { type Id = cxx :: type_id ! ("carla::sensor::RawData") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: road :: SignalOrientation { type Id = cxx :: type_id ! ("carla::road::SignalOrientation") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: road :: LaneValidity { type Id = cxx :: type_id ! ("carla::road::LaneValidity") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: client :: detail :: EpisodeState { type Id = cxx :: type_id ! ("carla::client::detail::EpisodeState") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: rpc :: VehiclePhysicsControl { type Id = cxx :: type_id ! ("carla::rpc::VehiclePhysicsControl") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: rpc :: VehicleFailureState { type Id = cxx :: type_id ! ("carla::rpc::VehicleFailureState") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: client :: ActorInitializer { type Id = cxx :: type_id ! ("carla::client::ActorInitializer") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: rpc :: WalkerControl { type Id = cxx :: type_id ! ("carla::rpc::WalkerControl") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: rpc :: WalkerBoneControlOut { type Id = cxx :: type_id ! ("carla::rpc::WalkerBoneControlOut") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: rpc :: WalkerBoneControlIn { type Id = cxx :: type_id ! ("carla::rpc::WalkerBoneControlIn") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: rpc :: ActorDescription { type Id = cxx :: type_id ! ("carla::rpc::ActorDescription") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: rpc :: ActorDefinition { type Id = cxx :: type_id ! ("carla::rpc::ActorDefinition") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: rpc :: EnvironmentObject { type Id = cxx :: type_id ! ("carla::rpc::EnvironmentObject") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: road :: Lane_LaneType { type Id = cxx :: type_id ! ("carla::road::Lane::LaneType") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: client :: World { type Id = cxx :: type_id ! ("carla::client::World") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: road :: element :: LaneMarking { type Id = cxx :: type_id ! ("carla::road::element::LaneMarking") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: carla :: traffic_manager :: TrafficManager { type Id = cxx :: type_id ! ("carla::traffic_manager::TrafficManager") ; type Kind = cxx :: kind :: Opaque ; } mod bindgen { pub (super) mod root { pub use cxxbridge :: std_pair_float_float_AutocxxConcrete ; pub use cxxbridge :: std_basic_ostream_char_AutocxxConcrete ; pub use cxxbridge :: carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete ; pub use cxxbridge :: std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete ; pub use cxxbridge :: std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete ; pub mod carla { # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] pub struct SharedPtr ; # [doc = "autocxx bindings couldn't be generated: This item name is used in multiple namespaces. At present, autocxx and cxx allow only one type of a given name. This limitation will be fixed in future. (Items found with this name: boost::posix_time::time_duration, carla::time_duration)"] pub struct time_duration ; impl time_duration { # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::time_duration"] fn seconds_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::time_duration"] fn milliseconds_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: Function operator_equals has a reference return value, but >1 input reference parameters, so the lifetime of the output reference cannot be deduced."] fn operator_equals (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::time_duration, boost::posix_time::time_duration"] fn to_posix_time_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: We're unable to make a concrete version of this template, because we found an error handling the template."] fn to_chrono (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::time_duration"] fn milliseconds1 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::time_duration"] fn carla_time_duration_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::time_duration, boost::posix_time::time_duration"] fn carla_time_duration_new1_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } } pub mod client { # [doc = " Class containing a reference to RoadInfoSignal"] # [repr (C , align (8))] pub struct Landmark { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 48] } # [doc = "autocxx bindings couldn't be generated: This item name is used in multiple namespaces. At present, autocxx and cxx allow only one type of a given name. This limitation will be fixed in future. (Items found with this name: carla::client::Junction, carla::road::Junction)"] pub struct Junction ; # [repr (C)] pub struct Timestamp { # [doc = " Number of frames elapsed since the simulator was launched."] pub frame : usize , # [doc = " Simulated seconds elapsed since the beginning of the current episode."] pub elapsed_seconds : f64 , # [doc = " Simulated seconds elapsed since previous frame."] pub delta_seconds : f64 , # [doc = " Time-stamp of the frame at which this measurement was taken, in seconds\n as given by the OS."] pub platform_timestamp : f64 , } # [repr (C , align (8))] pub struct WorldSnapshot { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } # [repr (C , align (8))] pub struct Light { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 32] } # [repr (C , align (8))] pub struct Vehicle { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 288] } # [repr (C , align (8))] pub struct TrafficSign { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 264] } # [repr (C , align (8))] pub struct TrafficLight { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 264] } # [repr (C , align (8))] pub struct Walker { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 288] } # [doc = " Contains all the necessary information for spawning an Actor."] # [repr (C , align (8))] pub struct ActorBlueprint { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 152] } # [repr (C , align (8))] pub struct ActorList { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 64] } # [repr (C , align (8))] pub struct LaneInvasionSensor { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 272] } pub type Vehicle_Control = root :: carla :: rpc :: VehicleControl ; pub type Vehicle_AckermannControl = root :: carla :: rpc :: VehicleAckermannControl ; pub type Vehicle_PhysicsControl = root :: carla :: rpc :: VehiclePhysicsControl ; # [doc = " Used to initialize Actor classes. Only the ActorFactory can create this\n object, thus only the ActorFactory can create actors."] # [repr (C , align (8))] pub struct ActorInitializer { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 240] } pub type Walker_Control = root :: carla :: rpc :: WalkerControl ; pub type Walker_BoneControlOut = root :: carla :: rpc :: WalkerBoneControlOut ; pub type Walker_BoneControlIn = root :: carla :: rpc :: WalkerBoneControlIn ; # [repr (C , align (8))] pub struct World { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 24] } impl Landmark { # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn GetWaypoint (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::geom::Transform"] fn carla_client_Landmark_GetTransform_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn GetRoadId (self : & root :: carla :: client :: Landmark) -> u32 { cxxbridge :: carla_client_Landmark_GetRoadId_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetDistance (self : & root :: carla :: client :: Landmark) -> f64 { cxxbridge :: carla_client_Landmark_GetDistance_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetS (self : & root :: carla :: client :: Landmark) -> f64 { cxxbridge :: carla_client_Landmark_GetS_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetId (self : & root :: carla :: client :: Landmark) -> cxx :: UniquePtr < cxx :: CxxString > { cxxbridge :: carla_client_Landmark_GetId_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetName (self : & root :: carla :: client :: Landmark) -> cxx :: UniquePtr < cxx :: CxxString > { cxxbridge :: GetName_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetCountry (self : & root :: carla :: client :: Landmark) -> cxx :: UniquePtr < cxx :: CxxString > { cxxbridge :: GetCountry_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetType (self : & root :: carla :: client :: Landmark) -> cxx :: UniquePtr < cxx :: CxxString > { cxxbridge :: carla_client_Landmark_GetType_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetSubType (self : & root :: carla :: client :: Landmark) -> cxx :: UniquePtr < cxx :: CxxString > { cxxbridge :: GetSubType_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetUnit (self : & root :: carla :: client :: Landmark) -> cxx :: UniquePtr < cxx :: CxxString > { cxxbridge :: GetUnit_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetText (self : & root :: carla :: client :: Landmark) -> cxx :: UniquePtr < cxx :: CxxString > { cxxbridge :: GetText_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } } impl Junction { # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::client::Junction"] fn carla_client_Junction_GetId_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn GetWaypoints (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::client::Junction"] fn carla_client_Junction_GetBoundingBox_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } } impl Timestamp { pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_client_Timestamp_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this) }) } } pub fn new1 (in_frame : usize , in_elapsed_seconds : f64 , in_delta_seconds : f64 , in_platform_timestamp : f64) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_client_Timestamp_new1_autocxx_wrapper_0xd539d5a17acbdd25 (this , in_frame , in_elapsed_seconds , in_delta_seconds , in_platform_timestamp) }) } } } impl WorldSnapshot { # [doc = " Get the id of the episode associated with this world."] pub fn GetId (self : & root :: carla :: client :: WorldSnapshot) -> u64 { cxxbridge :: carla_client_WorldSnapshot_GetId_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetFrame (self : & root :: carla :: client :: WorldSnapshot) -> usize { cxxbridge :: carla_client_WorldSnapshot_GetFrame_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = " Get timestamp of this snapshot."] pub fn GetTimestamp (self : & root :: carla :: client :: WorldSnapshot) -> & root :: carla :: client :: Timestamp { cxxbridge :: carla_client_WorldSnapshot_GetTimestamp_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::ActorId"] fn carla_client_WorldSnapshot_Contains_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn Find (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = " Return number of ActorSnapshots present in this WorldSnapshot."] pub fn size (self : & root :: carla :: client :: WorldSnapshot) -> usize { cxxbridge :: carla_client_WorldSnapshot_size_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = "autocxx bindings couldn't be generated: We're unable to make a concrete version of this template, because we found an error handling the template."] fn begin (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: We're unable to make a concrete version of this template, because we found an error handling the template."] fn end (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn new (state : cxx :: SharedPtr < root :: carla :: client :: detail :: EpisodeState >) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_client_WorldSnapshot_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this , state) }) } } } impl Light { # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::client::Color, carla::sensor::data::Color"] fn GetColor_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::client::LightId"] fn carla_client_Light_GetId_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::geom::Location"] fn GetLocation_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item relies on a type not known to autocxx (super::super::root::carla::rpc::LightState_LightGroup)"] fn GetLightGroup_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::client::LightState"] fn GetLightState_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::client::Color, carla::sensor::data::Color"] fn SetColor_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item relies on a type not known to autocxx (super::super::root::carla::rpc::LightState_LightGroup)"] fn SetLightGroup_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::client::LightState"] fn SetLightState (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_client_Light_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this) }) } } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn new1 (_uhoh : autocxx :: BindingGenerationFailure) { } } impl Vehicle { # [doc = " Return the last Ackermann controller settings applied to this vehicle.\n\n @warning This function does call the simulator."] pub fn GetAckermannControllerSettings (self : & root :: carla :: client :: Vehicle) -> root :: carla :: rpc :: AckermannControllerSettings { cxxbridge :: carla_client_Vehicle_GetAckermannControllerSettings_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = " Apply Ackermann control settings to this vehicle"] pub fn ApplyAckermannControllerSettings (self : :: core :: pin :: Pin < & mut root :: carla :: client :: Vehicle > , settings : & root :: carla :: rpc :: AckermannControllerSettings) { cxxbridge :: carla_client_Vehicle_ApplyAckermannControllerSettings_autocxx_wrapper_0xd539d5a17acbdd25 (self , settings) } # [doc = "autocxx bindings couldn't be generated: This item relies on a type not known to autocxx (super::super::root::carla::rpc::VehicleDoor)"] fn OpenDoor_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item relies on a type not known to autocxx (super::super::root::carla::rpc::VehicleDoor)"] fn CloseDoor_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item relies on a type not known to autocxx (super::super::root::carla::rpc::VehicleLightState_LightState)"] fn carla_client_Vehicle_SetLightState_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item relies on a type not known to autocxx (super::super::root::carla::rpc::VehicleWheelLocation)"] fn carla_client_Vehicle_SetWheelSteerDirection_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item relies on a type not known to autocxx (super::super::root::carla::rpc::VehicleWheelLocation)"] fn carla_client_Vehicle_GetWheelSteerAngle_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = " Return the physics control last applied to this vehicle.\n\n @warning This function does call the simulator."] pub fn GetPhysicsControl < 'a > (self : & 'a root :: carla :: client :: Vehicle) -> impl autocxx :: moveit :: new :: New < Output = root :: carla :: rpc :: VehiclePhysicsControl > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: GetPhysicsControl_autocxx_wrapper_0xd539d5a17acbdd25 (self , placement_return_type) }) } } # [doc = "autocxx bindings couldn't be generated: This item relies on a type not known to autocxx (super::super::root::carla::rpc::VehicleLightState_LightState)"] fn carla_client_Vehicle_GetLightState_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn GetTrafficLight (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = " Enables CarSim simulation if it is availiable"] pub fn EnableCarSim (self : :: core :: pin :: Pin < & mut root :: carla :: client :: Vehicle > , simfile_path : impl ToCppString) { cxxbridge :: carla_client_Vehicle_EnableCarSim_autocxx_wrapper_0xd539d5a17acbdd25 (self , simfile_path . into_cpp ()) } # [doc = " Enables the use of CarSim internal road definition instead of unreal's"] pub fn UseCarSimRoad (self : :: core :: pin :: Pin < & mut root :: carla :: client :: Vehicle > , enabled : bool) { cxxbridge :: carla_client_Vehicle_UseCarSimRoad_autocxx_wrapper_0xd539d5a17acbdd25 (self , enabled) } pub fn EnableChronoPhysics (self : :: core :: pin :: Pin < & mut root :: carla :: client :: Vehicle > , MaxSubsteps : u64 , MaxSubstepDeltaTime : f32 , VehicleJSON : impl ToCppString , PowertrainJSON : impl ToCppString , TireJSON : impl ToCppString , BaseJSONPath : impl ToCppString) { cxxbridge :: carla_client_Vehicle_EnableChronoPhysics_autocxx_wrapper_0xd539d5a17acbdd25 (self , MaxSubsteps , MaxSubstepDeltaTime , VehicleJSON . into_cpp () , PowertrainJSON . into_cpp () , TireJSON . into_cpp () , BaseJSONPath . into_cpp ()) } pub fn new < 'a > (init : impl autocxx :: ValueParam < root :: carla :: client :: ActorInitializer > + 'a) -> impl autocxx :: moveit :: new :: New < Output = Self > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let mut space0 = autocxx :: ValueParamHandler :: default () ; let mut space0 = :: core :: pin :: Pin :: new_unchecked (& mut space0) ; space0 . as_mut () . populate (init) ; let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_client_Vehicle_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this , space0 . get_ptr ()) }) } } } impl TrafficSign { pub fn GetSignId (self : & root :: carla :: client :: TrafficSign) -> cxx :: UniquePtr < cxx :: CxxString > { cxxbridge :: GetSignId_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn new < 'a > (init : impl autocxx :: ValueParam < root :: carla :: client :: ActorInitializer > + 'a) -> impl autocxx :: moveit :: new :: New < Output = Self > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let mut space0 = autocxx :: ValueParamHandler :: default () ; let mut space0 = :: core :: pin :: Pin :: new_unchecked (& mut space0) ; space0 . as_mut () . populate (init) ; let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_client_TrafficSign_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this , space0 . get_ptr ()) }) } } } impl TrafficLight { # [doc = " Return the current state of the traffic light.\n\n @note This function does not call the simulator, it returns the data\n received in the last tick."] pub fn GetState (self : & root :: carla :: client :: TrafficLight) -> root :: carla :: rpc :: TrafficLightState { cxxbridge :: carla_client_TrafficLight_GetState_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn GetGroupTrafficLights (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn GetAffectedLaneWaypoints (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn GetLightBoxes (self : & root :: carla :: client :: TrafficLight) -> cxx :: UniquePtr < cxx :: CxxVector < root :: carla :: geom :: BoundingBox > > { cxxbridge :: carla_client_TrafficLight_GetLightBoxes_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetOpenDRIVEID (self : & root :: carla :: client :: TrafficLight) -> cxx :: UniquePtr < cxx :: CxxString > { cxxbridge :: GetOpenDRIVEID_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn GetStopWaypoints (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn new < 'a > (init : impl autocxx :: ValueParam < root :: carla :: client :: ActorInitializer > + 'a) -> impl autocxx :: moveit :: new :: New < Output = Self > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let mut space0 = autocxx :: ValueParamHandler :: default () ; let mut space0 = :: core :: pin :: Pin :: new_unchecked (& mut space0) ; space0 . as_mut () . populate (init) ; let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_client_TrafficLight_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this , space0 . get_ptr ()) }) } } } impl Walker { # [doc = " Apply @a control to this Walker."] pub fn ApplyControl (self : :: core :: pin :: Pin < & mut root :: carla :: client :: Walker > , control : & root :: carla :: rpc :: WalkerControl) { cxxbridge :: carla_client_Walker_ApplyControl_autocxx_wrapper_0xd539d5a17acbdd25 (self , control) } # [doc = " Return the control last applied to this Walker.\n\n @note This function does not call the simulator, it returns the Control\n received in the last tick."] pub fn GetWalkerControl < 'a > (self : & 'a root :: carla :: client :: Walker) -> impl autocxx :: moveit :: new :: New < Output = root :: carla :: rpc :: WalkerControl > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: GetWalkerControl_autocxx_wrapper_0xd539d5a17acbdd25 (self , placement_return_type) }) } } pub fn GetBonesTransform < 'a > (self : :: core :: pin :: Pin < & 'a mut root :: carla :: client :: Walker >) -> impl autocxx :: moveit :: new :: New < Output = root :: carla :: rpc :: WalkerBoneControlOut > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_client_Walker_GetBonesTransform_autocxx_wrapper_0xd539d5a17acbdd25 (self , placement_return_type) }) } } pub fn SetBonesTransform (self : :: core :: pin :: Pin < & mut root :: carla :: client :: Walker > , bones : & root :: carla :: rpc :: WalkerBoneControlIn) { cxxbridge :: carla_client_Walker_SetBonesTransform_autocxx_wrapper_0xd539d5a17acbdd25 (self , bones) } pub fn BlendPose (self : :: core :: pin :: Pin < & mut root :: carla :: client :: Walker > , blend : f32) { cxxbridge :: carla_client_Walker_BlendPose_autocxx_wrapper_0xd539d5a17acbdd25 (self , blend) } pub fn GetPoseFromAnimation (self : :: core :: pin :: Pin < & mut root :: carla :: client :: Walker >) { cxxbridge :: carla_client_Walker_GetPoseFromAnimation_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn new < 'a > (init : impl autocxx :: ValueParam < root :: carla :: client :: ActorInitializer > + 'a) -> impl autocxx :: moveit :: new :: New < Output = Self > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let mut space0 = autocxx :: ValueParamHandler :: default () ; let mut space0 = :: core :: pin :: Pin :: new_unchecked (& mut space0) ; space0 . as_mut () . populate (init) ; let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_client_Walker_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this , space0 . get_ptr ()) }) } } } impl ActorBlueprint { # [doc = " @{"] pub fn GetId (self : & root :: carla :: client :: ActorBlueprint) -> & cxx :: CxxString { cxxbridge :: carla_client_ActorBlueprint_GetId_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetTags (self : & root :: carla :: client :: ActorBlueprint) -> cxx :: UniquePtr < cxx :: CxxVector < cxx :: CxxString > > { cxxbridge :: GetTags_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = "autocxx bindings couldn't be generated: Function GetAttribute has a reference return value, but >1 input reference parameters, so the lifetime of the output reference cannot be deduced."] fn GetAttribute (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = " Set the value of the attribute given by @a id.\n\n @throw std::out_of_range if no such element exists.\n @throw InvalidAttributeValue if attribute is not modifiable.\n @throw InvalidAttributeValue if format does not match the attribute type."] pub fn SetAttribute (self : :: core :: pin :: Pin < & mut root :: carla :: client :: ActorBlueprint > , id : & cxx :: CxxString , value : impl ToCppString) { cxxbridge :: SetAttribute_autocxx_wrapper_0xd539d5a17acbdd25 (self , id , value . into_cpp ()) } pub fn size (self : & root :: carla :: client :: ActorBlueprint) -> usize { cxxbridge :: carla_client_ActorBlueprint_size_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = "autocxx bindings couldn't be generated: We're unable to make a concrete version of this template, because we found an error handling the template."] fn begin (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: We're unable to make a concrete version of this template, because we found an error handling the template."] fn end (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = " @{"] pub fn MakeActorDescription < 'a > (self : & 'a root :: carla :: client :: ActorBlueprint) -> impl autocxx :: moveit :: new :: New < Output = root :: carla :: rpc :: ActorDescription > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: MakeActorDescription_autocxx_wrapper_0xd539d5a17acbdd25 (self , placement_return_type) }) } } # [doc = " @{"] pub fn new < 'a > (actor_definition : impl autocxx :: ValueParam < root :: carla :: rpc :: ActorDefinition > + 'a) -> impl autocxx :: moveit :: new :: New < Output = Self > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let mut space0 = autocxx :: ValueParamHandler :: default () ; let mut space0 = :: core :: pin :: Pin :: new_unchecked (& mut space0) ; space0 . as_mut () . populate (actor_definition) ; let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_client_ActorBlueprint_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this , space0 . get_ptr ()) }) } } } impl ActorList { # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn Find (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn Filter (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn at (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: We're unable to make a concrete version of this template, because we found an error handling the template."] fn begin (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: We're unable to make a concrete version of this template, because we found an error handling the template."] fn end (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn empty (self : & root :: carla :: client :: ActorList) -> bool { cxxbridge :: carla_client_ActorList_empty_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn size (self : & root :: carla :: client :: ActorList) -> usize { cxxbridge :: carla_client_ActorList_size_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = "autocxx bindings couldn't be generated: This method is private"] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } } impl LaneInvasionSensor { # [doc = "autocxx bindings couldn't be generated: Problem handling function argument callback: Found an attempt at using a type marked as blocked! (carla::client::Sensor_CallbackFunctionType)"] fn Listen (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = " Stop listening for new measurements."] pub fn Stop (self : :: core :: pin :: Pin < & mut root :: carla :: client :: LaneInvasionSensor >) { cxxbridge :: carla_client_LaneInvasionSensor_Stop_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = " Return whether this Sensor instance is currently listening to the\n associated sensor in the simulator."] pub fn IsListening (self : & root :: carla :: client :: LaneInvasionSensor) -> bool { cxxbridge :: carla_client_LaneInvasionSensor_IsListening_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: client :: Landmark { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: client :: Landmark { cxxbridge :: Landmark_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: client :: Landmark) { cxxbridge :: Landmark_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: client :: Timestamp { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: client :: Timestamp { cxxbridge :: Timestamp_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: client :: Timestamp) { cxxbridge :: Timestamp_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: client :: WorldSnapshot { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: client :: WorldSnapshot { cxxbridge :: WorldSnapshot_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: client :: WorldSnapshot) { cxxbridge :: WorldSnapshot_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: client :: Light { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: client :: Light { cxxbridge :: Light_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: client :: Light) { cxxbridge :: Light_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: client :: Vehicle { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: client :: Vehicle { cxxbridge :: Vehicle_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: client :: Vehicle) { cxxbridge :: Vehicle_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: client :: TrafficSign { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: client :: TrafficSign { cxxbridge :: TrafficSign_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: client :: TrafficSign) { cxxbridge :: TrafficSign_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } impl AsRef < root :: carla :: client :: TrafficSign > for root :: carla :: client :: TrafficLight { fn as_ref (self : & root :: carla :: client :: TrafficLight) -> & root :: carla :: client :: TrafficSign { cxxbridge :: cast_TrafficLight_to_TrafficSign_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: client :: TrafficLight { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: client :: TrafficLight { cxxbridge :: TrafficLight_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: client :: TrafficLight) { cxxbridge :: TrafficLight_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: client :: Walker { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: client :: Walker { cxxbridge :: Walker_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: client :: Walker) { cxxbridge :: Walker_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: client :: ActorBlueprint { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: client :: ActorBlueprint { cxxbridge :: ActorBlueprint_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: client :: ActorBlueprint) { cxxbridge :: ActorBlueprint_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: client :: ActorList { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: client :: ActorList { cxxbridge :: ActorList_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: client :: ActorList) { cxxbridge :: ActorList_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: client :: LaneInvasionSensor { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: client :: LaneInvasionSensor { cxxbridge :: LaneInvasionSensor_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: client :: LaneInvasionSensor) { cxxbridge :: LaneInvasionSensor_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } impl Drop for root :: carla :: client :: LaneInvasionSensor { fn drop (self : & mut root :: carla :: client :: LaneInvasionSensor) { unsafe { cxxbridge :: LaneInvasionSensor_destructor_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla :: client :: Landmark { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: client :: Landmark) { unsafe { cxxbridge :: Landmark_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla :: client :: Timestamp { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla :: client :: Timestamp > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: client :: Timestamp > >) { cxxbridge :: carla_client_Timestamp_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla :: client :: Timestamp { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla :: client :: Timestamp , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: client :: Timestamp > >) { cxxbridge :: carla_client_Timestamp_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla :: client :: Timestamp { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: client :: Timestamp) { unsafe { cxxbridge :: Timestamp_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla :: client :: WorldSnapshot { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla :: client :: WorldSnapshot > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: client :: WorldSnapshot > >) { cxxbridge :: carla_client_WorldSnapshot_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla :: client :: WorldSnapshot { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla :: client :: WorldSnapshot , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: client :: WorldSnapshot > >) { cxxbridge :: carla_client_WorldSnapshot_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla :: client :: WorldSnapshot { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: client :: WorldSnapshot) { unsafe { cxxbridge :: WorldSnapshot_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla :: client :: Light { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: client :: Light) { unsafe { cxxbridge :: Light_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla :: client :: ActorBlueprint { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: client :: ActorBlueprint) { unsafe { cxxbridge :: ActorBlueprint_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla :: client :: Vehicle { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: client :: Vehicle) { unsafe { cxxbridge :: Vehicle_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla :: client :: TrafficSign { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: client :: TrafficSign) { unsafe { cxxbridge :: TrafficSign_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla :: client :: TrafficLight { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: client :: TrafficLight) { unsafe { cxxbridge :: TrafficLight_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla :: client :: Walker { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: client :: Walker) { unsafe { cxxbridge :: Walker_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla :: client :: ActorList { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: client :: ActorList) { unsafe { cxxbridge :: ActorList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: client :: ActorInitializer { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: client :: ActorInitializer { cxxbridge :: ActorInitializer_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: client :: ActorInitializer) { cxxbridge :: ActorInitializer_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla :: client :: ActorInitializer { unsafe fn move_new (mut arg1 : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla :: client :: ActorInitializer > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: client :: ActorInitializer > >) { cxxbridge :: carla_client_ActorInitializer_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (arg1 . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: client :: World { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: client :: World { cxxbridge :: World_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: client :: World) { cxxbridge :: World_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla :: client :: World { unsafe fn copy_new (arg1 : & root :: carla :: client :: World , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: client :: World > >) { cxxbridge :: carla_client_World_new1_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , arg1) } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla :: client :: World { unsafe fn move_new (mut arg1 : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla :: client :: World > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: client :: World > >) { cxxbridge :: carla_client_World_new2_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (arg1 . as_mut ()) ; r }) } } pub mod detail { # [doc = " Represents the state of all the actors of an episode at a given frame."] # [repr (C , align (8))] pub struct EpisodeState { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 128] } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: client :: detail :: EpisodeState { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: client :: detail :: EpisodeState { cxxbridge :: EpisodeState_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: client :: detail :: EpisodeState) { cxxbridge :: EpisodeState_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } # [allow (unused_imports)] use self :: super :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: root ; } # [allow (unused_imports)] use self :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: root ; } pub mod geom { # [repr (C)] pub struct Vector3D { pub x : f32 , pub y : f32 , pub z : f32 , } # [repr (C , align (4))] pub struct Vector3DInt { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 12] } # [repr (C , align (1))] pub struct Math { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 1] } # [doc = "autocxx bindings couldn't be generated: This item name is used in multiple namespaces. At present, autocxx and cxx allow only one type of a given name. This limitation will be fixed in future. (Items found with this name: carla::geom::Location, carla::rpc::Location)"] pub struct Location ; # [repr (C)] pub struct Rotation { pub pitch : f32 , pub yaw : f32 , pub roll : f32 , } # [repr (C , align (4))] pub struct BoundingBox { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 36] } # [repr (C)] pub struct Vector2D { pub x : f32 , pub y : f32 , } # [doc = " Material that references the vertex index start and end of\n a mesh where it is affecting."] # [repr (C , align (8))] pub struct MeshMaterial { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 48] } # [doc = " Mesh data container, validator and exporter."] # [repr (C , align (8))] pub struct Mesh { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 120] } pub type Mesh_vertex_type = root :: carla :: geom :: Vector3D ; pub type Mesh_normal_type = root :: carla :: geom :: Vector3D ; pub type Mesh_index_type = usize ; pub type Mesh_uv_type = root :: carla :: geom :: Vector2D ; # [doc = " Material that references the vertex index start and end of\n a mesh where it is affecting."] pub type Mesh_material_type = root :: carla :: geom :: MeshMaterial ; # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] pub struct PointCloudRtree_BPoint ; # [doc = "autocxx bindings couldn't be generated: This typedef takes generic parameters, not yet supported by autocxx."] pub struct PointCloudRtree_TreeElement ; # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] pub struct SegmentCloudRtree_BPoint ; # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] pub struct SegmentCloudRtree_BSegment ; # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] pub struct SegmentCloudRtree_TreeElement ; # [repr (C)] pub struct GeoLocation { pub latitude : f64 , pub longitude : f64 , pub altitude : f64 , } # [doc = " Describes a Cubic Polynomial so:\n f(x) = a + bx + cx^2 + dx^3"] # [repr (C , align (8))] pub struct CubicPolynomial { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 40] } pub type CubicPolynomial_value_type = f64 ; # [doc = "autocxx bindings couldn't be generated: bindgen generated multiple different APIs (functions/types) with this name. autocxx doesn't know how to disambiguate them, so we won't generate bindings for any of them."] pub struct Transform ; impl Vector3D { # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: clmdep_msgpack::v2::object"] fn msgpack_unpack (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_geom_Vector3D_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this) }) } } pub fn new1 (ix : f32 , iy : f32 , iz : f32) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_geom_Vector3D_new1_autocxx_wrapper_0xd539d5a17acbdd25 (this , ix , iy , iz) }) } } } impl Vector3DInt { pub fn SquaredLength (self : & root :: carla :: geom :: Vector3DInt) -> i64 { cxxbridge :: carla_geom_Vector3DInt_SquaredLength_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn Length (self : & root :: carla :: geom :: Vector3DInt) -> f64 { cxxbridge :: carla_geom_Vector3DInt_Length_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: clmdep_msgpack::v2::object"] fn carla_geom_Vector3DInt_msgpack_unpack_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_geom_Vector3DInt_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this) }) } } pub fn new1 (ix : i32 , iy : i32 , iz : i32) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_geom_Vector3DInt_new1_autocxx_wrapper_0xd539d5a17acbdd25 (this , ix , iy , iz) }) } } } impl Math { pub fn Cross (a : & root :: carla :: geom :: Vector3D , b : & root :: carla :: geom :: Vector3D) -> root :: carla :: geom :: Vector3D { cxxbridge :: Cross_autocxx_wrapper_0xd539d5a17acbdd25 (a , b) } pub fn Dot (a : & root :: carla :: geom :: Vector3D , b : & root :: carla :: geom :: Vector3D) -> f32 { cxxbridge :: Dot_autocxx_wrapper_0xd539d5a17acbdd25 (a , b) } pub fn Dot2D (a : & root :: carla :: geom :: Vector3D , b : & root :: carla :: geom :: Vector3D) -> f32 { cxxbridge :: Dot2D_autocxx_wrapper_0xd539d5a17acbdd25 (a , b) } pub fn DistanceSquared (a : & root :: carla :: geom :: Vector3D , b : & root :: carla :: geom :: Vector3D) -> f32 { cxxbridge :: DistanceSquared_autocxx_wrapper_0xd539d5a17acbdd25 (a , b) } pub fn DistanceSquared2D (a : & root :: carla :: geom :: Vector3D , b : & root :: carla :: geom :: Vector3D) -> f32 { cxxbridge :: DistanceSquared2D_autocxx_wrapper_0xd539d5a17acbdd25 (a , b) } pub fn Distance (a : & root :: carla :: geom :: Vector3D , b : & root :: carla :: geom :: Vector3D) -> f32 { cxxbridge :: Distance_autocxx_wrapper_0xd539d5a17acbdd25 (a , b) } pub fn Distance2D (a : & root :: carla :: geom :: Vector3D , b : & root :: carla :: geom :: Vector3D) -> f32 { cxxbridge :: Distance2D_autocxx_wrapper_0xd539d5a17acbdd25 (a , b) } # [doc = " Returns the angle between 2 vectors in radians"] pub fn GetVectorAngle (a : & root :: carla :: geom :: Vector3D , b : & root :: carla :: geom :: Vector3D) -> f64 { cxxbridge :: GetVectorAngle_autocxx_wrapper_0xd539d5a17acbdd25 (a , b) } # [doc = " Returns a pair containing:\n - @b first:  distance from v to p' where p' = p projected on segment\n   (w - v)\n - @b second: Euclidean distance from p to p'\n   @param p point to calculate distance\n   @param v first point of the segment\n   @param w second point of the segment"] pub fn DistanceSegmentToPoint (p : & root :: carla :: geom :: Vector3D , v : & root :: carla :: geom :: Vector3D , w : & root :: carla :: geom :: Vector3D) -> cxx :: UniquePtr < root :: std_pair_float_float_AutocxxConcrete > { cxxbridge :: DistanceSegmentToPoint_autocxx_wrapper_0xd539d5a17acbdd25 (p , v , w) } # [doc = " Returns a pair containing:\n - @b first:  distance across the arc from start_pos to p' where p' = p\n projected on Arc\n - @b second: Euclidean distance from p to p'"] pub fn DistanceArcToPoint (p : root :: carla :: geom :: Vector3D , start_pos : root :: carla :: geom :: Vector3D , length : f32 , heading : f32 , curvature : f32) -> cxx :: UniquePtr < root :: std_pair_float_float_AutocxxConcrete > { cxxbridge :: DistanceArcToPoint_autocxx_wrapper_0xd539d5a17acbdd25 (p , start_pos , length , heading , curvature) } pub fn RotatePointOnOrigin2D (p : root :: carla :: geom :: Vector3D , angle : f32) -> root :: carla :: geom :: Vector3D { cxxbridge :: RotatePointOnOrigin2D_autocxx_wrapper_0xd539d5a17acbdd25 (p , angle) } # [doc = " Compute the unit vector pointing towards the X-axis of @a rotation."] pub fn GetForwardVector (rotation : & root :: carla :: geom :: Rotation) -> root :: carla :: geom :: Vector3D { cxxbridge :: GetForwardVector_autocxx_wrapper_0xd539d5a17acbdd25 (rotation) } # [doc = " Compute the unit vector pointing towards the Y-axis of @a rotation."] pub fn GetRightVector (rotation : & root :: carla :: geom :: Rotation) -> root :: carla :: geom :: Vector3D { cxxbridge :: GetRightVector_autocxx_wrapper_0xd539d5a17acbdd25 (rotation) } # [doc = " Compute the unit vector pointing towards the Y-axis of @a rotation."] pub fn GetUpVector (rotation : & root :: carla :: geom :: Rotation) -> root :: carla :: geom :: Vector3D { cxxbridge :: GetUpVector_autocxx_wrapper_0xd539d5a17acbdd25 (rotation) } # [doc = "autocxx bindings couldn't be generated: A C++ std::vector was found containing some type that cxx can't accommodate as a vector element (int)"] fn GenerateRange (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "Synthesized default constructor."] pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_geom_Math_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this) }) } } } impl Location { # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::geom::Location"] fn carla_geom_Location_Distance_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::geom::Location"] fn carla_geom_Location_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::geom::Location"] fn carla_geom_Location_new1_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::geom::Location"] fn carla_geom_Location_new2_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } } impl Rotation { # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: clmdep_msgpack::v2::object"] fn carla_geom_Rotation_msgpack_unpack_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn GetForwardVector (self : & root :: carla :: geom :: Rotation) -> root :: carla :: geom :: Vector3D { cxxbridge :: carla_geom_Rotation_GetForwardVector_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetRightVector (self : & root :: carla :: geom :: Rotation) -> root :: carla :: geom :: Vector3D { cxxbridge :: carla_geom_Rotation_GetRightVector_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetUpVector (self : & root :: carla :: geom :: Rotation) -> root :: carla :: geom :: Vector3D { cxxbridge :: carla_geom_Rotation_GetUpVector_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_geom_Rotation_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this) }) } } pub fn new1 (p : f32 , y : f32 , r : f32) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_geom_Rotation_new1_autocxx_wrapper_0xd539d5a17acbdd25 (this , p , y , r) }) } } } impl Transform { # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::geom::Transform, clmdep_msgpack::v2::object"] fn carla_geom_Transform_msgpack_unpack_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::geom::Transform"] fn carla_geom_Transform_GetForwardVector_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::geom::Transform"] fn carla_geom_Transform_GetRightVector_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::geom::Transform"] fn carla_geom_Transform_GetUpVector_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::geom::Transform"] fn TransformPoint (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::geom::Transform"] fn TransformVector (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::geom::Transform"] fn InverseTransformPoint (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn GetMatrix (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn GetInverseMatrix (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::geom::Transform"] fn carla_geom_Transform_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::geom::Transform, carla::geom::Location"] fn carla_geom_Transform_new1_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::geom::Transform, carla::geom::Location"] fn carla_geom_Transform_new2_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } } impl BoundingBox { # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::geom::Location, carla::geom::Transform"] fn Contains (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn GetLocalVertices (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn GetLocalVerticesNoRotation (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn GetWorldVertices (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: clmdep_msgpack::v2::object"] fn carla_geom_BoundingBox_msgpack_unpack_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_geom_BoundingBox_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this) }) } } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::geom::Location"] fn carla_geom_BoundingBox_new1_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::geom::Location"] fn carla_geom_BoundingBox_new2_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn new3 < 'a > (in_extent : & 'a root :: carla :: geom :: Vector3D) -> impl autocxx :: moveit :: new :: New < Output = Self > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_geom_BoundingBox_new3_autocxx_wrapper_0xd539d5a17acbdd25 (this , in_extent) }) } } } impl Vector2D { pub fn SquaredLength (self : & root :: carla :: geom :: Vector2D) -> f32 { cxxbridge :: carla_geom_Vector2D_SquaredLength_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn Length (self : & root :: carla :: geom :: Vector2D) -> f32 { cxxbridge :: carla_geom_Vector2D_Length_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn MakeUnitVector (self : & root :: carla :: geom :: Vector2D) -> root :: carla :: geom :: Vector2D { cxxbridge :: carla_geom_Vector2D_MakeUnitVector_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: clmdep_msgpack::v2::object"] fn carla_geom_Vector2D_msgpack_unpack_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_geom_Vector2D_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this) }) } } pub fn new1 (ix : f32 , iy : f32) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_geom_Vector2D_new1_autocxx_wrapper_0xd539d5a17acbdd25 (this , ix , iy) }) } } } impl MeshMaterial { pub fn new < 'a > (new_name : & 'a cxx :: CxxString , start : usize , end : usize) -> impl autocxx :: moveit :: new :: New < Output = Self > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_geom_MeshMaterial_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this , new_name , start , end) }) } } } impl Mesh { # [doc = " Returns a string containing the mesh encoded in OBJ.\n Units are in meters. It is in Unreal space."] pub fn GenerateOBJ (self : & root :: carla :: geom :: Mesh) -> cxx :: UniquePtr < cxx :: CxxString > { cxxbridge :: GenerateOBJ_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = " Returns a string containing the mesh encoded in OBJ.\n Units are in meters. This function exports the OBJ file\n specifically to be consumed by Recast library.\n Changes the build face direction and the coordinate space."] pub fn GenerateOBJForRecast (self : & root :: carla :: geom :: Mesh) -> cxx :: UniquePtr < cxx :: CxxString > { cxxbridge :: GenerateOBJForRecast_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = " Returns a string containing the mesh encoded in PLY.\n Units are in meters."] pub fn GeneratePLY (self : & root :: carla :: geom :: Mesh) -> cxx :: UniquePtr < cxx :: CxxString > { cxxbridge :: GeneratePLY_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn new < 'a > (vertices : & 'a cxx :: CxxVector < root :: carla :: geom :: Vector3D > , normals : & 'a cxx :: CxxVector < root :: carla :: geom :: Vector3D > , indexes : & 'a cxx :: CxxVector < usize > , uvs : & 'a cxx :: CxxVector < root :: carla :: geom :: Vector2D >) -> impl autocxx :: moveit :: new :: New < Output = Self > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_geom_Mesh_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this , vertices , normals , indexes , uvs) }) } } } impl GeoLocation { # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: clmdep_msgpack::v2::object"] fn carla_geom_GeoLocation_msgpack_unpack_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_geom_GeoLocation_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this) }) } } pub fn new1 (latitude : f64 , longitude : f64 , altitude : f64) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_geom_GeoLocation_new1_autocxx_wrapper_0xd539d5a17acbdd25 (this , latitude , longitude , altitude) }) } } } impl CubicPolynomial { pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_geom_CubicPolynomial_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this) }) } } pub fn new2 < 'a > (a : & 'a f64 , b : & 'a f64 , c : & 'a f64 , d : & 'a f64) -> impl autocxx :: moveit :: new :: New < Output = Self > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_geom_CubicPolynomial_new2_autocxx_wrapper_0xd539d5a17acbdd25 (this , a , b , c , d) }) } } pub fn new3 < 'a > (a : & 'a f64 , b : & 'a f64 , c : & 'a f64 , d : & 'a f64 , s : & 'a f64) -> impl autocxx :: moveit :: new :: New < Output = Self > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_geom_CubicPolynomial_new3_autocxx_wrapper_0xd539d5a17acbdd25 (this , a , b , c , d , s) }) } } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: geom :: Vector3D { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: geom :: Vector3D { cxxbridge :: Vector3D_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: geom :: Vector3D) { cxxbridge :: Vector3D_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: geom :: Vector3DInt { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: geom :: Vector3DInt { cxxbridge :: Vector3DInt_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: geom :: Vector3DInt) { cxxbridge :: Vector3DInt_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: geom :: Math { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: geom :: Math { cxxbridge :: Math_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: geom :: Math) { cxxbridge :: Math_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: geom :: Rotation { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: geom :: Rotation { cxxbridge :: Rotation_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: geom :: Rotation) { cxxbridge :: Rotation_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: geom :: BoundingBox { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: geom :: BoundingBox { cxxbridge :: BoundingBox_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: geom :: BoundingBox) { cxxbridge :: BoundingBox_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: geom :: Vector2D { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: geom :: Vector2D { cxxbridge :: Vector2D_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: geom :: Vector2D) { cxxbridge :: Vector2D_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: geom :: MeshMaterial { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: geom :: MeshMaterial { cxxbridge :: MeshMaterial_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: geom :: MeshMaterial) { cxxbridge :: MeshMaterial_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: geom :: Mesh { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: geom :: Mesh { cxxbridge :: Mesh_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: geom :: Mesh) { cxxbridge :: Mesh_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: geom :: GeoLocation { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: geom :: GeoLocation { cxxbridge :: GeoLocation_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: geom :: GeoLocation) { cxxbridge :: GeoLocation_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: geom :: CubicPolynomial { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: geom :: CubicPolynomial { cxxbridge :: CubicPolynomial_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: geom :: CubicPolynomial) { cxxbridge :: CubicPolynomial_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla :: geom :: CubicPolynomial { unsafe fn copy_new (arg1 : & root :: carla :: geom :: CubicPolynomial , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: geom :: CubicPolynomial > >) { cxxbridge :: carla_geom_CubicPolynomial_new1_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , arg1) } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla :: geom :: Vector3D { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla :: geom :: Vector3D > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: geom :: Vector3D > >) { cxxbridge :: carla_geom_Vector3D_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla :: geom :: Vector3D { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla :: geom :: Vector3D , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: geom :: Vector3D > >) { cxxbridge :: carla_geom_Vector3D_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla :: geom :: Vector3D { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: geom :: Vector3D) { unsafe { cxxbridge :: Vector3D_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla :: geom :: Vector3DInt { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla :: geom :: Vector3DInt > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: geom :: Vector3DInt > >) { cxxbridge :: carla_geom_Vector3DInt_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla :: geom :: Vector3DInt { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla :: geom :: Vector3DInt , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: geom :: Vector3DInt > >) { cxxbridge :: carla_geom_Vector3DInt_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla :: geom :: Vector3DInt { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: geom :: Vector3DInt) { unsafe { cxxbridge :: Vector3DInt_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla :: geom :: Math { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla :: geom :: Math > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: geom :: Math > >) { cxxbridge :: carla_geom_Math_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla :: geom :: Math { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla :: geom :: Math , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: geom :: Math > >) { cxxbridge :: carla_geom_Math_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla :: geom :: Math { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: geom :: Math) { unsafe { cxxbridge :: Math_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla :: geom :: Rotation { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla :: geom :: Rotation > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: geom :: Rotation > >) { cxxbridge :: carla_geom_Rotation_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla :: geom :: Rotation { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla :: geom :: Rotation , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: geom :: Rotation > >) { cxxbridge :: carla_geom_Rotation_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla :: geom :: Rotation { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: geom :: Rotation) { unsafe { cxxbridge :: Rotation_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla :: geom :: BoundingBox { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla :: geom :: BoundingBox > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: geom :: BoundingBox > >) { cxxbridge :: carla_geom_BoundingBox_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla :: geom :: BoundingBox { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla :: geom :: BoundingBox , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: geom :: BoundingBox > >) { cxxbridge :: carla_geom_BoundingBox_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla :: geom :: BoundingBox { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: geom :: BoundingBox) { unsafe { cxxbridge :: BoundingBox_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla :: geom :: Vector2D { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla :: geom :: Vector2D > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: geom :: Vector2D > >) { cxxbridge :: carla_geom_Vector2D_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla :: geom :: Vector2D { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla :: geom :: Vector2D , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: geom :: Vector2D > >) { cxxbridge :: carla_geom_Vector2D_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla :: geom :: Vector2D { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: geom :: Vector2D) { unsafe { cxxbridge :: Vector2D_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla :: geom :: MeshMaterial { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla :: geom :: MeshMaterial > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: geom :: MeshMaterial > >) { cxxbridge :: carla_geom_MeshMaterial_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla :: geom :: MeshMaterial { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla :: geom :: MeshMaterial , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: geom :: MeshMaterial > >) { cxxbridge :: carla_geom_MeshMaterial_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla :: geom :: MeshMaterial { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: geom :: MeshMaterial) { unsafe { cxxbridge :: MeshMaterial_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla :: geom :: Mesh { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla :: geom :: Mesh > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: geom :: Mesh > >) { cxxbridge :: carla_geom_Mesh_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } impl Drop for root :: carla :: geom :: Mesh { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: geom :: Mesh) { unsafe { cxxbridge :: Mesh_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla :: geom :: GeoLocation { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla :: geom :: GeoLocation > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: geom :: GeoLocation > >) { cxxbridge :: carla_geom_GeoLocation_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla :: geom :: GeoLocation { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla :: geom :: GeoLocation , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: geom :: GeoLocation > >) { cxxbridge :: carla_geom_GeoLocation_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla :: geom :: GeoLocation { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: geom :: GeoLocation) { unsafe { cxxbridge :: GeoLocation_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla :: geom :: CubicPolynomial { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: geom :: CubicPolynomial) { unsafe { cxxbridge :: CubicPolynomial_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } # [allow (unused_imports)] use self :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: root ; } pub mod road { pub type RoadId = u32 ; # [repr (u32)] # [derive (Clone , Hash , PartialEq , Eq)] pub enum SignalOrientation { Positive = 0 , Negative = 1 , Both = 2 , } # [repr (C , align (4))] pub struct LaneValidity { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 8] } pub type SignId = cxx :: CxxString ; pub type JuncId = i32 ; # [repr (i32)] # [doc = " Can be used as flags"] # [derive (Clone , Hash , PartialEq , Eq)] pub enum Lane_LaneType { None = 1 , Driving = 2 , Stop = 4 , Shoulder = 8 , Biking = 16 , Sidewalk = 32 , Border = 64 , Restricted = 128 , Parking = 256 , Bidirectional = 512 , Median = 1024 , Special1 = 2048 , Special2 = 4096 , Special3 = 8192 , RoadWorks = 16384 , Tram = 32768 , Rail = 65536 , Entry = 131072 , Exit = 262144 , OffRamp = 524288 , OnRamp = 1048576 , Any = - 2 , } pub type SectionId = u32 ; pub type LaneId = i32 ; unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: road :: LaneValidity { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: road :: LaneValidity { cxxbridge :: LaneValidity_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: road :: LaneValidity) { cxxbridge :: LaneValidity_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla :: road :: LaneValidity { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla :: road :: LaneValidity > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: road :: LaneValidity > >) { cxxbridge :: carla_road_LaneValidity_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla :: road :: LaneValidity { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla :: road :: LaneValidity , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: road :: LaneValidity > >) { cxxbridge :: carla_road_LaneValidity_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } pub mod element { # [repr (i32)] # [derive (Clone , Hash , PartialEq , Eq)] pub enum LaneMarking_Type { Other = 0 , Broken = 1 , Solid = 2 , SolidSolid = 3 , SolidBroken = 4 , BrokenSolid = 5 , BrokenBroken = 6 , BottsDots = 7 , Grass = 8 , Curb = 9 , None = 10 , } # [repr (u8)] # [derive (Clone , Hash , PartialEq , Eq)] pub enum LaneMarking_Color { Standard = 0 , Blue = 1 , Green = 2 , Red = 3 , Yellow = 4 , Other = 5 , } # [repr (u8)] # [doc = " Can be used as flags."] # [derive (Clone , Hash , PartialEq , Eq)] pub enum LaneMarking_LaneChange { None = 0 , Right = 1 , Left = 2 , Both = 3 , } # [repr (C , align (8))] pub struct LaneMarking { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: road :: element :: LaneMarking { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: road :: element :: LaneMarking { cxxbridge :: LaneMarking_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: road :: element :: LaneMarking) { cxxbridge :: LaneMarking_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla :: road :: element :: LaneMarking { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla :: road :: element :: LaneMarking > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: road :: element :: LaneMarking > >) { cxxbridge :: carla_road_element_LaneMarking_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla :: road :: element :: LaneMarking { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla :: road :: element :: LaneMarking , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: road :: element :: LaneMarking > >) { cxxbridge :: carla_road_element_LaneMarking_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } # [allow (unused_imports)] use self :: super :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: root ; } # [allow (unused_imports)] use self :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: root ; } pub mod rpc { # [doc = "autocxx bindings couldn't be generated: This item name is used in multiple namespaces. At present, autocxx and cxx allow only one type of a given name. This limitation will be fixed in future. (Items found with this name: carla::rpc::ActorState, carla::client::detail::ActorState)"] pub struct ActorState ; # [repr (u8)] # [derive (Clone , Hash , PartialEq , Eq)] pub enum TrafficLightState { Red = 0 , Yellow = 1 , Green = 2 , Off = 3 , Unknown = 4 , SIZE = 5 , } # [repr (C)] pub struct VehicleControl { pub throttle : f32 , pub steer : f32 , pub brake : f32 , pub hand_brake : bool , pub reverse : bool , pub manual_gear_shift : bool , pub gear : i32 , } # [repr (u8)] # [derive (Clone , Hash , PartialEq , Eq)] pub enum ActorAttributeType { Bool = 0 , Int = 1 , Float = 2 , String = 3 , RGBColor = 4 , SIZE = 5 , INVALID = 6 , } # [doc = "autocxx bindings couldn't be generated: This item name is used in multiple namespaces. At present, autocxx and cxx allow only one type of a given name. This limitation will be fixed in future. (Items found with this name: carla::rpc::LightId, carla::client::LightId, carla_rust::client::LightId)"] pub struct LightId ; # [repr (u8)] # [derive (Clone , Hash , PartialEq , Eq)] pub enum AttachmentType { Rigid = 0 , SpringArm = 1 , SpringArmGhost = 2 , SIZE = 3 , INVALID = 4 , } # [repr (C , align (8))] pub struct EpisodeSettings { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 64] } # [repr (u8)] # [derive (Clone , Hash , PartialEq , Eq)] pub enum CityObjectLabel { None = 0 , Roads = 1 , Sidewalks = 2 , Buildings = 3 , Walls = 4 , Fences = 5 , Poles = 6 , TrafficLight = 7 , TrafficSigns = 8 , Vegetation = 9 , Terrain = 10 , Sky = 11 , Pedestrians = 12 , Rider = 13 , Car = 14 , Truck = 15 , Bus = 16 , Train = 17 , Motorcycle = 18 , Bicycle = 19 , Static = 20 , Dynamic = 21 , Other = 22 , Water = 23 , RoadLines = 24 , Ground = 25 , Bridge = 26 , RailTrack = 27 , GuardRail = 28 , Any = 255 , } # [repr (C , align (4))] pub struct LabelledPoint { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } # [repr (C)] pub struct GearPhysicsControl { pub ratio : f32 , pub down_ratio : f32 , pub up_ratio : f32 , } # [repr (C)] pub struct WheelPhysicsControl { pub tire_friction : f32 , pub damping_rate : f32 , pub max_steer_angle : f32 , pub radius : f32 , pub max_brake_torque : f32 , pub max_handbrake_torque : f32 , pub lat_stiff_max_load : f32 , pub lat_stiff_value : f32 , pub long_stiff_value : f32 , pub position : root :: carla :: geom :: Vector3D , } # [repr (C)] pub struct WeatherParameters { pub cloudiness : f32 , pub precipitation : f32 , pub precipitation_deposits : f32 , pub wind_intensity : f32 , pub sun_azimuth_angle : f32 , pub sun_altitude_angle : f32 , pub fog_density : f32 , pub fog_distance : f32 , pub fog_falloff : f32 , pub wetness : f32 , pub scattering_intensity : f32 , pub mie_scattering_scale : f32 , pub rayleigh_scattering_scale : f32 , pub dust_storm : f32 , } # [doc = " Defines the physical appearance of a vehicle whitch is obtained\n by the sensors."] # [repr (C , align (4))] pub struct VehicleLightState { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 4] } # [repr (C)] pub struct AckermannControllerSettings { pub speed_kp : f32 , pub speed_ki : f32 , pub speed_kd : f32 , pub accel_kp : f32 , pub accel_ki : f32 , pub accel_kd : f32 , } # [repr (C)] pub struct VehicleAckermannControl { pub steer : f32 , pub steer_speed : f32 , pub speed : f32 , pub acceleration : f32 , pub jerk : f32 , } # [repr (u8)] # [derive (Clone , Hash , PartialEq , Eq)] pub enum VehicleDoor { FL = 0 , FR = 1 , RL = 2 , RR = 3 , Hood = 4 , Trunk = 5 , All = 6 , } # [repr (u8)] # [derive (Clone , Hash , PartialEq , Eq)] pub enum VehicleWheelLocation { FL_Wheel = 0 , FR_Wheel = 1 , BL_Wheel = 2 , BR_Wheel = 3 , } # [doc = " Seting for map generation from opendrive without additional geometry"] # [repr (C , align (8))] pub struct OpendriveGenerationParameters { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 40] } # [repr (u32)] # [doc = " Can be used as flags"] # [derive (Clone , Hash , PartialEq , Eq)] pub enum VehicleLightState_LightState { None = 0 , Position = 1 , LowBeam = 2 , HighBeam = 4 , Brake = 8 , RightBlinker = 16 , LeftBlinker = 32 , Reverse = 64 , Fog = 128 , Interior = 256 , Special1 = 512 , Special2 = 1024 , All = 4294967295 , } pub type VehicleLightState_flag_type = u32 ; # [repr (C , align (8))] pub struct VehiclePhysicsControl { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 168] } # [repr (u8)] # [derive (Clone , Hash , PartialEq , Eq)] pub enum VehicleFailureState { None = 0 , Rollover = 1 , Engine = 2 , TirePuncture = 3 , } # [repr (C , align (4))] pub struct WalkerControl { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 20] } # [repr (C , align (8))] pub struct WalkerBoneControlOut { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 24] } # [repr (C , align (8))] pub struct WalkerBoneControlIn { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 24] } # [repr (C , align (8))] pub struct ActorDescription { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 64] } # [repr (C , align (8))] pub struct ActorDefinition { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 96] } pub type VehicleLightStateList = cxx :: CxxVector < root :: std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete > ; # [repr (C , align (8))] pub struct EnvironmentObject { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 112] } impl VehicleControl { # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: clmdep_msgpack::v2::object"] fn carla_rpc_VehicleControl_msgpack_unpack_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rpc_VehicleControl_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this) }) } } pub fn new1 (in_throttle : f32 , in_steer : f32 , in_brake : f32 , in_hand_brake : bool , in_reverse : bool , in_manual_gear_shift : bool , in_gear : i32) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rpc_VehicleControl_new1_autocxx_wrapper_0xd539d5a17acbdd25 (this , in_throttle , in_steer , in_brake , in_hand_brake , in_reverse , in_manual_gear_shift , in_gear) }) } } } impl EpisodeSettings { # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: clmdep_msgpack::v2::object"] fn carla_rpc_EpisodeSettings_msgpack_unpack_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rpc_EpisodeSettings_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this) }) } } pub fn new1 (synchronous_mode : bool , no_rendering_mode : bool , fixed_delta_seconds : f64 , substepping : bool , max_substep_delta_time : f64 , max_substeps : autocxx :: c_int , max_culling_distance : f32 , deterministic_ragdolls : bool , tile_stream_distance : f32 , actor_active_distance : f32) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rpc_EpisodeSettings_new1_autocxx_wrapper_0xd539d5a17acbdd25 (this , synchronous_mode , no_rendering_mode , fixed_delta_seconds , substepping , max_substep_delta_time , max_substeps , max_culling_distance , deterministic_ragdolls , tile_stream_distance , actor_active_distance) }) } } } impl LabelledPoint { # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: clmdep_msgpack::v2::object"] fn carla_rpc_LabelledPoint_msgpack_unpack_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rpc_LabelledPoint_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this) }) } } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::rpc::Location, carla::geom::Location"] fn carla_rpc_LabelledPoint_new1_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } } impl GearPhysicsControl { # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: clmdep_msgpack::v2::object"] fn carla_rpc_GearPhysicsControl_msgpack_unpack_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rpc_GearPhysicsControl_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this) }) } } pub fn new1 (in_ratio : f32 , in_down_ratio : f32 , in_up_ratio : f32) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rpc_GearPhysicsControl_new1_autocxx_wrapper_0xd539d5a17acbdd25 (this , in_ratio , in_down_ratio , in_up_ratio) }) } } } impl WheelPhysicsControl { # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: clmdep_msgpack::v2::object"] fn carla_rpc_WheelPhysicsControl_msgpack_unpack_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rpc_WheelPhysicsControl_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this) }) } } pub fn new1 (in_tire_friction : f32 , in_damping_rate : f32 , in_max_steer_angle : f32 , in_radius : f32 , in_max_brake_torque : f32 , in_max_handbrake_torque : f32 , in_lat_stiff_max_load : f32 , in_lat_stiff_value : f32 , in_long_stiff_value : f32 , in_position : root :: carla :: geom :: Vector3D) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rpc_WheelPhysicsControl_new1_autocxx_wrapper_0xd539d5a17acbdd25 (this , in_tire_friction , in_damping_rate , in_max_steer_angle , in_radius , in_max_brake_torque , in_max_handbrake_torque , in_lat_stiff_max_load , in_lat_stiff_value , in_long_stiff_value , in_position) }) } } } impl WeatherParameters { # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: clmdep_msgpack::v2::object"] fn carla_rpc_WeatherParameters_msgpack_unpack_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = " @}"] pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rpc_WeatherParameters_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this) }) } } pub fn new1 (in_cloudiness : f32 , in_precipitation : f32 , in_precipitation_deposits : f32 , in_wind_intensity : f32 , in_sun_azimuth_angle : f32 , in_sun_altitude_angle : f32 , in_fog_density : f32 , in_fog_distance : f32 , in_fog_falloff : f32 , in_wetness : f32 , in_scattering_intensity : f32 , in_mie_scattering_scale : f32 , in_rayleigh_scattering_scale : f32 , in_dust_storm : f32) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rpc_WeatherParameters_new1_autocxx_wrapper_0xd539d5a17acbdd25 (this , in_cloudiness , in_precipitation , in_precipitation_deposits , in_wind_intensity , in_sun_azimuth_angle , in_sun_altitude_angle , in_fog_density , in_fog_distance , in_fog_falloff , in_wetness , in_scattering_intensity , in_mie_scattering_scale , in_rayleigh_scattering_scale , in_dust_storm) }) } } } impl VehicleLightState { # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: clmdep_msgpack::v2::object"] fn carla_rpc_VehicleLightState_msgpack_unpack_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rpc_VehicleLightState_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this) }) } } pub fn new1 (light_state : root :: carla :: rpc :: VehicleLightState_LightState) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rpc_VehicleLightState_new1_autocxx_wrapper_0xd539d5a17acbdd25 (this , light_state) }) } } pub fn new2 (light_state : u32) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rpc_VehicleLightState_new2_autocxx_wrapper_0xd539d5a17acbdd25 (this , light_state) }) } } } impl AckermannControllerSettings { # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: clmdep_msgpack::v2::object"] fn carla_rpc_AckermannControllerSettings_msgpack_unpack_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rpc_AckermannControllerSettings_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this) }) } } pub fn new1 (speed_kp : f32 , speed_ki : f32 , speed_kd : f32 , accel_kp : f32 , accel_ki : f32 , accel_kd : f32) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rpc_AckermannControllerSettings_new1_autocxx_wrapper_0xd539d5a17acbdd25 (this , speed_kp , speed_ki , speed_kd , accel_kp , accel_ki , accel_kd) }) } } } impl VehicleAckermannControl { # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: clmdep_msgpack::v2::object"] fn carla_rpc_VehicleAckermannControl_msgpack_unpack_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rpc_VehicleAckermannControl_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this) }) } } pub fn new1 (in_steer : f32 , in_steer_speed : f32 , in_speed : f32 , in_acceleration : f32 , in_jerk : f32) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rpc_VehicleAckermannControl_new1_autocxx_wrapper_0xd539d5a17acbdd25 (this , in_steer , in_steer_speed , in_speed , in_acceleration , in_jerk) }) } } } impl OpendriveGenerationParameters { # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: clmdep_msgpack::v2::object"] fn carla_rpc_OpendriveGenerationParameters_msgpack_unpack_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rpc_OpendriveGenerationParameters_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this) }) } } pub fn new1 (v_distance : f64 , max_road_len : f64 , w_height : f64 , a_width : f64 , smooth_junc : bool , e_visibility : bool , e_pedestrian : bool) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rpc_OpendriveGenerationParameters_new1_autocxx_wrapper_0xd539d5a17acbdd25 (this , v_distance , max_road_len , w_height , a_width , smooth_junc , e_visibility , e_pedestrian) }) } } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: rpc :: VehicleControl { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: rpc :: VehicleControl { cxxbridge :: VehicleControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: rpc :: VehicleControl) { cxxbridge :: VehicleControl_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: rpc :: EpisodeSettings { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: rpc :: EpisodeSettings { cxxbridge :: EpisodeSettings_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: rpc :: EpisodeSettings) { cxxbridge :: EpisodeSettings_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: rpc :: LabelledPoint { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: rpc :: LabelledPoint { cxxbridge :: LabelledPoint_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: rpc :: LabelledPoint) { cxxbridge :: LabelledPoint_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: rpc :: GearPhysicsControl { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: rpc :: GearPhysicsControl { cxxbridge :: GearPhysicsControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: rpc :: GearPhysicsControl) { cxxbridge :: GearPhysicsControl_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: rpc :: WheelPhysicsControl { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: rpc :: WheelPhysicsControl { cxxbridge :: WheelPhysicsControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: rpc :: WheelPhysicsControl) { cxxbridge :: WheelPhysicsControl_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: rpc :: WeatherParameters { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: rpc :: WeatherParameters { cxxbridge :: WeatherParameters_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: rpc :: WeatherParameters) { cxxbridge :: WeatherParameters_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: rpc :: VehicleLightState { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: rpc :: VehicleLightState { cxxbridge :: VehicleLightState_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: rpc :: VehicleLightState) { cxxbridge :: VehicleLightState_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: rpc :: AckermannControllerSettings { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: rpc :: AckermannControllerSettings { cxxbridge :: AckermannControllerSettings_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: rpc :: AckermannControllerSettings) { cxxbridge :: AckermannControllerSettings_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: rpc :: VehicleAckermannControl { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: rpc :: VehicleAckermannControl { cxxbridge :: VehicleAckermannControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: rpc :: VehicleAckermannControl) { cxxbridge :: VehicleAckermannControl_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: rpc :: OpendriveGenerationParameters { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: rpc :: OpendriveGenerationParameters { cxxbridge :: OpendriveGenerationParameters_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: rpc :: OpendriveGenerationParameters) { cxxbridge :: OpendriveGenerationParameters_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla :: rpc :: VehicleControl { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla :: rpc :: VehicleControl > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: rpc :: VehicleControl > >) { cxxbridge :: carla_rpc_VehicleControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla :: rpc :: VehicleControl { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla :: rpc :: VehicleControl , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: rpc :: VehicleControl > >) { cxxbridge :: carla_rpc_VehicleControl_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla :: rpc :: VehicleControl { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: rpc :: VehicleControl) { unsafe { cxxbridge :: VehicleControl_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla :: rpc :: EpisodeSettings { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla :: rpc :: EpisodeSettings > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: rpc :: EpisodeSettings > >) { cxxbridge :: carla_rpc_EpisodeSettings_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla :: rpc :: EpisodeSettings { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla :: rpc :: EpisodeSettings , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: rpc :: EpisodeSettings > >) { cxxbridge :: carla_rpc_EpisodeSettings_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla :: rpc :: EpisodeSettings { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: rpc :: EpisodeSettings) { unsafe { cxxbridge :: EpisodeSettings_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla :: rpc :: LabelledPoint { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla :: rpc :: LabelledPoint > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: rpc :: LabelledPoint > >) { cxxbridge :: carla_rpc_LabelledPoint_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla :: rpc :: LabelledPoint { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla :: rpc :: LabelledPoint , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: rpc :: LabelledPoint > >) { cxxbridge :: carla_rpc_LabelledPoint_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla :: rpc :: LabelledPoint { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: rpc :: LabelledPoint) { unsafe { cxxbridge :: LabelledPoint_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla :: rpc :: GearPhysicsControl { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla :: rpc :: GearPhysicsControl > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: rpc :: GearPhysicsControl > >) { cxxbridge :: carla_rpc_GearPhysicsControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla :: rpc :: GearPhysicsControl { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla :: rpc :: GearPhysicsControl , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: rpc :: GearPhysicsControl > >) { cxxbridge :: carla_rpc_GearPhysicsControl_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla :: rpc :: GearPhysicsControl { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: rpc :: GearPhysicsControl) { unsafe { cxxbridge :: GearPhysicsControl_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla :: rpc :: WheelPhysicsControl { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla :: rpc :: WheelPhysicsControl > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: rpc :: WheelPhysicsControl > >) { cxxbridge :: carla_rpc_WheelPhysicsControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla :: rpc :: WheelPhysicsControl { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla :: rpc :: WheelPhysicsControl , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: rpc :: WheelPhysicsControl > >) { cxxbridge :: carla_rpc_WheelPhysicsControl_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla :: rpc :: WheelPhysicsControl { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: rpc :: WheelPhysicsControl) { unsafe { cxxbridge :: WheelPhysicsControl_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla :: rpc :: WeatherParameters { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla :: rpc :: WeatherParameters > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: rpc :: WeatherParameters > >) { cxxbridge :: carla_rpc_WeatherParameters_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla :: rpc :: WeatherParameters { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla :: rpc :: WeatherParameters , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: rpc :: WeatherParameters > >) { cxxbridge :: carla_rpc_WeatherParameters_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla :: rpc :: WeatherParameters { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: rpc :: WeatherParameters) { unsafe { cxxbridge :: WeatherParameters_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla :: rpc :: VehicleLightState { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla :: rpc :: VehicleLightState > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: rpc :: VehicleLightState > >) { cxxbridge :: carla_rpc_VehicleLightState_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla :: rpc :: VehicleLightState { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla :: rpc :: VehicleLightState , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: rpc :: VehicleLightState > >) { cxxbridge :: carla_rpc_VehicleLightState_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla :: rpc :: VehicleLightState { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: rpc :: VehicleLightState) { unsafe { cxxbridge :: VehicleLightState_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla :: rpc :: AckermannControllerSettings { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla :: rpc :: AckermannControllerSettings > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: rpc :: AckermannControllerSettings > >) { cxxbridge :: carla_rpc_AckermannControllerSettings_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla :: rpc :: AckermannControllerSettings { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla :: rpc :: AckermannControllerSettings , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: rpc :: AckermannControllerSettings > >) { cxxbridge :: carla_rpc_AckermannControllerSettings_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla :: rpc :: AckermannControllerSettings { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: rpc :: AckermannControllerSettings) { unsafe { cxxbridge :: AckermannControllerSettings_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla :: rpc :: VehicleAckermannControl { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla :: rpc :: VehicleAckermannControl > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: rpc :: VehicleAckermannControl > >) { cxxbridge :: carla_rpc_VehicleAckermannControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla :: rpc :: VehicleAckermannControl { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla :: rpc :: VehicleAckermannControl , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: rpc :: VehicleAckermannControl > >) { cxxbridge :: carla_rpc_VehicleAckermannControl_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla :: rpc :: VehicleAckermannControl { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: rpc :: VehicleAckermannControl) { unsafe { cxxbridge :: VehicleAckermannControl_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla :: rpc :: OpendriveGenerationParameters { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla :: rpc :: OpendriveGenerationParameters > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: rpc :: OpendriveGenerationParameters > >) { cxxbridge :: carla_rpc_OpendriveGenerationParameters_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla :: rpc :: OpendriveGenerationParameters { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla :: rpc :: OpendriveGenerationParameters , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: rpc :: OpendriveGenerationParameters > >) { cxxbridge :: carla_rpc_OpendriveGenerationParameters_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla :: rpc :: OpendriveGenerationParameters { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: rpc :: OpendriveGenerationParameters) { unsafe { cxxbridge :: OpendriveGenerationParameters_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: rpc :: VehiclePhysicsControl { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: rpc :: VehiclePhysicsControl { cxxbridge :: VehiclePhysicsControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: rpc :: VehiclePhysicsControl) { cxxbridge :: VehiclePhysicsControl_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla :: rpc :: VehiclePhysicsControl { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla :: rpc :: VehiclePhysicsControl > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: rpc :: VehiclePhysicsControl > >) { cxxbridge :: carla_rpc_VehiclePhysicsControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: rpc :: WalkerControl { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: rpc :: WalkerControl { cxxbridge :: WalkerControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: rpc :: WalkerControl) { cxxbridge :: WalkerControl_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla :: rpc :: WalkerControl { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla :: rpc :: WalkerControl > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: rpc :: WalkerControl > >) { cxxbridge :: carla_rpc_WalkerControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla :: rpc :: WalkerControl { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla :: rpc :: WalkerControl , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: rpc :: WalkerControl > >) { cxxbridge :: carla_rpc_WalkerControl_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: rpc :: WalkerBoneControlOut { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: rpc :: WalkerBoneControlOut { cxxbridge :: WalkerBoneControlOut_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: rpc :: WalkerBoneControlOut) { cxxbridge :: WalkerBoneControlOut_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla :: rpc :: WalkerBoneControlOut { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla :: rpc :: WalkerBoneControlOut > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: rpc :: WalkerBoneControlOut > >) { cxxbridge :: carla_rpc_WalkerBoneControlOut_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: rpc :: WalkerBoneControlIn { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: rpc :: WalkerBoneControlIn { cxxbridge :: WalkerBoneControlIn_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: rpc :: WalkerBoneControlIn) { cxxbridge :: WalkerBoneControlIn_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla :: rpc :: WalkerBoneControlIn { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla :: rpc :: WalkerBoneControlIn > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: rpc :: WalkerBoneControlIn > >) { cxxbridge :: carla_rpc_WalkerBoneControlIn_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: rpc :: ActorDescription { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: rpc :: ActorDescription { cxxbridge :: ActorDescription_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: rpc :: ActorDescription) { cxxbridge :: ActorDescription_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla :: rpc :: ActorDescription { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla :: rpc :: ActorDescription > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: rpc :: ActorDescription > >) { cxxbridge :: carla_rpc_ActorDescription_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: rpc :: ActorDefinition { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: rpc :: ActorDefinition { cxxbridge :: ActorDefinition_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: rpc :: ActorDefinition) { cxxbridge :: ActorDefinition_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla :: rpc :: ActorDefinition { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla :: rpc :: ActorDefinition > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: rpc :: ActorDefinition > >) { cxxbridge :: carla_rpc_ActorDefinition_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: rpc :: EnvironmentObject { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: rpc :: EnvironmentObject { cxxbridge :: EnvironmentObject_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: rpc :: EnvironmentObject) { cxxbridge :: EnvironmentObject_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } # [allow (unused_imports)] use self :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: root ; } pub mod sensor { # [doc = " Base class for all the objects containing data generated by a sensor."] # [repr (C , align (8))] pub struct SensorData { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 88] } # [doc = " Wrapper around the raw data generated by a sensor plus some useful\n meta-information."] # [repr (C , align (8))] pub struct RawData { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 32] } impl SensorData { # [doc = " Frame count when the data was generated."] pub fn GetFrame (self : & root :: carla :: sensor :: SensorData) -> usize { cxxbridge :: carla_sensor_SensorData_GetFrame_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = " Simulation-time when the data was generated."] pub fn GetTimestamp (self : & root :: carla :: sensor :: SensorData) -> f64 { cxxbridge :: carla_sensor_SensorData_GetTimestamp_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::rpc::Transform, carla::geom::Transform"] fn carla_sensor_SensorData_GetSensorTransform_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::rpc::Transform, carla::geom::Transform"] fn carla_sensor_SensorData_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: sensor :: SensorData { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: sensor :: SensorData { cxxbridge :: SensorData_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: sensor :: SensorData) { cxxbridge :: SensorData_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } impl Drop for root :: carla :: sensor :: SensorData { fn drop (self : & mut root :: carla :: sensor :: SensorData) { unsafe { cxxbridge :: SensorData_destructor_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: sensor :: RawData { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: sensor :: RawData { cxxbridge :: RawData_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: sensor :: RawData) { cxxbridge :: RawData_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla :: sensor :: RawData { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla :: sensor :: RawData > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: sensor :: RawData > >) { cxxbridge :: carla_sensor_RawData_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } pub mod data { pub use cxxbridge :: Image ; # [repr (C , align (1))] pub struct SemanticLidarDetection { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 24] } # [repr (C , align (8))] pub struct SemanticLidarData { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 64] } # [doc = " Helper class to store and serialize the data generated by a Lidar.\n\n The header of a Lidar measurement consists of an array of uint32_t's in\n the following layout\n\n    {\n      Horizontal angle (float),\n      Channel count,\n      Point count of channel 0,\n      ...\n      Point count of channel n,\n    }\n\n The points are stored in an array of floats\n\n    {\n      X0, Y0, Z0, I0\n      ...\n      Xn, Yn, Zn, In\n    }\n"] # [repr (C , align (4))] pub struct LidarDetection { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } # [repr (C , align (8))] pub struct LidarData { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 88] } # [repr (C , align (8))] pub struct IMUMeasurement { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 120] } # [doc = " A change of GNSS Measurement."] # [repr (C , align (8))] pub struct GnssMeasurement { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 112] } # [doc = " Measurement produced by a Lidar. Consists of an array of 3D points plus\n some extra meta-information about the Lidar."] # [repr (C , align (8))] pub struct LidarMeasurement { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 128] } # [doc = " Measurement produced by a Lidar. Consists of an array of 3D points plus\n some extra meta-information about the Lidar."] # [repr (C , align (8))] pub struct SemanticLidarMeasurement { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 128] } # [repr (C)] pub struct RadarDetection { pub velocity : f32 , pub azimuth : f32 , pub altitude : f32 , pub depth : f32 , } # [repr (C , align (8))] pub struct RadarData { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 24] } # [doc = " Measurement produced by a Radar. Consists of an array of RadarDetection.\n A RadarDetection contains 4 floats: velocity, azimuth, altitude and depth"] # [repr (C , align (8))] pub struct RadarMeasurement { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 128] } impl SemanticLidarDetection { pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_sensor_data_SemanticLidarDetection_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this) }) } } pub fn new1 (x : f32 , y : f32 , z : f32 , cosTh : f32 , idx : u32 , tag : u32) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_sensor_data_SemanticLidarDetection_new1_autocxx_wrapper_0xd539d5a17acbdd25 (this , x , y , z , cosTh , idx , tag) }) } } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::geom::Location"] fn carla_sensor_data_SemanticLidarDetection_new2_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } } impl SemanticLidarData { # [doc = "autocxx bindings couldn't be generated: autocxx does not know how to generate bindings to operator="] fn operator_equals (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn GetHorizontalAngle (self : & root :: carla :: sensor :: data :: SemanticLidarData) -> f32 { cxxbridge :: carla_sensor_data_SemanticLidarData_GetHorizontalAngle_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetChannelCount (self : & root :: carla :: sensor :: data :: SemanticLidarData) -> u32 { cxxbridge :: carla_sensor_data_SemanticLidarData_GetChannelCount_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn new (ChannelCount : u32) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_sensor_data_SemanticLidarData_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this , ChannelCount) }) } } pub fn ResetMemory (self : :: core :: pin :: Pin < & mut root :: carla :: sensor :: data :: SemanticLidarData > , points_per_channel : impl autocxx :: ValueParam < cxx :: CxxVector < u32 > >) { let mut space0 = autocxx :: ValueParamHandler :: default () ; let mut space0 = unsafe { :: core :: pin :: Pin :: new_unchecked (& mut space0) } ; unsafe { space0 . as_mut () . populate (points_per_channel) ; cxxbridge :: ResetMemory_autocxx_wrapper_0xd539d5a17acbdd25 (self , space0 . get_ptr ()) } } pub fn WriteChannelCount (self : :: core :: pin :: Pin < & mut root :: carla :: sensor :: data :: SemanticLidarData > , points_per_channel : impl autocxx :: ValueParam < cxx :: CxxVector < u32 > >) { let mut space0 = autocxx :: ValueParamHandler :: default () ; let mut space0 = unsafe { :: core :: pin :: Pin :: new_unchecked (& mut space0) } ; unsafe { space0 . as_mut () . populate (points_per_channel) ; cxxbridge :: WriteChannelCount_autocxx_wrapper_0xd539d5a17acbdd25 (self , space0 . get_ptr ()) } } pub fn WritePointSync (self : :: core :: pin :: Pin < & mut root :: carla :: sensor :: data :: SemanticLidarData > , detection : :: core :: pin :: Pin < & mut root :: carla :: sensor :: data :: SemanticLidarDetection >) { cxxbridge :: WritePointSync_autocxx_wrapper_0xd539d5a17acbdd25 (self , detection) } } impl LidarDetection { pub fn WritePlyHeaderInfo (self : & root :: carla :: sensor :: data :: LidarDetection , out : :: core :: pin :: Pin < & mut root :: std_basic_ostream_char_AutocxxConcrete >) { cxxbridge :: carla_sensor_data_LidarDetection_WritePlyHeaderInfo_autocxx_wrapper_0xd539d5a17acbdd25 (self , out) } pub fn WriteDetection (self : & root :: carla :: sensor :: data :: LidarDetection , out : :: core :: pin :: Pin < & mut root :: std_basic_ostream_char_AutocxxConcrete >) { cxxbridge :: carla_sensor_data_LidarDetection_WriteDetection_autocxx_wrapper_0xd539d5a17acbdd25 (self , out) } pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_sensor_data_LidarDetection_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this) }) } } pub fn new1 (x : f32 , y : f32 , z : f32 , intensity : f32) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_sensor_data_LidarDetection_new1_autocxx_wrapper_0xd539d5a17acbdd25 (this , x , y , z , intensity) }) } } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::geom::Location"] fn carla_sensor_data_LidarDetection_new2_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } } impl LidarData { # [doc = "autocxx bindings couldn't be generated: autocxx does not know how to generate bindings to operator="] fn operator_equals (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn WritePointSync (self : :: core :: pin :: Pin < & mut root :: carla :: sensor :: data :: LidarData > , detection : :: core :: pin :: Pin < & mut root :: carla :: sensor :: data :: LidarDetection >) { cxxbridge :: carla_sensor_data_LidarData_WritePointSync_autocxx_wrapper_0xd539d5a17acbdd25 (self , detection) } pub fn new (ChannelCount : u32) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_sensor_data_LidarData_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this , ChannelCount) }) } } pub fn ResetMemory (self : :: core :: pin :: Pin < & mut root :: carla :: sensor :: data :: LidarData > , points_per_channel : impl autocxx :: ValueParam < cxx :: CxxVector < u32 > >) { let mut space0 = autocxx :: ValueParamHandler :: default () ; let mut space0 = unsafe { :: core :: pin :: Pin :: new_unchecked (& mut space0) } ; unsafe { space0 . as_mut () . populate (points_per_channel) ; cxxbridge :: carla_sensor_data_LidarData_ResetMemory_autocxx_wrapper_0xd539d5a17acbdd25 (self , space0 . get_ptr ()) } } pub fn WritePointSync1 (self : :: core :: pin :: Pin < & mut root :: carla :: sensor :: data :: LidarData > , detection : :: core :: pin :: Pin < & mut root :: carla :: sensor :: data :: SemanticLidarDetection >) { cxxbridge :: WritePointSync1_autocxx_wrapper_0xd539d5a17acbdd25 (self , detection) } } impl LidarMeasurement { # [doc = "autocxx bindings couldn't be generated: This method is private"] fn GetHeader (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = " Horizontal angle of the Lidar at the time of the measurement."] pub fn GetHorizontalAngle (self : & root :: carla :: sensor :: data :: LidarMeasurement) -> f32 { cxxbridge :: carla_sensor_data_LidarMeasurement_GetHorizontalAngle_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = " Number of channels of the Lidar."] pub fn GetChannelCount (self : & root :: carla :: sensor :: data :: LidarMeasurement) -> autocxx :: c_uint { cxxbridge :: carla_sensor_data_LidarMeasurement_GetChannelCount_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = " Retrieve the number of points that @a channel generated. Points are\n sorted by channel, so this method allows to identify the channel that\n generated each point."] pub fn GetPointCount (self : & root :: carla :: sensor :: data :: LidarMeasurement , channel : usize) -> autocxx :: c_uint { cxxbridge :: carla_sensor_data_LidarMeasurement_GetPointCount_autocxx_wrapper_0xd539d5a17acbdd25 (self , channel) } } impl SemanticLidarMeasurement { # [doc = "autocxx bindings couldn't be generated: This method is private"] fn GetHeader (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = " Horizontal angle of the Lidar at the time of the measurement."] pub fn GetHorizontalAngle (self : & root :: carla :: sensor :: data :: SemanticLidarMeasurement) -> f32 { cxxbridge :: carla_sensor_data_SemanticLidarMeasurement_GetHorizontalAngle_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = " Number of channels of the Lidar."] pub fn GetChannelCount (self : & root :: carla :: sensor :: data :: SemanticLidarMeasurement) -> autocxx :: c_uint { cxxbridge :: carla_sensor_data_SemanticLidarMeasurement_GetChannelCount_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = " Retrieve the number of points that @a channel generated. Points are\n sorted by channel, so this method allows to identify the channel that\n generated each point."] pub fn GetPointCount (self : & root :: carla :: sensor :: data :: SemanticLidarMeasurement , channel : usize) -> autocxx :: c_uint { cxxbridge :: carla_sensor_data_SemanticLidarMeasurement_GetPointCount_autocxx_wrapper_0xd539d5a17acbdd25 (self , channel) } } impl RadarData { # [doc = "autocxx bindings couldn't be generated: autocxx does not know how to generate bindings to operator="] fn operator_equals (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = " Adds a new detection."] pub fn WriteDetection (self : :: core :: pin :: Pin < & mut root :: carla :: sensor :: data :: RadarData > , detection : root :: carla :: sensor :: data :: RadarDetection) { cxxbridge :: carla_sensor_data_RadarData_WriteDetection_autocxx_wrapper_0xd539d5a17acbdd25 (self , detection) } pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_sensor_data_RadarData_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this) }) } } } impl RadarMeasurement { # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: size_type"] fn GetDetectionAmount_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } } impl RadarDetection { # [doc = "Synthesized default constructor."] pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_sensor_data_RadarDetection_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this) }) } } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: sensor :: data :: SemanticLidarDetection { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: sensor :: data :: SemanticLidarDetection { cxxbridge :: SemanticLidarDetection_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: sensor :: data :: SemanticLidarDetection) { cxxbridge :: SemanticLidarDetection_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: sensor :: data :: SemanticLidarData { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: sensor :: data :: SemanticLidarData { cxxbridge :: SemanticLidarData_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: sensor :: data :: SemanticLidarData) { cxxbridge :: SemanticLidarData_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: sensor :: data :: LidarDetection { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: sensor :: data :: LidarDetection { cxxbridge :: LidarDetection_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: sensor :: data :: LidarDetection) { cxxbridge :: LidarDetection_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } impl AsRef < root :: carla :: sensor :: data :: SemanticLidarData > for root :: carla :: sensor :: data :: LidarData { fn as_ref (self : & root :: carla :: sensor :: data :: LidarData) -> & root :: carla :: sensor :: data :: SemanticLidarData { cxxbridge :: cast_LidarData_to_SemanticLidarData_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: sensor :: data :: LidarData { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: sensor :: data :: LidarData { cxxbridge :: LidarData_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: sensor :: data :: LidarData) { cxxbridge :: LidarData_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } impl AsRef < root :: carla :: sensor :: SensorData > for root :: carla :: sensor :: data :: IMUMeasurement { fn as_ref (self : & root :: carla :: sensor :: data :: IMUMeasurement) -> & root :: carla :: sensor :: SensorData { cxxbridge :: cast_IMUMeasurement_to_SensorData_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: sensor :: data :: IMUMeasurement { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: sensor :: data :: IMUMeasurement { cxxbridge :: IMUMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: sensor :: data :: IMUMeasurement) { cxxbridge :: IMUMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } impl AsRef < root :: carla :: sensor :: SensorData > for root :: carla :: sensor :: data :: GnssMeasurement { fn as_ref (self : & root :: carla :: sensor :: data :: GnssMeasurement) -> & root :: carla :: sensor :: SensorData { cxxbridge :: cast_GnssMeasurement_to_SensorData_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: sensor :: data :: GnssMeasurement { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: sensor :: data :: GnssMeasurement { cxxbridge :: GnssMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: sensor :: data :: GnssMeasurement) { cxxbridge :: GnssMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: sensor :: data :: LidarMeasurement { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: sensor :: data :: LidarMeasurement { cxxbridge :: LidarMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: sensor :: data :: LidarMeasurement) { cxxbridge :: LidarMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: sensor :: data :: SemanticLidarMeasurement { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: sensor :: data :: SemanticLidarMeasurement { cxxbridge :: SemanticLidarMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: sensor :: data :: SemanticLidarMeasurement) { cxxbridge :: SemanticLidarMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: sensor :: data :: RadarDetection { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: sensor :: data :: RadarDetection { cxxbridge :: RadarDetection_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: sensor :: data :: RadarDetection) { cxxbridge :: RadarDetection_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: sensor :: data :: RadarData { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: sensor :: data :: RadarData { cxxbridge :: RadarData_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: sensor :: data :: RadarData) { cxxbridge :: RadarData_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: sensor :: data :: RadarMeasurement { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: sensor :: data :: RadarMeasurement { cxxbridge :: RadarMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: sensor :: data :: RadarMeasurement) { cxxbridge :: RadarMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } impl Drop for root :: carla :: sensor :: data :: SemanticLidarData { fn drop (self : & mut root :: carla :: sensor :: data :: SemanticLidarData) { unsafe { cxxbridge :: SemanticLidarData_destructor_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla :: sensor :: data :: LidarData { fn drop (self : & mut root :: carla :: sensor :: data :: LidarData) { unsafe { cxxbridge :: LidarData_destructor_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla :: sensor :: data :: SemanticLidarDetection { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla :: sensor :: data :: SemanticLidarDetection > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: sensor :: data :: SemanticLidarDetection > >) { cxxbridge :: carla_sensor_data_SemanticLidarDetection_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla :: sensor :: data :: SemanticLidarDetection { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla :: sensor :: data :: SemanticLidarDetection , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: sensor :: data :: SemanticLidarDetection > >) { cxxbridge :: carla_sensor_data_SemanticLidarDetection_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla :: sensor :: data :: SemanticLidarDetection { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: sensor :: data :: SemanticLidarDetection) { unsafe { cxxbridge :: SemanticLidarDetection_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla :: sensor :: data :: LidarDetection { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla :: sensor :: data :: LidarDetection > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: sensor :: data :: LidarDetection > >) { cxxbridge :: carla_sensor_data_LidarDetection_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla :: sensor :: data :: LidarDetection { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla :: sensor :: data :: LidarDetection , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: sensor :: data :: LidarDetection > >) { cxxbridge :: carla_sensor_data_LidarDetection_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla :: sensor :: data :: LidarDetection { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: sensor :: data :: LidarDetection) { unsafe { cxxbridge :: LidarDetection_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla :: sensor :: data :: LidarMeasurement { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: sensor :: data :: LidarMeasurement) { unsafe { cxxbridge :: LidarMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla :: sensor :: data :: SemanticLidarMeasurement { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: sensor :: data :: SemanticLidarMeasurement) { unsafe { cxxbridge :: SemanticLidarMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla :: sensor :: data :: RadarDetection { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla :: sensor :: data :: RadarDetection > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: sensor :: data :: RadarDetection > >) { cxxbridge :: carla_sensor_data_RadarDetection_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla :: sensor :: data :: RadarDetection { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla :: sensor :: data :: RadarDetection , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: sensor :: data :: RadarDetection > >) { cxxbridge :: carla_sensor_data_RadarDetection_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla :: sensor :: data :: RadarDetection { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: sensor :: data :: RadarDetection) { unsafe { cxxbridge :: RadarDetection_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla :: sensor :: data :: RadarData { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: sensor :: data :: RadarData) { unsafe { cxxbridge :: RadarData_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla :: sensor :: data :: RadarMeasurement { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: sensor :: data :: RadarMeasurement) { unsafe { cxxbridge :: RadarMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla :: sensor :: data :: IMUMeasurement { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: sensor :: data :: IMUMeasurement) { unsafe { cxxbridge :: IMUMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla :: sensor :: data :: GnssMeasurement { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla :: sensor :: data :: GnssMeasurement) { unsafe { cxxbridge :: GnssMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } # [allow (unused_imports)] use self :: super :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: root ; } # [allow (unused_imports)] use self :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: root ; } pub mod traffic_manager { # [repr (u8)] # [derive (Clone , Hash , PartialEq , Eq)] pub enum RoadOption { Void = 0 , Left = 1 , Right = 2 , Straight = 3 , LaneFollow = 4 , ChangeLaneLeft = 5 , ChangeLaneRight = 6 , RoadEnd = 7 , } pub type Action = root :: std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete ; pub type ActionBuffer = cxx :: CxxVector < root :: carla :: traffic_manager :: Action > ; # [doc = " This class integrates all the various stages of\n the traffic manager appropriately using messengers."] # [repr (C , align (2))] pub struct TrafficManager { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 2] } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla :: traffic_manager :: TrafficManager { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla :: traffic_manager :: TrafficManager { cxxbridge :: TrafficManager_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla :: traffic_manager :: TrafficManager) { cxxbridge :: TrafficManager_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla :: traffic_manager :: TrafficManager { unsafe fn copy_new (other : & root :: carla :: traffic_manager :: TrafficManager , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: traffic_manager :: TrafficManager > >) { cxxbridge :: carla_traffic_manager_TrafficManager_new1_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla :: traffic_manager :: TrafficManager { unsafe fn move_new (mut arg1 : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla :: traffic_manager :: TrafficManager > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla :: traffic_manager :: TrafficManager > >) { cxxbridge :: carla_traffic_manager_TrafficManager_new3_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (arg1 . as_mut ()) ; r }) } } pub mod constants { pub mod Collision { pub const BOUNDARY_EXTENSION_MINIMUM : f32 = 2.5 ; pub const BOUNDARY_EXTENSION_RATE : f32 = 4.349999904632568 ; pub const COS_10_DEGREES : f32 = 0.9847999811172485 ; pub const OVERLAP_THRESHOLD : f32 = 0.10000000149011612 ; pub const LOCKING_DISTANCE_PADDING : f32 = 4.0 ; pub const COLLISION_RADIUS_STOP : f32 = 8.0 ; pub const COLLISION_RADIUS_MIN : f32 = 20.0 ; pub const COLLISION_RADIUS_RATE : f32 = 2.6500000953674316 ; pub const MAX_LOCKING_EXTENSION : f32 = 10.0 ; pub const WALKER_TIME_EXTENSION : f32 = 1.5 ; pub const SQUARE_ROOT_OF_TWO : f32 = 1.4140000343322754 ; pub const VERTICAL_OVERLAP_THRESHOLD : f32 = 4.0 ; pub const EPSILON : f32 = 0.0000002384185791015625 ; pub const MIN_REFERENCE_DISTANCE : f32 = 0.5 ; pub const MIN_VELOCITY_COLL_RADIUS : f32 = 2.0 ; pub const VEL_EXT_FACTOR : f32 = 0.36000001430511475 ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: super :: root ; } pub mod FrameMemory { pub const INITIAL_SIZE : u64 = 50 ; pub const GROWTH_STEP_SIZE : u64 = 50 ; pub const INV_GROWTH_STEP_SIZE : f32 = 0.019999999552965164 ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: super :: root ; } pub mod HybridMode { pub const HYBRID_MODE_DT_FL : f32 = 0.05000000074505806 ; pub const HYBRID_MODE_DT : f64 = 0.05 ; pub const INV_HYBRID_DT : f64 = 20.0 ; pub const PHYSICS_RADIUS : f32 = 50.0 ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: super :: root ; } pub mod LaneChange { pub const MINIMUM_LANE_CHANGE_DISTANCE : f32 = 20.0 ; pub const MAXIMUM_LANE_OBSTACLE_DISTANCE : f32 = 50.0 ; pub const MAXIMUM_LANE_OBSTACLE_CURVATURE : f32 = 0.6000000238418579 ; pub const INTER_LANE_CHANGE_DISTANCE : f32 = 10.0 ; pub const MIN_WPT_DISTANCE : f32 = 5.0 ; pub const MAX_WPT_DISTANCE : f32 = 20.0 ; pub const MIN_LANE_CHANGE_SPEED : f32 = 5.0 ; pub const FIFTYPERC : f32 = 50.0 ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: super :: root ; } pub mod Map { pub const INFINITE_DISTANCE : f32 = 340282346638528860000000000000000000000.0 ; pub const MAX_GEODESIC_GRID_LENGTH : f32 = 20.0 ; pub const MAP_RESOLUTION : f32 = 5.0 ; pub const INV_MAP_RESOLUTION : f32 = 0.20000000298023224 ; pub const MAX_WPT_DISTANCE : f64 = 27.5 ; pub const MAX_WPT_RADIANS : f32 = 0.08699999749660492 ; pub const DELTA : f32 = 25.0 ; pub const Z_DELTA : f32 = 500.0 ; pub const STRAIGHT_DEG : f32 = 19.0 ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: super :: root ; } pub mod MotionPlan { pub const RELATIVE_APPROACH_SPEED : f32 = 3.3333334922790527 ; pub const MIN_FOLLOW_LEAD_DISTANCE : f32 = 2.0 ; pub const CRITICAL_BRAKING_MARGIN : f32 = 0.20000000298023224 ; pub const EPSILON_RELATIVE_SPEED : f32 = 0.0010000000474974513 ; pub const MAX_JUNCTION_BLOCK_DISTANCE : f32 = 4.0 ; pub const TWO_KM : f32 = 2000.0 ; pub const ATTEMPTS_TO_TELEPORT : u16 = 5 ; pub const LANDMARK_DETECTION_TIME : f32 = 3.5 ; pub const TL_TARGET_VELOCITY : f32 = 4.1666669845581055 ; pub const STOP_TARGET_VELOCITY : f32 = 2.777777910232544 ; pub const YIELD_TARGET_VELOCITY : f32 = 2.777777910232544 ; pub const FRICTION : f32 = 0.6000000238418579 ; pub const GRAVITY : f32 = 9.8100004196167 ; pub const PI : f32 = 3.1415927410125732 ; pub const PERC_MAX_SLOWDOWN : f32 = 0.07999999821186066 ; pub const FOLLOW_LEAD_FACTOR : f32 = 2.0 ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: super :: root ; } pub mod Networking { pub const MIN_TRY_COUNT : u64 = 20 ; pub const TM_DEFAULT_PORT : :: std :: os :: raw :: c_ushort = 8000 ; pub const TM_TIMEOUT : i64 = 2000 ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: super :: root ; } pub mod PID { pub const MAX_THROTTLE : f32 = 0.8500000238418579 ; pub const MAX_BRAKE : f32 = 0.699999988079071 ; pub const MAX_STEERING : f32 = 0.800000011920929 ; pub const MAX_STEERING_DIFF : f32 = 0.15000000596046448 ; pub const DT : f32 = 0.05000000074505806 ; pub const INV_DT : f32 = 20.0 ; # [doc = "autocxx bindings couldn't be generated: Encountered mutable static data, not yet supported: LONGITUDIAL_PARAM"] pub struct LONGITUDIAL_PARAM ; # [doc = "autocxx bindings couldn't be generated: Encountered mutable static data, not yet supported: LONGITUDIAL_HIGHWAY_PARAM"] pub struct LONGITUDIAL_HIGHWAY_PARAM ; # [doc = "autocxx bindings couldn't be generated: Encountered mutable static data, not yet supported: LATERAL_PARAM"] pub struct LATERAL_PARAM ; # [doc = "autocxx bindings couldn't be generated: Encountered mutable static data, not yet supported: LATERAL_HIGHWAY_PARAM"] pub struct LATERAL_HIGHWAY_PARAM ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: super :: root ; } pub mod PathBufferUpdate { pub const MAX_START_DISTANCE : f32 = 20.0 ; pub const MINIMUM_HORIZON_LENGTH : f32 = 15.0 ; pub const HORIZON_RATE : f32 = 2.0 ; pub const HIGH_SPEED_HORIZON_RATE : f32 = 4.0 ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: super :: root ; } pub mod SpeedThreshold { pub const HIGHWAY_SPEED : f32 = 16.666667938232422 ; pub const AFTER_JUNCTION_MIN_SPEED : f32 = 1.388888955116272 ; pub const INITIAL_PERCENTAGE_SPEED_DIFFERENCE : f32 = 0.0 ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: super :: root ; } pub mod TrackTraffic { pub const BUFFER_STEP_THROUGH : u64 = 5 ; pub const INV_BUFFER_STEP_THROUGH : f32 = 0.20000000298023224 ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: super :: root ; } pub mod TrafficLight { pub const MINIMUM_STOP_TIME : f64 = 2.0 ; pub const EXIT_JUNCTION_THRESHOLD : f64 = 0.0 ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: super :: root ; } pub mod VehicleLight { pub const SUN_ALTITUDE_DEGREES_BEFORE_DAWN : f32 = 15.0 ; pub const SUN_ALTITUDE_DEGREES_AFTER_SUNSET : f32 = 165.0 ; pub const SUN_ALTITUDE_DEGREES_JUST_AFTER_DAWN : f32 = 35.0 ; pub const SUN_ALTITUDE_DEGREES_JUST_BEFORE_SUNSET : f32 = 145.0 ; pub const HEAVY_PRECIPITATION_THRESHOLD : f32 = 80.0 ; pub const FOG_DENSITY_THRESHOLD : f32 = 20.0 ; pub const MAX_DISTANCE_LIGHT_CHECK : f32 = 225.0 ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: super :: root ; } pub mod VehicleRemoval { pub const STOPPED_VELOCITY_THRESHOLD : f32 = 0.800000011920929 ; pub const BLOCKED_TIME_THRESHOLD : f64 = 90.0 ; pub const RED_TL_BLOCKED_TIME_THRESHOLD : f64 = 180.0 ; pub const DELTA_TIME_BETWEEN_DESTRUCTIONS : f64 = 10.0 ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: super :: root ; } pub mod WaypointSelection { pub const TARGET_WAYPOINT_TIME_HORIZON : f32 = 0.30000001192092896 ; pub const MIN_TARGET_WAYPOINT_DISTANCE : f32 = 3.0 ; pub const JUNCTION_LOOK_AHEAD : f32 = 5.0 ; pub const SAFE_DISTANCE_AFTER_JUNCTION : f32 = 4.0 ; pub const MIN_JUNCTION_LENGTH : f32 = 8.0 ; pub const MIN_SAFE_INTERVAL_LENGTH : f32 = 2.0 ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: super :: root ; } # [allow (unused_imports)] use self :: super :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: root ; } # [allow (unused_imports)] use self :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: root ; } # [allow (unused_imports)] use self :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: root ; } pub mod carla_rust { pub mod client { # [repr (C , align (8))] pub struct FfiActorAttributeValue { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 80] } # [repr (C , align (8))] pub struct FfiActorAttributeValueList { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 8] } # [repr (C , align (8))] pub struct FfiActor { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } # [repr (C , align (8))] pub struct ListenCallback { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 24] } # [repr (C , align (8))] pub struct FfiWaypointList { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 24] } # [repr (C , align (8))] pub struct FfiWaypointPair { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 32] } # [repr (C , align (8))] pub struct FfiJunction { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } # [repr (C , align (8))] pub struct FfiLandmarkList { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 24] } # [repr (C , align (8))] pub struct FfiWaypoint { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } # [repr (C , align (8))] pub struct FfiLandmark { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } # [repr (C , align (8))] pub struct FfiTransformList { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 24] } # [repr (C , align (8))] pub struct FfiMap { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } # [repr (C , align (8))] pub struct FfiTrafficSign { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } # [repr (C , align (8))] pub struct FfiVehicle { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } # [repr (C , align (8))] pub struct FfiSensor { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } # [repr (C , align (8))] pub struct FfiBlueprintLibrary { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } # [repr (C , align (8))] pub struct FfiActorList { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } # [repr (C , align (8))] pub struct FfiBoundingBoxList { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 24] } # [repr (C , align (8))] pub struct FfiLabelledPointList { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 24] } # [repr (C , align (8))] pub struct FfiEnvironmentObjectList { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 24] } # [repr (C , align (8))] pub struct FfiActorVec { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 24] } # [repr (C , align (8))] pub struct FfiWorldSnapshot { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } # [repr (C)] pub struct FfiClientLightState { pub intensity : f32 , pub color : root :: carla_rust :: sensor :: data :: FfiColor , pub group : root :: carla_rust :: rpc :: FfiRpcLightGroup , pub active : bool , } # [doc = "autocxx bindings couldn't be generated: This item name is used in multiple namespaces. At present, autocxx and cxx allow only one type of a given name. This limitation will be fixed in future. (Items found with this name: carla::rpc::LightId, carla::client::LightId, carla_rust::client::LightId)"] pub struct LightId ; # [repr (C , align (8))] pub struct FfiLightRef { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 8] } # [repr (C , align (8))] pub struct FfiLightList { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 24] } # [repr (C , align (8))] pub struct FfiLightManager { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } # [doc = "autocxx bindings couldn't be generated: This item relies on a type not known to autocxx (super::super::root::carla::rpc::LightState_LightGroup)"] pub struct FfiLightManager_LightGroup ; # [repr (C , align (8))] pub struct FfiWorld { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 24] } # [repr (C , align (8))] pub struct FfiClient { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } # [repr (C , align (8))] pub struct FfiTrafficLightList { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 24] } # [repr (C , align (8))] pub struct FfiTrafficLight { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } pub fn copy_actor_blueprint < 'a > (ref_ : & 'a root :: carla :: client :: ActorBlueprint) -> impl autocxx :: moveit :: new :: New < Output = root :: carla :: client :: ActorBlueprint > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: copy_actor_blueprint_autocxx_wrapper_0xd539d5a17acbdd25 (ref_ , placement_return_type) }) } } impl FfiActorAttributeValue { pub fn GetId (self : & root :: carla_rust :: client :: FfiActorAttributeValue) -> & cxx :: CxxString { cxxbridge :: carla_rust_client_FfiActorAttributeValue_GetId_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetType (self : & root :: carla_rust :: client :: FfiActorAttributeValue) -> root :: carla :: rpc :: ActorAttributeType { cxxbridge :: carla_rust_client_FfiActorAttributeValue_GetType_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetValue (self : & root :: carla_rust :: client :: FfiActorAttributeValue) -> & cxx :: CxxString { cxxbridge :: carla_rust_client_FfiActorAttributeValue_GetValue_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn to_string (self : & root :: carla_rust :: client :: FfiActorAttributeValue) -> cxx :: UniquePtr < cxx :: CxxString > { cxxbridge :: to_string_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } impl FfiActorAttributeValueList { pub fn len (self : & root :: carla_rust :: client :: FfiActorAttributeValueList) -> usize { cxxbridge :: carla_rust_client_FfiActorAttributeValueList_len_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn data (self : & root :: carla_rust :: client :: FfiActorAttributeValueList) -> * const root :: carla_rust :: client :: FfiActorAttributeValue { cxxbridge :: carla_rust_client_FfiActorAttributeValueList_data_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::client::ActorAttributeValue"] fn carla_rust_client_FfiActorAttributeValueList_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } } impl FfiActor { # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn inner (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn GetLocation (self : & root :: carla_rust :: client :: FfiActor) -> root :: carla_rust :: geom :: FfiLocation { cxxbridge :: carla_rust_client_FfiActor_GetLocation_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetTransform (self : & root :: carla_rust :: client :: FfiActor) -> root :: carla_rust :: geom :: FfiTransform { cxxbridge :: carla_rust_client_FfiActor_GetTransform_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetId (self : & root :: carla_rust :: client :: FfiActor) -> u32 { cxxbridge :: carla_rust_client_FfiActor_GetId_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetTypeId (self : & root :: carla_rust :: client :: FfiActor) -> & cxx :: CxxString { cxxbridge :: carla_rust_client_FfiActor_GetTypeId_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetDisplayId (self : & root :: carla_rust :: client :: FfiActor) -> & cxx :: CxxString { cxxbridge :: carla_rust_client_FfiActor_GetDisplayId_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetParentId (self : & root :: carla_rust :: client :: FfiActor) -> u32 { cxxbridge :: carla_rust_client_FfiActor_GetParentId_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetSemanticTags (self : & root :: carla_rust :: client :: FfiActor) -> & cxx :: CxxVector < u8 > { cxxbridge :: carla_rust_client_FfiActor_GetSemanticTags_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetParent (self : & root :: carla_rust :: client :: FfiActor) -> cxx :: SharedPtr < root :: carla_rust :: client :: FfiActor > { cxxbridge :: carla_rust_client_FfiActor_GetParent_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetWorld (self : & root :: carla_rust :: client :: FfiActor) -> cxx :: UniquePtr < root :: carla_rust :: client :: FfiWorld > { cxxbridge :: carla_rust_client_FfiActor_GetWorld_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetAttributes < 'a > (self : & 'a root :: carla_rust :: client :: FfiActor) -> impl autocxx :: moveit :: new :: New < Output = root :: carla_rust :: client :: FfiActorAttributeValueList > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiActor_GetAttributes_autocxx_wrapper_0xd539d5a17acbdd25 (self , placement_return_type) }) } } pub fn GetVelocity (self : & root :: carla_rust :: client :: FfiActor) -> root :: carla :: geom :: Vector3D { cxxbridge :: carla_rust_client_FfiActor_GetVelocity_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetAngularVelocity (self : & root :: carla_rust :: client :: FfiActor) -> root :: carla :: geom :: Vector3D { cxxbridge :: carla_rust_client_FfiActor_GetAngularVelocity_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetAcceleration (self : & root :: carla_rust :: client :: FfiActor) -> root :: carla :: geom :: Vector3D { cxxbridge :: carla_rust_client_FfiActor_GetAcceleration_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn SetLocation (self : & root :: carla_rust :: client :: FfiActor , location : & root :: carla_rust :: geom :: FfiLocation) { cxxbridge :: carla_rust_client_FfiActor_SetLocation_autocxx_wrapper_0xd539d5a17acbdd25 (self , location) } pub fn SetTransform (self : & root :: carla_rust :: client :: FfiActor , transform : & root :: carla_rust :: geom :: FfiTransform) { cxxbridge :: carla_rust_client_FfiActor_SetTransform_autocxx_wrapper_0xd539d5a17acbdd25 (self , transform) } pub fn SetTargetVelocity (self : & root :: carla_rust :: client :: FfiActor , vector : & root :: carla :: geom :: Vector3D) { cxxbridge :: carla_rust_client_FfiActor_SetTargetVelocity_autocxx_wrapper_0xd539d5a17acbdd25 (self , vector) } pub fn SetTargetAngularVelocity (self : & root :: carla_rust :: client :: FfiActor , vector : & root :: carla :: geom :: Vector3D) { cxxbridge :: carla_rust_client_FfiActor_SetTargetAngularVelocity_autocxx_wrapper_0xd539d5a17acbdd25 (self , vector) } pub fn EnableConstantVelocity (self : & root :: carla_rust :: client :: FfiActor , vector : & root :: carla :: geom :: Vector3D) { cxxbridge :: carla_rust_client_FfiActor_EnableConstantVelocity_autocxx_wrapper_0xd539d5a17acbdd25 (self , vector) } pub fn DisableConstantVelocity (self : & root :: carla_rust :: client :: FfiActor) { cxxbridge :: carla_rust_client_FfiActor_DisableConstantVelocity_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn AddImpulse1 (self : & root :: carla_rust :: client :: FfiActor , vector : & root :: carla :: geom :: Vector3D) { cxxbridge :: carla_rust_client_FfiActor_AddImpulse1_autocxx_wrapper_0xd539d5a17acbdd25 (self , vector) } pub fn AddForce1 (self : & root :: carla_rust :: client :: FfiActor , force : & root :: carla :: geom :: Vector3D) { cxxbridge :: carla_rust_client_FfiActor_AddForce1_autocxx_wrapper_0xd539d5a17acbdd25 (self , force) } pub fn AddAngularImpulse (self : & root :: carla_rust :: client :: FfiActor , vector : & root :: carla :: geom :: Vector3D) { cxxbridge :: carla_rust_client_FfiActor_AddAngularImpulse_autocxx_wrapper_0xd539d5a17acbdd25 (self , vector) } pub fn AddTorque (self : & root :: carla_rust :: client :: FfiActor , vector : & root :: carla :: geom :: Vector3D) { cxxbridge :: carla_rust_client_FfiActor_AddTorque_autocxx_wrapper_0xd539d5a17acbdd25 (self , vector) } pub fn SetSimulatePhysics (self : & root :: carla_rust :: client :: FfiActor , enabled : bool) { cxxbridge :: carla_rust_client_FfiActor_SetSimulatePhysics_autocxx_wrapper_0xd539d5a17acbdd25 (self , enabled) } pub fn SetEnableGravity (self : & root :: carla_rust :: client :: FfiActor , enabled : bool) { cxxbridge :: carla_rust_client_FfiActor_SetEnableGravity_autocxx_wrapper_0xd539d5a17acbdd25 (self , enabled) } pub fn IsAlive (self : & root :: carla_rust :: client :: FfiActor) -> bool { cxxbridge :: carla_rust_client_FfiActor_IsAlive_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn IsDormant (self : & root :: carla_rust :: client :: FfiActor) -> bool { cxxbridge :: carla_rust_client_FfiActor_IsDormant_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn IsActive (self : & root :: carla_rust :: client :: FfiActor) -> bool { cxxbridge :: carla_rust_client_FfiActor_IsActive_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn as_builtin (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } } impl ListenCallback { # [doc = "autocxx bindings couldn't be generated: autocxx does not know how to generate bindings to operator="] fn operator_equals (_uhoh : autocxx :: BindingGenerationFailure) { } pub unsafe fn new (caller : * mut autocxx :: c_void , fn_ : * mut autocxx :: c_void , delete_fn : * mut autocxx :: c_void) -> impl autocxx :: moveit :: new :: New < Output = Self > { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_ListenCallback_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this , caller , fn_ , delete_fn) }) } } impl FfiWaypointList { pub fn len (self : & root :: carla_rust :: client :: FfiWaypointList) -> usize { cxxbridge :: carla_rust_client_FfiWaypointList_len_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn get (self : & root :: carla_rust :: client :: FfiWaypointList , index : usize) -> cxx :: SharedPtr < root :: carla_rust :: client :: FfiWaypoint > { cxxbridge :: carla_rust_client_FfiWaypointList_get_autocxx_wrapper_0xd539d5a17acbdd25 (self , index) } # [doc = "autocxx bindings couldn't be generated: Problem handling function argument vec: Pointer pointed to an array, which is not yet supported"] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } } impl FfiWaypointPair { # [doc = "autocxx bindings couldn't be generated: Problem handling function argument pair: Pointer pointed to an array, which is not yet supported"] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } } impl FfiJunction { pub fn GetId (self : & root :: carla_rust :: client :: FfiJunction) -> i32 { cxxbridge :: carla_rust_client_FfiJunction_GetId_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetWaypoints (self : & root :: carla_rust :: client :: FfiJunction , type_ : root :: carla :: road :: Lane_LaneType) -> cxx :: UniquePtr < cxx :: CxxVector < root :: carla_rust :: client :: FfiWaypointPair > > { cxxbridge :: carla_rust_client_FfiJunction_GetWaypoints_autocxx_wrapper_0xd539d5a17acbdd25 (self , type_) } pub fn GetBoundingBox (self : & root :: carla_rust :: client :: FfiJunction) -> root :: carla_rust :: geom :: FfiBoundingBox { cxxbridge :: carla_rust_client_FfiJunction_GetBoundingBox_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } } impl FfiLandmarkList { pub fn len (self : & root :: carla_rust :: client :: FfiLandmarkList) -> usize { cxxbridge :: carla_rust_client_FfiLandmarkList_len_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn get (self : & root :: carla_rust :: client :: FfiLandmarkList , index : usize) -> cxx :: SharedPtr < root :: carla_rust :: client :: FfiLandmark > { cxxbridge :: carla_rust_client_FfiLandmarkList_get_autocxx_wrapper_0xd539d5a17acbdd25 (self , index) } # [doc = "autocxx bindings couldn't be generated: Problem handling function argument vec: Pointer pointed to an array, which is not yet supported"] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } } impl FfiWaypoint { pub fn GetId (self : & root :: carla_rust :: client :: FfiWaypoint) -> u64 { cxxbridge :: carla_rust_client_FfiWaypoint_GetId_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetRoadId (self : & root :: carla_rust :: client :: FfiWaypoint) -> u32 { cxxbridge :: carla_rust_client_FfiWaypoint_GetRoadId_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetSectionId (self : & root :: carla_rust :: client :: FfiWaypoint) -> u32 { cxxbridge :: carla_rust_client_FfiWaypoint_GetSectionId_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetLaneId (self : & root :: carla_rust :: client :: FfiWaypoint) -> i32 { cxxbridge :: carla_rust_client_FfiWaypoint_GetLaneId_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetDistance (self : & root :: carla_rust :: client :: FfiWaypoint) -> f64 { cxxbridge :: carla_rust_client_FfiWaypoint_GetDistance_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetTransform (self : & root :: carla_rust :: client :: FfiWaypoint) -> root :: carla_rust :: geom :: FfiTransform { cxxbridge :: carla_rust_client_FfiWaypoint_GetTransform_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetJunctionId (self : & root :: carla_rust :: client :: FfiWaypoint) -> i32 { cxxbridge :: carla_rust_client_FfiWaypoint_GetJunctionId_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn IsJunction (self : & root :: carla_rust :: client :: FfiWaypoint) -> bool { cxxbridge :: carla_rust_client_FfiWaypoint_IsJunction_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetJunction (self : & root :: carla_rust :: client :: FfiWaypoint) -> cxx :: SharedPtr < root :: carla_rust :: client :: FfiJunction > { cxxbridge :: carla_rust_client_FfiWaypoint_GetJunction_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetLaneWidth (self : & root :: carla_rust :: client :: FfiWaypoint) -> f64 { cxxbridge :: carla_rust_client_FfiWaypoint_GetLaneWidth_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetType (self : & root :: carla_rust :: client :: FfiWaypoint) -> root :: carla :: road :: Lane_LaneType { cxxbridge :: carla_rust_client_FfiWaypoint_GetType_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetNext < 'a > (self : & 'a root :: carla_rust :: client :: FfiWaypoint , distance : f64) -> impl autocxx :: moveit :: new :: New < Output = root :: carla_rust :: client :: FfiWaypointList > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiWaypoint_GetNext_autocxx_wrapper_0xd539d5a17acbdd25 (self , distance , placement_return_type) }) } } pub fn GetPrevious < 'a > (self : & 'a root :: carla_rust :: client :: FfiWaypoint , distance : f64) -> impl autocxx :: moveit :: new :: New < Output = root :: carla_rust :: client :: FfiWaypointList > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiWaypoint_GetPrevious_autocxx_wrapper_0xd539d5a17acbdd25 (self , distance , placement_return_type) }) } } pub fn GetNextUntilLaneEnd < 'a > (self : & 'a root :: carla_rust :: client :: FfiWaypoint , distance : f64) -> impl autocxx :: moveit :: new :: New < Output = root :: carla_rust :: client :: FfiWaypointList > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiWaypoint_GetNextUntilLaneEnd_autocxx_wrapper_0xd539d5a17acbdd25 (self , distance , placement_return_type) }) } } pub fn GetPreviousUntilLaneStart < 'a > (self : & 'a root :: carla_rust :: client :: FfiWaypoint , distance : f64) -> impl autocxx :: moveit :: new :: New < Output = root :: carla_rust :: client :: FfiWaypointList > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiWaypoint_GetPreviousUntilLaneStart_autocxx_wrapper_0xd539d5a17acbdd25 (self , distance , placement_return_type) }) } } pub fn GetRight (self : & root :: carla_rust :: client :: FfiWaypoint) -> cxx :: SharedPtr < root :: carla_rust :: client :: FfiWaypoint > { cxxbridge :: carla_rust_client_FfiWaypoint_GetRight_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetLeft (self : & root :: carla_rust :: client :: FfiWaypoint) -> cxx :: SharedPtr < root :: carla_rust :: client :: FfiWaypoint > { cxxbridge :: carla_rust_client_FfiWaypoint_GetLeft_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetRightLaneMarking (self : & root :: carla_rust :: client :: FfiWaypoint) -> cxx :: UniquePtr < root :: carla_rust :: road :: element :: FfiLaneMarking > { cxxbridge :: carla_rust_client_FfiWaypoint_GetRightLaneMarking_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetLeftLaneMarking (self : & root :: carla_rust :: client :: FfiWaypoint) -> cxx :: UniquePtr < root :: carla_rust :: road :: element :: FfiLaneMarking > { cxxbridge :: carla_rust_client_FfiWaypoint_GetLeftLaneMarking_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetLaneChange (self : & root :: carla_rust :: client :: FfiWaypoint) -> root :: carla :: road :: element :: LaneMarking_LaneChange { cxxbridge :: carla_rust_client_FfiWaypoint_GetLaneChange_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetAllLandmarksInDistance < 'a > (self : & 'a root :: carla_rust :: client :: FfiWaypoint , distance : f64 , stop_at_junction : bool) -> impl autocxx :: moveit :: new :: New < Output = root :: carla_rust :: client :: FfiLandmarkList > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiWaypoint_GetAllLandmarksInDistance_autocxx_wrapper_0xd539d5a17acbdd25 (self , distance , stop_at_junction , placement_return_type) }) } } pub fn GetLandmarksOfTypeInDistance < 'a > (self : & 'a root :: carla_rust :: client :: FfiWaypoint , distance : f64 , filter_type : impl ToCppString + 'a , stop_at_junction : bool) -> impl autocxx :: moveit :: new :: New < Output = root :: carla_rust :: client :: FfiLandmarkList > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiWaypoint_GetLandmarksOfTypeInDistance_autocxx_wrapper_0xd539d5a17acbdd25 (self , distance , filter_type . into_cpp () , stop_at_junction , placement_return_type) }) } } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn inner (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn new1 (_uhoh : autocxx :: BindingGenerationFailure) { } } impl FfiLandmark { pub fn GetWaypoint (self : & root :: carla_rust :: client :: FfiLandmark) -> cxx :: SharedPtr < root :: carla_rust :: client :: FfiWaypoint > { cxxbridge :: carla_rust_client_FfiLandmark_GetWaypoint_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetTransform (self : & root :: carla_rust :: client :: FfiLandmark) -> & root :: carla_rust :: geom :: FfiTransform { cxxbridge :: carla_rust_client_FfiLandmark_GetTransform_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetRoadId (self : & root :: carla_rust :: client :: FfiLandmark) -> u32 { cxxbridge :: carla_rust_client_FfiLandmark_GetRoadId_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetDistance (self : & root :: carla_rust :: client :: FfiLandmark) -> f64 { cxxbridge :: carla_rust_client_FfiLandmark_GetDistance_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetS (self : & root :: carla_rust :: client :: FfiLandmark) -> f64 { cxxbridge :: carla_rust_client_FfiLandmark_GetS_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetT (self : & root :: carla_rust :: client :: FfiLandmark) -> f64 { cxxbridge :: carla_rust_client_FfiLandmark_GetT_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetId (self : & root :: carla_rust :: client :: FfiLandmark) -> cxx :: UniquePtr < cxx :: CxxString > { cxxbridge :: carla_rust_client_FfiLandmark_GetId_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetName (self : & root :: carla_rust :: client :: FfiLandmark) -> cxx :: UniquePtr < cxx :: CxxString > { cxxbridge :: carla_rust_client_FfiLandmark_GetName_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn IsDynamic (self : & root :: carla_rust :: client :: FfiLandmark) -> bool { cxxbridge :: carla_rust_client_FfiLandmark_IsDynamic_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetOrientation (self : & root :: carla_rust :: client :: FfiLandmark) -> root :: carla :: road :: SignalOrientation { cxxbridge :: carla_rust_client_FfiLandmark_GetOrientation_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetZOffset (self : & root :: carla_rust :: client :: FfiLandmark) -> f64 { cxxbridge :: carla_rust_client_FfiLandmark_GetZOffset_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetCountry (self : & root :: carla_rust :: client :: FfiLandmark) -> cxx :: UniquePtr < cxx :: CxxString > { cxxbridge :: carla_rust_client_FfiLandmark_GetCountry_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetType (self : & root :: carla_rust :: client :: FfiLandmark) -> cxx :: UniquePtr < cxx :: CxxString > { cxxbridge :: carla_rust_client_FfiLandmark_GetType_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetSubType (self : & root :: carla_rust :: client :: FfiLandmark) -> cxx :: UniquePtr < cxx :: CxxString > { cxxbridge :: carla_rust_client_FfiLandmark_GetSubType_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetValue (self : & root :: carla_rust :: client :: FfiLandmark) -> f64 { cxxbridge :: carla_rust_client_FfiLandmark_GetValue_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetUnit (self : & root :: carla_rust :: client :: FfiLandmark) -> cxx :: UniquePtr < cxx :: CxxString > { cxxbridge :: carla_rust_client_FfiLandmark_GetUnit_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetHeight (self : & root :: carla_rust :: client :: FfiLandmark) -> f64 { cxxbridge :: carla_rust_client_FfiLandmark_GetHeight_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetWidth (self : & root :: carla_rust :: client :: FfiLandmark) -> f64 { cxxbridge :: carla_rust_client_FfiLandmark_GetWidth_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetText (self : & root :: carla_rust :: client :: FfiLandmark) -> cxx :: UniquePtr < cxx :: CxxString > { cxxbridge :: carla_rust_client_FfiLandmark_GetText_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GethOffset (self : & root :: carla_rust :: client :: FfiLandmark) -> f64 { cxxbridge :: carla_rust_client_FfiLandmark_GethOffset_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetPitch (self : & root :: carla_rust :: client :: FfiLandmark) -> f64 { cxxbridge :: carla_rust_client_FfiLandmark_GetPitch_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetRoll (self : & root :: carla_rust :: client :: FfiLandmark) -> f64 { cxxbridge :: carla_rust_client_FfiLandmark_GetRoll_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn inner (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } } impl FfiTransformList { pub fn len (self : & root :: carla_rust :: client :: FfiTransformList) -> usize { cxxbridge :: carla_rust_client_FfiTransformList_len_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn data (self : & root :: carla_rust :: client :: FfiTransformList) -> * const root :: carla_rust :: geom :: FfiTransform { cxxbridge :: carla_rust_client_FfiTransformList_data_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::geom::Transform"] fn carla_rust_client_FfiTransformList_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } } impl FfiMap { pub fn GetName (self : & root :: carla_rust :: client :: FfiMap) -> & cxx :: CxxString { cxxbridge :: carla_rust_client_FfiMap_GetName_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetOpenDrive (self : & root :: carla_rust :: client :: FfiMap) -> & cxx :: CxxString { cxxbridge :: carla_rust_client_FfiMap_GetOpenDrive_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetRecommendedSpawnPoints < 'a > (self : & 'a root :: carla_rust :: client :: FfiMap) -> impl autocxx :: moveit :: new :: New < Output = root :: carla_rust :: client :: FfiTransformList > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiMap_GetRecommendedSpawnPoints_autocxx_wrapper_0xd539d5a17acbdd25 (self , placement_return_type) }) } } pub fn GetWaypoint (self : & root :: carla_rust :: client :: FfiMap , location : & root :: carla_rust :: geom :: FfiLocation , project_to_road : bool , lane_type : i32) -> cxx :: SharedPtr < root :: carla_rust :: client :: FfiWaypoint > { cxxbridge :: carla_rust_client_FfiMap_GetWaypoint_autocxx_wrapper_0xd539d5a17acbdd25 (self , location , project_to_road , lane_type) } pub fn GetWaypointXODR (self : & root :: carla_rust :: client :: FfiMap , road_id : u32 , lane_id : i32 , s : f32) -> cxx :: SharedPtr < root :: carla_rust :: client :: FfiWaypoint > { cxxbridge :: carla_rust_client_FfiMap_GetWaypointXODR_autocxx_wrapper_0xd539d5a17acbdd25 (self , road_id , lane_id , s) } pub fn GenerateWaypoints (self : & root :: carla_rust :: client :: FfiMap , distance : f64) -> cxx :: UniquePtr < root :: carla_rust :: client :: FfiWaypointList > { cxxbridge :: carla_rust_client_FfiMap_GenerateWaypoints_autocxx_wrapper_0xd539d5a17acbdd25 (self , distance) } pub fn GetJunction (self : & root :: carla_rust :: client :: FfiMap , waypoint : & root :: carla_rust :: client :: FfiWaypoint) -> cxx :: SharedPtr < root :: carla_rust :: client :: FfiJunction > { cxxbridge :: carla_rust_client_FfiMap_GetJunction_autocxx_wrapper_0xd539d5a17acbdd25 (self , waypoint) } pub fn GetAllLandmarks < 'a > (self : & 'a root :: carla_rust :: client :: FfiMap) -> impl autocxx :: moveit :: new :: New < Output = root :: carla_rust :: client :: FfiLandmarkList > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiMap_GetAllLandmarks_autocxx_wrapper_0xd539d5a17acbdd25 (self , placement_return_type) }) } } pub fn GetLandmarksFromId < 'a > (self : & 'a root :: carla_rust :: client :: FfiMap , id : impl ToCppString + 'a) -> impl autocxx :: moveit :: new :: New < Output = root :: carla_rust :: client :: FfiLandmarkList > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiMap_GetLandmarksFromId_autocxx_wrapper_0xd539d5a17acbdd25 (self , id . into_cpp () , placement_return_type) }) } } pub fn GetAllLandmarksOfType < 'a > (self : & 'a root :: carla_rust :: client :: FfiMap , type_ : impl ToCppString + 'a) -> impl autocxx :: moveit :: new :: New < Output = root :: carla_rust :: client :: FfiLandmarkList > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiMap_GetAllLandmarksOfType_autocxx_wrapper_0xd539d5a17acbdd25 (self , type_ . into_cpp () , placement_return_type) }) } } pub fn GetLandmarkGroup < 'a > (self : & 'a root :: carla_rust :: client :: FfiMap , landmark : & 'a root :: carla_rust :: client :: FfiLandmark) -> impl autocxx :: moveit :: new :: New < Output = root :: carla_rust :: client :: FfiLandmarkList > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiMap_GetLandmarkGroup_autocxx_wrapper_0xd539d5a17acbdd25 (self , landmark , placement_return_type) }) } } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } } impl FfiTrafficSign { pub fn GetTriggerVolume (self : & root :: carla_rust :: client :: FfiTrafficSign) -> & root :: carla_rust :: geom :: FfiBoundingBox { cxxbridge :: carla_rust_client_FfiTrafficSign_GetTriggerVolume_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetSignId (self : & root :: carla_rust :: client :: FfiTrafficSign) -> cxx :: UniquePtr < cxx :: CxxString > { cxxbridge :: carla_rust_client_FfiTrafficSign_GetSignId_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } } impl FfiVehicle { pub fn SetAutopilot (self : & root :: carla_rust :: client :: FfiVehicle , enabled : bool , tm_port : u16) { cxxbridge :: carla_rust_client_FfiVehicle_SetAutopilot_autocxx_wrapper_0xd539d5a17acbdd25 (self , enabled , tm_port) } pub fn ShowDebugTelemetry (self : & root :: carla_rust :: client :: FfiVehicle , enabled : bool) { cxxbridge :: carla_rust_client_FfiVehicle_ShowDebugTelemetry_autocxx_wrapper_0xd539d5a17acbdd25 (self , enabled) } pub fn ApplyControl (self : & root :: carla_rust :: client :: FfiVehicle , control : & root :: carla :: rpc :: VehicleControl) { cxxbridge :: carla_rust_client_FfiVehicle_ApplyControl_autocxx_wrapper_0xd539d5a17acbdd25 (self , control) } pub fn ApplyAckermannControl (self : & root :: carla_rust :: client :: FfiVehicle , control : & root :: carla :: rpc :: VehicleAckermannControl) { cxxbridge :: carla_rust_client_FfiVehicle_ApplyAckermannControl_autocxx_wrapper_0xd539d5a17acbdd25 (self , control) } pub fn ApplyPhysicsControl (self : & root :: carla_rust :: client :: FfiVehicle , physics_control : & root :: carla_rust :: rpc :: FfiVehiclePhysicsControl) { cxxbridge :: carla_rust_client_FfiVehicle_ApplyPhysicsControl_autocxx_wrapper_0xd539d5a17acbdd25 (self , physics_control) } pub fn GetAckermannControllerSettings (self : & root :: carla_rust :: client :: FfiVehicle) -> root :: carla :: rpc :: AckermannControllerSettings { cxxbridge :: carla_rust_client_FfiVehicle_GetAckermannControllerSettings_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn ApplyAckermannControllerSettings (self : & root :: carla_rust :: client :: FfiVehicle , settings : & root :: carla :: rpc :: AckermannControllerSettings) { cxxbridge :: carla_rust_client_FfiVehicle_ApplyAckermannControllerSettings_autocxx_wrapper_0xd539d5a17acbdd25 (self , settings) } pub fn OpenDoor (self : & root :: carla_rust :: client :: FfiVehicle , door_idx : root :: carla :: rpc :: VehicleDoor) { cxxbridge :: carla_rust_client_FfiVehicle_OpenDoor_autocxx_wrapper_0xd539d5a17acbdd25 (self , door_idx) } pub fn CloseDoor (self : & root :: carla_rust :: client :: FfiVehicle , door_idx : root :: carla :: rpc :: VehicleDoor) { cxxbridge :: carla_rust_client_FfiVehicle_CloseDoor_autocxx_wrapper_0xd539d5a17acbdd25 (self , door_idx) } pub fn SetLightState (self : & root :: carla_rust :: client :: FfiVehicle , light_state : & root :: carla :: rpc :: VehicleLightState_LightState) { cxxbridge :: carla_rust_client_FfiVehicle_SetLightState_autocxx_wrapper_0xd539d5a17acbdd25 (self , light_state) } pub fn SetWheelSteerDirection (self : & root :: carla_rust :: client :: FfiVehicle , wheel_location : root :: carla :: rpc :: VehicleWheelLocation , angle_in_deg : f32) { cxxbridge :: carla_rust_client_FfiVehicle_SetWheelSteerDirection_autocxx_wrapper_0xd539d5a17acbdd25 (self , wheel_location , angle_in_deg) } pub fn GetWheelSteerAngle (self : & root :: carla_rust :: client :: FfiVehicle , wheel_location : root :: carla :: rpc :: VehicleWheelLocation) -> f32 { cxxbridge :: carla_rust_client_FfiVehicle_GetWheelSteerAngle_autocxx_wrapper_0xd539d5a17acbdd25 (self , wheel_location) } pub fn GetControl (self : & root :: carla_rust :: client :: FfiVehicle) -> root :: carla :: rpc :: VehicleControl { cxxbridge :: carla_rust_client_FfiVehicle_GetControl_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetPhysicsControl < 'a > (self : & 'a root :: carla_rust :: client :: FfiVehicle) -> impl autocxx :: moveit :: new :: New < Output = root :: carla_rust :: rpc :: FfiVehiclePhysicsControl > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiVehicle_GetPhysicsControl_autocxx_wrapper_0xd539d5a17acbdd25 (self , placement_return_type) }) } } pub fn GetLightState (self : & root :: carla_rust :: client :: FfiVehicle) -> root :: carla :: rpc :: VehicleLightState_LightState { cxxbridge :: carla_rust_client_FfiVehicle_GetLightState_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetSpeedLimit (self : & root :: carla_rust :: client :: FfiVehicle) -> f32 { cxxbridge :: carla_rust_client_FfiVehicle_GetSpeedLimit_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetTrafficLightState (self : & root :: carla_rust :: client :: FfiVehicle) -> root :: carla :: rpc :: TrafficLightState { cxxbridge :: carla_rust_client_FfiVehicle_GetTrafficLightState_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn IsAtTrafficLight (self : & root :: carla_rust :: client :: FfiVehicle) -> bool { cxxbridge :: carla_rust_client_FfiVehicle_IsAtTrafficLight_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn EnableCarSim (self : & root :: carla_rust :: client :: FfiVehicle , simfile_path : impl ToCppString) { cxxbridge :: carla_rust_client_FfiVehicle_EnableCarSim_autocxx_wrapper_0xd539d5a17acbdd25 (self , simfile_path . into_cpp ()) } pub fn UseCarSimRoad (self : & root :: carla_rust :: client :: FfiVehicle , enabled : bool) { cxxbridge :: carla_rust_client_FfiVehicle_UseCarSimRoad_autocxx_wrapper_0xd539d5a17acbdd25 (self , enabled) } pub fn EnableChronoPhysics (self : & root :: carla_rust :: client :: FfiVehicle , MaxSubsteps : u64 , MaxSubstepDeltaTime : f32 , VehicleJSON : impl ToCppString , PowertrainJSON : impl ToCppString , TireJSON : impl ToCppString , BaseJSONPath : impl ToCppString) { cxxbridge :: carla_rust_client_FfiVehicle_EnableChronoPhysics_autocxx_wrapper_0xd539d5a17acbdd25 (self , MaxSubsteps , MaxSubstepDeltaTime , VehicleJSON . into_cpp () , PowertrainJSON . into_cpp () , TireJSON . into_cpp () , BaseJSONPath . into_cpp ()) } pub fn to_actor (self : & root :: carla_rust :: client :: FfiVehicle) -> cxx :: SharedPtr < root :: carla_rust :: client :: FfiActor > { cxxbridge :: carla_rust_client_FfiVehicle_to_actor_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } } impl FfiSensor { pub unsafe fn Listen (self : & root :: carla_rust :: client :: FfiSensor , caller : * mut autocxx :: c_void , fn_ : * mut autocxx :: c_void , delete_fn : * mut autocxx :: c_void) { cxxbridge :: carla_rust_client_FfiSensor_Listen_autocxx_wrapper_0xd539d5a17acbdd25 (self , caller , fn_ , delete_fn) } pub fn Stop (self : & root :: carla_rust :: client :: FfiSensor) { cxxbridge :: carla_rust_client_FfiSensor_Stop_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn IsListening (self : & root :: carla_rust :: client :: FfiSensor) -> bool { cxxbridge :: carla_rust_client_FfiSensor_IsListening_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn to_actor (self : & root :: carla_rust :: client :: FfiSensor) -> cxx :: SharedPtr < root :: carla_rust :: client :: FfiActor > { cxxbridge :: carla_rust_client_FfiSensor_to_actor_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } } impl FfiBlueprintLibrary { pub fn at (self : & root :: carla_rust :: client :: FfiBlueprintLibrary , pos : usize) -> * const root :: carla :: client :: ActorBlueprint { cxxbridge :: carla_rust_client_FfiBlueprintLibrary_at_autocxx_wrapper_0xd539d5a17acbdd25 (self , pos) } pub fn size (self : & root :: carla_rust :: client :: FfiBlueprintLibrary) -> usize { cxxbridge :: carla_rust_client_FfiBlueprintLibrary_size_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } } impl FfiActorList { pub fn Find (self : & root :: carla_rust :: client :: FfiActorList , actor_id : u32) -> cxx :: SharedPtr < root :: carla_rust :: client :: FfiActor > { cxxbridge :: carla_rust_client_FfiActorList_Find_autocxx_wrapper_0xd539d5a17acbdd25 (self , actor_id) } pub fn Filter (self : & root :: carla_rust :: client :: FfiActorList , wildcard_pattern : & cxx :: CxxString) -> cxx :: SharedPtr < root :: carla_rust :: client :: FfiActorList > { cxxbridge :: carla_rust_client_FfiActorList_Filter_autocxx_wrapper_0xd539d5a17acbdd25 (self , wildcard_pattern) } pub fn at (self : & root :: carla_rust :: client :: FfiActorList , pos : usize) -> cxx :: SharedPtr < root :: carla_rust :: client :: FfiActor > { cxxbridge :: carla_rust_client_FfiActorList_at_autocxx_wrapper_0xd539d5a17acbdd25 (self , pos) } pub fn empty (self : & root :: carla_rust :: client :: FfiActorList) -> bool { cxxbridge :: carla_rust_client_FfiActorList_empty_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn size (self : & root :: carla_rust :: client :: FfiActorList) -> usize { cxxbridge :: carla_rust_client_FfiActorList_size_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } } impl FfiBoundingBoxList { pub fn len (self : & root :: carla_rust :: client :: FfiBoundingBoxList) -> usize { cxxbridge :: carla_rust_client_FfiBoundingBoxList_len_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn data (self : & root :: carla_rust :: client :: FfiBoundingBoxList) -> * const root :: carla_rust :: geom :: FfiBoundingBox { cxxbridge :: carla_rust_client_FfiBoundingBoxList_data_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn new (vec : impl autocxx :: RValueParam < cxx :: CxxVector < root :: carla :: geom :: BoundingBox > >) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let mut space0 = autocxx :: RValueParamHandler :: default () ; let mut space0 = :: core :: pin :: Pin :: new_unchecked (& mut space0) ; space0 . as_mut () . populate (vec) ; let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiBoundingBoxList_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this , space0 . get_ptr ()) }) } } } impl FfiLabelledPointList { pub fn len (self : & root :: carla_rust :: client :: FfiLabelledPointList) -> usize { cxxbridge :: carla_rust_client_FfiLabelledPointList_len_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn data (self : & root :: carla_rust :: client :: FfiLabelledPointList) -> * const root :: carla_rust :: rpc :: FfiLabelledPoint { cxxbridge :: carla_rust_client_FfiLabelledPointList_data_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn new (vec : impl autocxx :: RValueParam < cxx :: CxxVector < root :: carla :: rpc :: LabelledPoint > >) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let mut space0 = autocxx :: RValueParamHandler :: default () ; let mut space0 = :: core :: pin :: Pin :: new_unchecked (& mut space0) ; space0 . as_mut () . populate (vec) ; let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiLabelledPointList_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this , space0 . get_ptr ()) }) } } } impl FfiEnvironmentObjectList { pub fn len (self : & root :: carla_rust :: client :: FfiEnvironmentObjectList) -> usize { cxxbridge :: carla_rust_client_FfiEnvironmentObjectList_len_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn get < 'a > (self : & 'a root :: carla_rust :: client :: FfiEnvironmentObjectList , index : usize) -> impl autocxx :: moveit :: new :: New < Output = root :: carla_rust :: rpc :: FfiEnvironmentObjectRef > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiEnvironmentObjectList_get_autocxx_wrapper_0xd539d5a17acbdd25 (self , index , placement_return_type) }) } } pub fn new (vec : impl autocxx :: RValueParam < cxx :: CxxVector < root :: carla :: rpc :: EnvironmentObject > >) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let mut space0 = autocxx :: RValueParamHandler :: default () ; let mut space0 = :: core :: pin :: Pin :: new_unchecked (& mut space0) ; space0 . as_mut () . populate (vec) ; let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiEnvironmentObjectList_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this , space0 . get_ptr ()) }) } } } impl FfiActorVec { pub fn len (self : & root :: carla_rust :: client :: FfiActorVec) -> usize { cxxbridge :: carla_rust_client_FfiActorVec_len_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn get (self : & root :: carla_rust :: client :: FfiActorVec , index : usize) -> cxx :: SharedPtr < root :: carla_rust :: client :: FfiActor > { cxxbridge :: carla_rust_client_FfiActorVec_get_autocxx_wrapper_0xd539d5a17acbdd25 (self , index) } # [doc = "autocxx bindings couldn't be generated: Problem handling function argument vec: Pointer pointed to an array, which is not yet supported"] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } } impl FfiWorldSnapshot { pub fn GetId (self : & root :: carla_rust :: client :: FfiWorldSnapshot) -> u64 { cxxbridge :: carla_rust_client_FfiWorldSnapshot_GetId_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetFrame (self : & root :: carla_rust :: client :: FfiWorldSnapshot) -> usize { cxxbridge :: carla_rust_client_FfiWorldSnapshot_GetFrame_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetTimestamp (self : & root :: carla_rust :: client :: FfiWorldSnapshot) -> & root :: carla :: client :: Timestamp { cxxbridge :: carla_rust_client_FfiWorldSnapshot_GetTimestamp_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn Contains (self : & root :: carla_rust :: client :: FfiWorldSnapshot , actor_id : u32) -> bool { cxxbridge :: carla_rust_client_FfiWorldSnapshot_Contains_autocxx_wrapper_0xd539d5a17acbdd25 (self , actor_id) } pub fn size (self : & root :: carla_rust :: client :: FfiWorldSnapshot) -> usize { cxxbridge :: carla_rust_client_FfiWorldSnapshot_size_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn new (base : impl autocxx :: RValueParam < root :: carla :: client :: WorldSnapshot >) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let mut space0 = autocxx :: RValueParamHandler :: default () ; let mut space0 = :: core :: pin :: Pin :: new_unchecked (& mut space0) ; space0 . as_mut () . populate (base) ; let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiWorldSnapshot_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this , space0 . get_ptr ()) }) } } } impl FfiClientLightState { # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::client::LightState"] fn carla_rust_client_FfiClientLightState_as_builtin_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::client::LightState"] fn carla_rust_client_FfiClientLightState_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } } impl FfiLightRef { pub fn GetColor (self : & root :: carla_rust :: client :: FfiLightRef) -> root :: carla_rust :: sensor :: data :: FfiColor { cxxbridge :: carla_rust_client_FfiLightRef_GetColor_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetId (self : & root :: carla_rust :: client :: FfiLightRef) -> u32 { cxxbridge :: carla_rust_client_FfiLightRef_GetId_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetIntensity (self : & root :: carla_rust :: client :: FfiLightRef) -> f32 { cxxbridge :: carla_rust_client_FfiLightRef_GetIntensity_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetLocation (self : & root :: carla_rust :: client :: FfiLightRef) -> root :: carla_rust :: geom :: FfiLocation { cxxbridge :: carla_rust_client_FfiLightRef_GetLocation_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetLightGroup (self : & root :: carla_rust :: client :: FfiLightRef) -> root :: carla_rust :: rpc :: FfiRpcLightGroup { cxxbridge :: carla_rust_client_FfiLightRef_GetLightGroup_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetLightState (self : & root :: carla_rust :: client :: FfiLightRef) -> root :: carla_rust :: client :: FfiClientLightState { cxxbridge :: carla_rust_client_FfiLightRef_GetLightState_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn IsOn (self : & root :: carla_rust :: client :: FfiLightRef) -> bool { cxxbridge :: carla_rust_client_FfiLightRef_IsOn_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn IsOff (self : & root :: carla_rust :: client :: FfiLightRef) -> bool { cxxbridge :: carla_rust_client_FfiLightRef_IsOff_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn SetColor (self : :: core :: pin :: Pin < & mut root :: carla_rust :: client :: FfiLightRef > , color : root :: carla_rust :: sensor :: data :: FfiColor) { cxxbridge :: carla_rust_client_FfiLightRef_SetColor_autocxx_wrapper_0xd539d5a17acbdd25 (self , color) } pub fn SetIntensity (self : :: core :: pin :: Pin < & mut root :: carla_rust :: client :: FfiLightRef > , intensity : f32) { cxxbridge :: carla_rust_client_FfiLightRef_SetIntensity_autocxx_wrapper_0xd539d5a17acbdd25 (self , intensity) } pub fn SetLightGroup (self : :: core :: pin :: Pin < & mut root :: carla_rust :: client :: FfiLightRef > , group : root :: carla_rust :: rpc :: FfiRpcLightGroup) { cxxbridge :: carla_rust_client_FfiLightRef_SetLightGroup_autocxx_wrapper_0xd539d5a17acbdd25 (self , group) } pub fn SetLightState (self : :: core :: pin :: Pin < & mut root :: carla_rust :: client :: FfiLightRef > , state : & root :: carla_rust :: client :: FfiClientLightState) { cxxbridge :: carla_rust_client_FfiLightRef_SetLightState_autocxx_wrapper_0xd539d5a17acbdd25 (self , state) } pub fn TurnOn (self : :: core :: pin :: Pin < & mut root :: carla_rust :: client :: FfiLightRef >) { cxxbridge :: carla_rust_client_FfiLightRef_TurnOn_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn TurnOff (self : :: core :: pin :: Pin < & mut root :: carla_rust :: client :: FfiLightRef >) { cxxbridge :: carla_rust_client_FfiLightRef_TurnOff_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn new < 'a > (base : :: core :: pin :: Pin < & 'a mut root :: carla :: client :: Light >) -> impl autocxx :: moveit :: new :: New < Output = Self > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiLightRef_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this , base) }) } } } impl FfiLightList { pub fn size (self : & root :: carla_rust :: client :: FfiLightList) -> usize { cxxbridge :: carla_rust_client_FfiLightList_size_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn at < 'a > (self : :: core :: pin :: Pin < & 'a mut root :: carla_rust :: client :: FfiLightList > , index : usize) -> impl autocxx :: moveit :: new :: New < Output = root :: carla_rust :: client :: FfiLightRef > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiLightList_at_autocxx_wrapper_0xd539d5a17acbdd25 (self , index , placement_return_type) }) } } pub fn inner < 'a > (self : :: core :: pin :: Pin < & 'a mut root :: carla_rust :: client :: FfiLightList >) -> :: core :: pin :: Pin < & 'a mut cxx :: CxxVector < root :: carla :: client :: Light > > { cxxbridge :: carla_rust_client_FfiLightList_inner_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn new (base : impl autocxx :: RValueParam < cxx :: CxxVector < root :: carla :: client :: Light > >) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let mut space0 = autocxx :: RValueParamHandler :: default () ; let mut space0 = :: core :: pin :: Pin :: new_unchecked (& mut space0) ; space0 . as_mut () . populate (base) ; let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiLightList_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this , space0 . get_ptr ()) }) } } } impl FfiLightManager { pub fn GetAllLights < 'a > (self : & 'a root :: carla_rust :: client :: FfiLightManager , type_ : root :: carla_rust :: rpc :: FfiRpcLightGroup) -> impl autocxx :: moveit :: new :: New < Output = root :: carla_rust :: client :: FfiLightList > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiLightManager_GetAllLights_autocxx_wrapper_0xd539d5a17acbdd25 (self , type_ , placement_return_type) }) } } # [doc = "autocxx bindings couldn't be generated: Problem handling function argument active: Pointer pointed to an array, which is not yet supported"] fn SetActiveList (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn IsActiveList (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn GetTurnedOnLights < 'a > (self : & 'a root :: carla_rust :: client :: FfiLightManager , type_ : root :: carla_rust :: rpc :: FfiRpcLightGroup) -> impl autocxx :: moveit :: new :: New < Output = root :: carla_rust :: client :: FfiLightList > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiLightManager_GetTurnedOnLights_autocxx_wrapper_0xd539d5a17acbdd25 (self , type_ , placement_return_type) }) } } pub fn GetTurnedOffLights < 'a > (self : & 'a root :: carla_rust :: client :: FfiLightManager , type_ : root :: carla_rust :: rpc :: FfiRpcLightGroup) -> impl autocxx :: moveit :: new :: New < Output = root :: carla_rust :: client :: FfiLightList > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiLightManager_GetTurnedOffLights_autocxx_wrapper_0xd539d5a17acbdd25 (self , type_ , placement_return_type) }) } } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::sensor::data::Color"] fn SetColorList2 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::sensor::data::Color"] fn GetColorList_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn GetIntensityList (self : & root :: carla_rust :: client :: FfiLightManager , lights : :: core :: pin :: Pin < & mut root :: carla_rust :: client :: FfiLightList >) -> cxx :: UniquePtr < cxx :: CxxVector < f32 > > { cxxbridge :: GetIntensityList_autocxx_wrapper_0xd539d5a17acbdd25 (self , lights) } pub fn GetLightGroupList (self : & root :: carla_rust :: client :: FfiLightManager , lights : :: core :: pin :: Pin < & mut root :: carla_rust :: client :: FfiLightList >) -> cxx :: UniquePtr < cxx :: CxxVector < root :: carla_rust :: rpc :: FfiRpcLightGroup > > { cxxbridge :: GetLightGroupList_autocxx_wrapper_0xd539d5a17acbdd25 (self , lights) } pub fn GetLightStateList (self : & root :: carla_rust :: client :: FfiLightManager , lights : :: core :: pin :: Pin < & mut root :: carla_rust :: client :: FfiLightList >) -> cxx :: UniquePtr < cxx :: CxxVector < root :: carla_rust :: client :: FfiClientLightState > > { cxxbridge :: GetLightStateList_autocxx_wrapper_0xd539d5a17acbdd25 (self , lights) } pub fn GetColor (self : & root :: carla_rust :: client :: FfiLightManager , id : u32) -> root :: carla_rust :: sensor :: data :: FfiColor { cxxbridge :: carla_rust_client_FfiLightManager_GetColor_autocxx_wrapper_0xd539d5a17acbdd25 (self , id) } pub fn GetIntensity (self : & root :: carla_rust :: client :: FfiLightManager , id : u32) -> f32 { cxxbridge :: carla_rust_client_FfiLightManager_GetIntensity_autocxx_wrapper_0xd539d5a17acbdd25 (self , id) } pub fn GetLightState (self : & root :: carla_rust :: client :: FfiLightManager , id : u32) -> root :: carla_rust :: client :: FfiClientLightState { cxxbridge :: carla_rust_client_FfiLightManager_GetLightState_autocxx_wrapper_0xd539d5a17acbdd25 (self , id) } pub fn GetLightGroup (self : & root :: carla_rust :: client :: FfiLightManager , id : u32) -> root :: carla_rust :: rpc :: FfiRpcLightGroup { cxxbridge :: carla_rust_client_FfiLightManager_GetLightGroup_autocxx_wrapper_0xd539d5a17acbdd25 (self , id) } pub fn IsActive (self : & root :: carla_rust :: client :: FfiLightManager , id : u32) -> bool { cxxbridge :: carla_rust_client_FfiLightManager_IsActive_autocxx_wrapper_0xd539d5a17acbdd25 (self , id) } pub fn SetActive (self : & root :: carla_rust :: client :: FfiLightManager , id : u32 , active : bool) { cxxbridge :: carla_rust_client_FfiLightManager_SetActive_autocxx_wrapper_0xd539d5a17acbdd25 (self , id , active) } pub fn SetColor (self : & root :: carla_rust :: client :: FfiLightManager , id : u32 , color : root :: carla_rust :: sensor :: data :: FfiColor) { cxxbridge :: carla_rust_client_FfiLightManager_SetColor_autocxx_wrapper_0xd539d5a17acbdd25 (self , id , color) } pub fn SetIntensity (self : & root :: carla_rust :: client :: FfiLightManager , id : u32 , intensity : f32) { cxxbridge :: carla_rust_client_FfiLightManager_SetIntensity_autocxx_wrapper_0xd539d5a17acbdd25 (self , id , intensity) } pub fn SetLightState (self : & root :: carla_rust :: client :: FfiLightManager , id : u32 , new_state : & root :: carla_rust :: client :: FfiClientLightState) { cxxbridge :: carla_rust_client_FfiLightManager_SetLightState_autocxx_wrapper_0xd539d5a17acbdd25 (self , id , new_state) } pub fn SetLightGroup (self : & root :: carla_rust :: client :: FfiLightManager , id : u32 , group : root :: carla_rust :: rpc :: FfiRpcLightGroup) { cxxbridge :: carla_rust_client_FfiLightManager_SetLightGroup_autocxx_wrapper_0xd539d5a17acbdd25 (self , id , group) } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } } impl FfiWorld { pub fn GetId (self : & root :: carla_rust :: client :: FfiWorld) -> u64 { cxxbridge :: carla_rust_client_FfiWorld_GetId_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetMap (self : & root :: carla_rust :: client :: FfiWorld) -> cxx :: SharedPtr < root :: carla_rust :: client :: FfiMap > { cxxbridge :: carla_rust_client_FfiWorld_GetMap_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn LoadLevelLayer (self : & root :: carla_rust :: client :: FfiWorld , map_layers : u16) { cxxbridge :: carla_rust_client_FfiWorld_LoadLevelLayer_autocxx_wrapper_0xd539d5a17acbdd25 (self , map_layers) } pub fn UnloadLevelLayer (self : & root :: carla_rust :: client :: FfiWorld , map_layers : u16) { cxxbridge :: carla_rust_client_FfiWorld_UnloadLevelLayer_autocxx_wrapper_0xd539d5a17acbdd25 (self , map_layers) } pub fn GetBlueprintLibrary (self : & root :: carla_rust :: client :: FfiWorld) -> cxx :: SharedPtr < root :: carla_rust :: client :: FfiBlueprintLibrary > { cxxbridge :: carla_rust_client_FfiWorld_GetBlueprintLibrary_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetVehiclesLightStates < 'a > (self : & 'a root :: carla_rust :: client :: FfiWorld) -> impl autocxx :: moveit :: new :: New < Output = root :: carla_rust :: rpc :: FfiVehicleLightStateList > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiWorld_GetVehiclesLightStates_autocxx_wrapper_0xd539d5a17acbdd25 (self , placement_return_type) }) } } pub fn GetRandomLocationFromNavigation (self : & root :: carla_rust :: client :: FfiWorld) -> cxx :: UniquePtr < root :: carla_rust :: geom :: FfiLocation > { cxxbridge :: carla_rust_client_FfiWorld_GetRandomLocationFromNavigation_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetSpectator (self : & root :: carla_rust :: client :: FfiWorld) -> cxx :: SharedPtr < root :: carla_rust :: client :: FfiActor > { cxxbridge :: carla_rust_client_FfiWorld_GetSpectator_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub unsafe fn TrySpawnActor (self : :: core :: pin :: Pin < & mut root :: carla_rust :: client :: FfiWorld > , blueprint : & root :: carla :: client :: ActorBlueprint , transform : & root :: carla_rust :: geom :: FfiTransform , parent : * mut root :: carla_rust :: client :: FfiActor , attachment_type : root :: carla :: rpc :: AttachmentType) -> cxx :: SharedPtr < root :: carla_rust :: client :: FfiActor > { cxxbridge :: carla_rust_client_FfiWorld_TrySpawnActor_autocxx_wrapper_0xd539d5a17acbdd25 (self , blueprint , transform , parent , attachment_type) } pub fn WaitForTick (self : & root :: carla_rust :: client :: FfiWorld , millis : usize) -> cxx :: UniquePtr < root :: carla_rust :: client :: FfiWorldSnapshot > { cxxbridge :: carla_rust_client_FfiWorld_WaitForTick_autocxx_wrapper_0xd539d5a17acbdd25 (self , millis) } pub fn Tick (self : :: core :: pin :: Pin < & mut root :: carla_rust :: client :: FfiWorld > , millis : usize) -> u64 { cxxbridge :: carla_rust_client_FfiWorld_Tick_autocxx_wrapper_0xd539d5a17acbdd25 (self , millis) } pub fn SetPedestriansCrossFactor (self : :: core :: pin :: Pin < & mut root :: carla_rust :: client :: FfiWorld > , percentage : f32) { cxxbridge :: carla_rust_client_FfiWorld_SetPedestriansCrossFactor_autocxx_wrapper_0xd539d5a17acbdd25 (self , percentage) } pub fn SetPedestriansSeed (self : :: core :: pin :: Pin < & mut root :: carla_rust :: client :: FfiWorld > , seed : autocxx :: c_uint) { cxxbridge :: carla_rust_client_FfiWorld_SetPedestriansSeed_autocxx_wrapper_0xd539d5a17acbdd25 (self , seed) } pub fn GetTrafficSign (self : & root :: carla_rust :: client :: FfiWorld , landmark : & root :: carla_rust :: client :: FfiLandmark) -> cxx :: SharedPtr < root :: carla_rust :: client :: FfiActor > { cxxbridge :: carla_rust_client_FfiWorld_GetTrafficSign_autocxx_wrapper_0xd539d5a17acbdd25 (self , landmark) } pub fn GetTrafficLight (self : & root :: carla_rust :: client :: FfiWorld , landmark : & root :: carla_rust :: client :: FfiLandmark) -> cxx :: SharedPtr < root :: carla_rust :: client :: FfiActor > { cxxbridge :: carla_rust_client_FfiWorld_GetTrafficLight_autocxx_wrapper_0xd539d5a17acbdd25 (self , landmark) } pub fn GetTrafficLightFromOpenDRIVE (self : & root :: carla_rust :: client :: FfiWorld , sign_id : & cxx :: CxxString) -> cxx :: SharedPtr < root :: carla_rust :: client :: FfiActor > { cxxbridge :: carla_rust_client_FfiWorld_GetTrafficLightFromOpenDRIVE_autocxx_wrapper_0xd539d5a17acbdd25 (self , sign_id) } pub fn ResetAllTrafficLights (self : :: core :: pin :: Pin < & mut root :: carla_rust :: client :: FfiWorld >) { cxxbridge :: carla_rust_client_FfiWorld_ResetAllTrafficLights_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetLightManager (self : & root :: carla_rust :: client :: FfiWorld) -> cxx :: SharedPtr < root :: carla_rust :: client :: FfiLightManager > { cxxbridge :: carla_rust_client_FfiWorld_GetLightManager_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn FreezeAllTrafficLights (self : :: core :: pin :: Pin < & mut root :: carla_rust :: client :: FfiWorld > , frozen : bool) { cxxbridge :: carla_rust_client_FfiWorld_FreezeAllTrafficLights_autocxx_wrapper_0xd539d5a17acbdd25 (self , frozen) } pub fn GetLevelBBs (self : & root :: carla_rust :: client :: FfiWorld , queried_tag : u8) -> cxx :: UniquePtr < root :: carla_rust :: client :: FfiBoundingBoxList > { cxxbridge :: carla_rust_client_FfiWorld_GetLevelBBs_autocxx_wrapper_0xd539d5a17acbdd25 (self , queried_tag) } pub fn GetTrafficLightsFromWaypoint < 'a > (self : & 'a root :: carla_rust :: client :: FfiWorld , waypoint : & 'a root :: carla_rust :: client :: FfiWaypoint , distance : f64) -> impl autocxx :: moveit :: new :: New < Output = root :: carla_rust :: client :: FfiActorVec > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiWorld_GetTrafficLightsFromWaypoint_autocxx_wrapper_0xd539d5a17acbdd25 (self , waypoint , distance , placement_return_type) }) } } pub fn GetTrafficLightsInJunction < 'a > (self : & 'a root :: carla_rust :: client :: FfiWorld , junc_id : i32) -> impl autocxx :: moveit :: new :: New < Output = root :: carla_rust :: client :: FfiActorVec > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiWorld_GetTrafficLightsInJunction_autocxx_wrapper_0xd539d5a17acbdd25 (self , junc_id , placement_return_type) }) } } pub fn GetSettings < 'a > (self : & 'a root :: carla_rust :: client :: FfiWorld) -> impl autocxx :: moveit :: new :: New < Output = root :: carla_rust :: rpc :: FfiEpisodeSettings > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiWorld_GetSettings_autocxx_wrapper_0xd539d5a17acbdd25 (self , placement_return_type) }) } } pub fn ApplySettings (self : :: core :: pin :: Pin < & mut root :: carla_rust :: client :: FfiWorld > , settings : & root :: carla_rust :: rpc :: FfiEpisodeSettings , timeout_millis : usize) -> u64 { cxxbridge :: carla_rust_client_FfiWorld_ApplySettings_autocxx_wrapper_0xd539d5a17acbdd25 (self , settings , timeout_millis) } pub fn GetSnapshot (self : & root :: carla_rust :: client :: FfiWorld) -> cxx :: UniquePtr < root :: carla_rust :: client :: FfiWorldSnapshot > { cxxbridge :: carla_rust_client_FfiWorld_GetSnapshot_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetNamesOfAllObjects (self : & root :: carla_rust :: client :: FfiWorld) -> cxx :: UniquePtr < cxx :: CxxVector < cxx :: CxxString > > { cxxbridge :: carla_rust_client_FfiWorld_GetNamesOfAllObjects_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetActor (self : & root :: carla_rust :: client :: FfiWorld , id : u32) -> cxx :: SharedPtr < root :: carla_rust :: client :: FfiActor > { cxxbridge :: carla_rust_client_FfiWorld_GetActor_autocxx_wrapper_0xd539d5a17acbdd25 (self , id) } pub fn GetActors (self : & root :: carla_rust :: client :: FfiWorld) -> cxx :: SharedPtr < root :: carla_rust :: client :: FfiActorList > { cxxbridge :: carla_rust_client_FfiWorld_GetActors_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetWeather (self : & root :: carla_rust :: client :: FfiWorld) -> root :: carla :: rpc :: WeatherParameters { cxxbridge :: carla_rust_client_FfiWorld_GetWeather_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn SetWeather (self : :: core :: pin :: Pin < & mut root :: carla_rust :: client :: FfiWorld > , weather : & root :: carla :: rpc :: WeatherParameters) { cxxbridge :: carla_rust_client_FfiWorld_SetWeather_autocxx_wrapper_0xd539d5a17acbdd25 (self , weather) } pub fn GetEnvironmentObjects < 'a > (self : & 'a root :: carla_rust :: client :: FfiWorld , queried_tag : u8) -> impl autocxx :: moveit :: new :: New < Output = root :: carla_rust :: client :: FfiEnvironmentObjectList > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiWorld_GetEnvironmentObjects_autocxx_wrapper_0xd539d5a17acbdd25 (self , queried_tag , placement_return_type) }) } } pub unsafe fn EnableEnvironmentObjects (self : & root :: carla_rust :: client :: FfiWorld , ids_ptr : * const u64 , ids_len : usize , enable : bool) { cxxbridge :: carla_rust_client_FfiWorld_EnableEnvironmentObjects_autocxx_wrapper_0xd539d5a17acbdd25 (self , ids_ptr , ids_len , enable) } pub fn ProjectPoint (self : & root :: carla_rust :: client :: FfiWorld , location : root :: carla_rust :: geom :: FfiLocation , direction : root :: carla :: geom :: Vector3D , search_distance : f32) -> cxx :: UniquePtr < root :: carla_rust :: rpc :: FfiLabelledPoint > { cxxbridge :: carla_rust_client_FfiWorld_ProjectPoint_autocxx_wrapper_0xd539d5a17acbdd25 (self , location , direction , search_distance) } pub fn GroundProjection (self : & root :: carla_rust :: client :: FfiWorld , location : root :: carla_rust :: geom :: FfiLocation , search_distance : f32) -> cxx :: UniquePtr < root :: carla_rust :: rpc :: FfiLabelledPoint > { cxxbridge :: carla_rust_client_FfiWorld_GroundProjection_autocxx_wrapper_0xd539d5a17acbdd25 (self , location , search_distance) } pub fn CastRay < 'a > (self : & 'a root :: carla_rust :: client :: FfiWorld , start_location : root :: carla_rust :: geom :: FfiLocation , end_location : root :: carla_rust :: geom :: FfiLocation) -> impl autocxx :: moveit :: new :: New < Output = root :: carla_rust :: client :: FfiLabelledPointList > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiWorld_CastRay_autocxx_wrapper_0xd539d5a17acbdd25 (self , start_location , end_location , placement_return_type) }) } } pub fn clone < 'a > (self : & 'a root :: carla_rust :: client :: FfiWorld) -> impl autocxx :: moveit :: new :: New < Output = root :: carla_rust :: client :: FfiWorld > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: clone_autocxx_wrapper_0xd539d5a17acbdd25 (self , placement_return_type) }) } } pub fn new (base : impl autocxx :: RValueParam < root :: carla :: client :: World >) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let mut space0 = autocxx :: RValueParamHandler :: default () ; let mut space0 = :: core :: pin :: Pin :: new_unchecked (& mut space0) ; space0 . as_mut () . populate (base) ; let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiWorld_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this , space0 . get_ptr ()) }) } } } impl FfiClient { pub fn GetTimeout (self : :: core :: pin :: Pin < & mut root :: carla_rust :: client :: FfiClient >) -> usize { cxxbridge :: carla_rust_client_FfiClient_GetTimeout_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn SetTimeout (self : :: core :: pin :: Pin < & mut root :: carla_rust :: client :: FfiClient > , millis : usize) { cxxbridge :: carla_rust_client_FfiClient_SetTimeout_autocxx_wrapper_0xd539d5a17acbdd25 (self , millis) } pub fn GetClientVersion (self : & root :: carla_rust :: client :: FfiClient) -> cxx :: UniquePtr < cxx :: CxxString > { cxxbridge :: carla_rust_client_FfiClient_GetClientVersion_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetServerVersion (self : & root :: carla_rust :: client :: FfiClient) -> cxx :: UniquePtr < cxx :: CxxString > { cxxbridge :: carla_rust_client_FfiClient_GetServerVersion_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetAvailableMaps (self : & root :: carla_rust :: client :: FfiClient) -> cxx :: UniquePtr < cxx :: CxxVector < cxx :: CxxString > > { cxxbridge :: carla_rust_client_FfiClient_GetAvailableMaps_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn ReloadWorld < 'a > (self : & 'a root :: carla_rust :: client :: FfiClient , reset_settings : bool) -> impl autocxx :: moveit :: new :: New < Output = root :: carla_rust :: client :: FfiWorld > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiClient_ReloadWorld_autocxx_wrapper_0xd539d5a17acbdd25 (self , reset_settings , placement_return_type) }) } } pub fn LoadWorld < 'a > (self : & 'a root :: carla_rust :: client :: FfiClient , map_name : impl ToCppString + 'a , reset_settings : bool) -> impl autocxx :: moveit :: new :: New < Output = root :: carla_rust :: client :: FfiWorld > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiClient_LoadWorld_autocxx_wrapper_0xd539d5a17acbdd25 (self , map_name . into_cpp () , reset_settings , placement_return_type) }) } } pub fn GenerateOpenDriveWorld < 'a > (self : & 'a root :: carla_rust :: client :: FfiClient , opendrive : impl ToCppString + 'a , params : & 'a root :: carla :: rpc :: OpendriveGenerationParameters , reset_settings : bool) -> impl autocxx :: moveit :: new :: New < Output = root :: carla_rust :: client :: FfiWorld > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiClient_GenerateOpenDriveWorld_autocxx_wrapper_0xd539d5a17acbdd25 (self , opendrive . into_cpp () , params , reset_settings , placement_return_type) }) } } pub fn GetWorld < 'a > (self : & 'a root :: carla_rust :: client :: FfiClient) -> impl autocxx :: moveit :: new :: New < Output = root :: carla_rust :: client :: FfiWorld > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiClient_GetWorld_autocxx_wrapper_0xd539d5a17acbdd25 (self , placement_return_type) }) } } pub fn GetInstanceTM < 'a > (self : & 'a root :: carla_rust :: client :: FfiClient , port : u16) -> impl autocxx :: moveit :: new :: New < Output = root :: carla_rust :: traffic_manager :: FfiTrafficManager > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiClient_GetInstanceTM_autocxx_wrapper_0xd539d5a17acbdd25 (self , port , placement_return_type) }) } } pub fn new < 'a > (host : & 'a cxx :: CxxString , port : u16 , worker_threads : usize) -> impl autocxx :: moveit :: new :: New < Output = Self > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiClient_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this , host , port , worker_threads) }) } } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::client::Client"] fn carla_rust_client_FfiClient_new1_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } } impl FfiTrafficLightList { pub fn len (self : & root :: carla_rust :: client :: FfiTrafficLightList) -> usize { cxxbridge :: carla_rust_client_FfiTrafficLightList_len_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn get (self : & root :: carla_rust :: client :: FfiTrafficLightList , index : usize) -> cxx :: SharedPtr < root :: carla_rust :: client :: FfiTrafficLight > { cxxbridge :: carla_rust_client_FfiTrafficLightList_get_autocxx_wrapper_0xd539d5a17acbdd25 (self , index) } # [doc = "autocxx bindings couldn't be generated: Problem handling function argument vec: Pointer pointed to an array, which is not yet supported"] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } } impl FfiTrafficLight { pub fn GetTriggerVolume (self : & root :: carla_rust :: client :: FfiTrafficLight) -> & root :: carla_rust :: geom :: FfiBoundingBox { cxxbridge :: carla_rust_client_FfiTrafficLight_GetTriggerVolume_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetSignId (self : & root :: carla_rust :: client :: FfiTrafficLight) -> cxx :: UniquePtr < cxx :: CxxString > { cxxbridge :: carla_rust_client_FfiTrafficLight_GetSignId_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn SetState (self : & root :: carla_rust :: client :: FfiTrafficLight , state : root :: carla :: rpc :: TrafficLightState) { cxxbridge :: carla_rust_client_FfiTrafficLight_SetState_autocxx_wrapper_0xd539d5a17acbdd25 (self , state) } pub fn GetState (self : & root :: carla_rust :: client :: FfiTrafficLight) -> root :: carla :: rpc :: TrafficLightState { cxxbridge :: carla_rust_client_FfiTrafficLight_GetState_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn SetGreenTime (self : & root :: carla_rust :: client :: FfiTrafficLight , green_time : f32) { cxxbridge :: carla_rust_client_FfiTrafficLight_SetGreenTime_autocxx_wrapper_0xd539d5a17acbdd25 (self , green_time) } pub fn GetGreenTime (self : & root :: carla_rust :: client :: FfiTrafficLight) -> f32 { cxxbridge :: carla_rust_client_FfiTrafficLight_GetGreenTime_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn SetYellowTime (self : & root :: carla_rust :: client :: FfiTrafficLight , yellow_time : f32) { cxxbridge :: carla_rust_client_FfiTrafficLight_SetYellowTime_autocxx_wrapper_0xd539d5a17acbdd25 (self , yellow_time) } pub fn GetYellowTime (self : & root :: carla_rust :: client :: FfiTrafficLight) -> f32 { cxxbridge :: carla_rust_client_FfiTrafficLight_GetYellowTime_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn SetRedTime (self : & root :: carla_rust :: client :: FfiTrafficLight , red_time : f32) { cxxbridge :: carla_rust_client_FfiTrafficLight_SetRedTime_autocxx_wrapper_0xd539d5a17acbdd25 (self , red_time) } pub fn GetRedTime (self : & root :: carla_rust :: client :: FfiTrafficLight) -> f32 { cxxbridge :: carla_rust_client_FfiTrafficLight_GetRedTime_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetElapsedTime (self : & root :: carla_rust :: client :: FfiTrafficLight) -> f32 { cxxbridge :: carla_rust_client_FfiTrafficLight_GetElapsedTime_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn Freeze (self : & root :: carla_rust :: client :: FfiTrafficLight , freeze : bool) { cxxbridge :: carla_rust_client_FfiTrafficLight_Freeze_autocxx_wrapper_0xd539d5a17acbdd25 (self , freeze) } pub fn IsFrozen (self : & root :: carla_rust :: client :: FfiTrafficLight) -> bool { cxxbridge :: carla_rust_client_FfiTrafficLight_IsFrozen_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetPoleIndex (self : & root :: carla_rust :: client :: FfiTrafficLight) -> u32 { cxxbridge :: carla_rust_client_FfiTrafficLight_GetPoleIndex_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetGroupTrafficLights < 'a > (self : & 'a root :: carla_rust :: client :: FfiTrafficLight) -> impl autocxx :: moveit :: new :: New < Output = root :: carla_rust :: client :: FfiTrafficLightList > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiTrafficLight_GetGroupTrafficLights_autocxx_wrapper_0xd539d5a17acbdd25 (self , placement_return_type) }) } } pub fn ResetGroup (self : & root :: carla_rust :: client :: FfiTrafficLight) { cxxbridge :: carla_rust_client_FfiTrafficLight_ResetGroup_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetAffectedLaneWaypoints < 'a > (self : & 'a root :: carla_rust :: client :: FfiTrafficLight) -> impl autocxx :: moveit :: new :: New < Output = root :: carla_rust :: client :: FfiWaypointList > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiTrafficLight_GetAffectedLaneWaypoints_autocxx_wrapper_0xd539d5a17acbdd25 (self , placement_return_type) }) } } pub fn GetLightBoxes < 'a > (self : & 'a root :: carla_rust :: client :: FfiTrafficLight) -> impl autocxx :: moveit :: new :: New < Output = root :: carla_rust :: client :: FfiBoundingBoxList > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiTrafficLight_GetLightBoxes_autocxx_wrapper_0xd539d5a17acbdd25 (self , placement_return_type) }) } } pub fn GetOpenDRIVEID (self : & root :: carla_rust :: client :: FfiTrafficLight) -> cxx :: UniquePtr < cxx :: CxxString > { cxxbridge :: carla_rust_client_FfiTrafficLight_GetOpenDRIVEID_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetStopWaypoints < 'a > (self : & 'a root :: carla_rust :: client :: FfiTrafficLight) -> impl autocxx :: moveit :: new :: New < Output = root :: carla_rust :: client :: FfiWaypointList > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_client_FfiTrafficLight_GetStopWaypoints_autocxx_wrapper_0xd539d5a17acbdd25 (self , placement_return_type) }) } } pub fn to_actor (self : & root :: carla_rust :: client :: FfiTrafficLight) -> cxx :: SharedPtr < root :: carla_rust :: client :: FfiActor > { cxxbridge :: carla_rust_client_FfiTrafficLight_to_actor_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: client :: FfiActorAttributeValue { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: client :: FfiActorAttributeValue { cxxbridge :: FfiActorAttributeValue_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: client :: FfiActorAttributeValue) { cxxbridge :: FfiActorAttributeValue_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: client :: FfiActorAttributeValueList { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: client :: FfiActorAttributeValueList { cxxbridge :: FfiActorAttributeValueList_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: client :: FfiActorAttributeValueList) { cxxbridge :: FfiActorAttributeValueList_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: client :: FfiActor { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: client :: FfiActor { cxxbridge :: FfiActor_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: client :: FfiActor) { cxxbridge :: FfiActor_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: client :: ListenCallback { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: client :: ListenCallback { cxxbridge :: ListenCallback_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: client :: ListenCallback) { cxxbridge :: ListenCallback_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: client :: FfiWaypointList { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: client :: FfiWaypointList { cxxbridge :: FfiWaypointList_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: client :: FfiWaypointList) { cxxbridge :: FfiWaypointList_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: client :: FfiWaypointPair { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: client :: FfiWaypointPair { cxxbridge :: FfiWaypointPair_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: client :: FfiWaypointPair) { cxxbridge :: FfiWaypointPair_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: client :: FfiJunction { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: client :: FfiJunction { cxxbridge :: FfiJunction_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: client :: FfiJunction) { cxxbridge :: FfiJunction_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: client :: FfiLandmarkList { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: client :: FfiLandmarkList { cxxbridge :: FfiLandmarkList_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: client :: FfiLandmarkList) { cxxbridge :: FfiLandmarkList_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: client :: FfiWaypoint { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: client :: FfiWaypoint { cxxbridge :: FfiWaypoint_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: client :: FfiWaypoint) { cxxbridge :: FfiWaypoint_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: client :: FfiLandmark { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: client :: FfiLandmark { cxxbridge :: FfiLandmark_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: client :: FfiLandmark) { cxxbridge :: FfiLandmark_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: client :: FfiTransformList { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: client :: FfiTransformList { cxxbridge :: FfiTransformList_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: client :: FfiTransformList) { cxxbridge :: FfiTransformList_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: client :: FfiMap { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: client :: FfiMap { cxxbridge :: FfiMap_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: client :: FfiMap) { cxxbridge :: FfiMap_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: client :: FfiTrafficSign { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: client :: FfiTrafficSign { cxxbridge :: FfiTrafficSign_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: client :: FfiTrafficSign) { cxxbridge :: FfiTrafficSign_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: client :: FfiVehicle { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: client :: FfiVehicle { cxxbridge :: FfiVehicle_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: client :: FfiVehicle) { cxxbridge :: FfiVehicle_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: client :: FfiSensor { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: client :: FfiSensor { cxxbridge :: FfiSensor_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: client :: FfiSensor) { cxxbridge :: FfiSensor_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: client :: FfiBlueprintLibrary { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: client :: FfiBlueprintLibrary { cxxbridge :: FfiBlueprintLibrary_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: client :: FfiBlueprintLibrary) { cxxbridge :: FfiBlueprintLibrary_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: client :: FfiActorList { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: client :: FfiActorList { cxxbridge :: FfiActorList_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: client :: FfiActorList) { cxxbridge :: FfiActorList_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: client :: FfiBoundingBoxList { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: client :: FfiBoundingBoxList { cxxbridge :: FfiBoundingBoxList_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: client :: FfiBoundingBoxList) { cxxbridge :: FfiBoundingBoxList_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: client :: FfiLabelledPointList { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: client :: FfiLabelledPointList { cxxbridge :: FfiLabelledPointList_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: client :: FfiLabelledPointList) { cxxbridge :: FfiLabelledPointList_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: client :: FfiEnvironmentObjectList { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: client :: FfiEnvironmentObjectList { cxxbridge :: FfiEnvironmentObjectList_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: client :: FfiEnvironmentObjectList) { cxxbridge :: FfiEnvironmentObjectList_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: client :: FfiActorVec { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: client :: FfiActorVec { cxxbridge :: FfiActorVec_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: client :: FfiActorVec) { cxxbridge :: FfiActorVec_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: client :: FfiWorldSnapshot { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: client :: FfiWorldSnapshot { cxxbridge :: FfiWorldSnapshot_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: client :: FfiWorldSnapshot) { cxxbridge :: FfiWorldSnapshot_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: client :: FfiClientLightState { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: client :: FfiClientLightState { cxxbridge :: FfiClientLightState_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: client :: FfiClientLightState) { cxxbridge :: FfiClientLightState_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: client :: FfiLightRef { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: client :: FfiLightRef { cxxbridge :: FfiLightRef_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: client :: FfiLightRef) { cxxbridge :: FfiLightRef_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: client :: FfiLightList { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: client :: FfiLightList { cxxbridge :: FfiLightList_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: client :: FfiLightList) { cxxbridge :: FfiLightList_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: client :: FfiLightManager { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: client :: FfiLightManager { cxxbridge :: FfiLightManager_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: client :: FfiLightManager) { cxxbridge :: FfiLightManager_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: client :: FfiWorld { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: client :: FfiWorld { cxxbridge :: FfiWorld_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: client :: FfiWorld) { cxxbridge :: FfiWorld_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: client :: FfiClient { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: client :: FfiClient { cxxbridge :: FfiClient_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: client :: FfiClient) { cxxbridge :: FfiClient_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: client :: FfiTrafficLightList { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: client :: FfiTrafficLightList { cxxbridge :: FfiTrafficLightList_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: client :: FfiTrafficLightList) { cxxbridge :: FfiTrafficLightList_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: client :: FfiTrafficLight { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: client :: FfiTrafficLight { cxxbridge :: FfiTrafficLight_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: client :: FfiTrafficLight) { cxxbridge :: FfiTrafficLight_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla_rust :: client :: ListenCallback { unsafe fn move_new (mut arg1 : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla_rust :: client :: ListenCallback > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: client :: ListenCallback > >) { cxxbridge :: carla_rust_client_ListenCallback_new1_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (arg1 . as_mut ()) ; r }) } } impl Drop for root :: carla_rust :: client :: ListenCallback { fn drop (self : & mut root :: carla_rust :: client :: ListenCallback) { unsafe { cxxbridge :: ListenCallback_destructor_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla_rust :: client :: FfiMap { unsafe fn move_new (mut from : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla_rust :: client :: FfiMap > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: client :: FfiMap > >) { cxxbridge :: carla_rust_client_FfiMap_new1_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (from . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla_rust :: client :: FfiWorld { unsafe fn copy_new (arg1 : & root :: carla_rust :: client :: FfiWorld , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: client :: FfiWorld > >) { cxxbridge :: carla_rust_client_FfiWorld_new1_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , arg1) } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla_rust :: client :: FfiWorld { unsafe fn move_new (mut arg1 : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla_rust :: client :: FfiWorld > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: client :: FfiWorld > >) { cxxbridge :: carla_rust_client_FfiWorld_new2_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (arg1 . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla_rust :: client :: FfiActorAttributeValue { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla_rust :: client :: FfiActorAttributeValue > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: client :: FfiActorAttributeValue > >) { cxxbridge :: carla_rust_client_FfiActorAttributeValue_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla_rust :: client :: FfiActorAttributeValue { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla_rust :: client :: FfiActorAttributeValue , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: client :: FfiActorAttributeValue > >) { cxxbridge :: carla_rust_client_FfiActorAttributeValue_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla_rust :: client :: FfiActorAttributeValue { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: client :: FfiActorAttributeValue) { unsafe { cxxbridge :: FfiActorAttributeValue_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla_rust :: client :: FfiActor { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: client :: FfiActor) { unsafe { cxxbridge :: FfiActor_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla_rust :: client :: FfiWaypointList { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla_rust :: client :: FfiWaypointList > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: client :: FfiWaypointList > >) { cxxbridge :: carla_rust_client_FfiWaypointList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla_rust :: client :: FfiWaypointList { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla_rust :: client :: FfiWaypointList , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: client :: FfiWaypointList > >) { cxxbridge :: carla_rust_client_FfiWaypointList_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla_rust :: client :: FfiWaypointList { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: client :: FfiWaypointList) { unsafe { cxxbridge :: FfiWaypointList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla_rust :: client :: FfiWaypointPair { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla_rust :: client :: FfiWaypointPair > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: client :: FfiWaypointPair > >) { cxxbridge :: carla_rust_client_FfiWaypointPair_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla_rust :: client :: FfiWaypointPair { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla_rust :: client :: FfiWaypointPair , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: client :: FfiWaypointPair > >) { cxxbridge :: carla_rust_client_FfiWaypointPair_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla_rust :: client :: FfiWaypointPair { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: client :: FfiWaypointPair) { unsafe { cxxbridge :: FfiWaypointPair_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla_rust :: client :: FfiJunction { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: client :: FfiJunction) { unsafe { cxxbridge :: FfiJunction_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla_rust :: client :: FfiLandmarkList { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla_rust :: client :: FfiLandmarkList > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: client :: FfiLandmarkList > >) { cxxbridge :: carla_rust_client_FfiLandmarkList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla_rust :: client :: FfiLandmarkList { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla_rust :: client :: FfiLandmarkList , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: client :: FfiLandmarkList > >) { cxxbridge :: carla_rust_client_FfiLandmarkList_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla_rust :: client :: FfiLandmarkList { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: client :: FfiLandmarkList) { unsafe { cxxbridge :: FfiLandmarkList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla_rust :: client :: FfiWaypoint { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: client :: FfiWaypoint) { unsafe { cxxbridge :: FfiWaypoint_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla_rust :: client :: FfiLandmark { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: client :: FfiLandmark) { unsafe { cxxbridge :: FfiLandmark_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla_rust :: client :: FfiTransformList { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla_rust :: client :: FfiTransformList > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: client :: FfiTransformList > >) { cxxbridge :: carla_rust_client_FfiTransformList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } impl Drop for root :: carla_rust :: client :: FfiTransformList { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: client :: FfiTransformList) { unsafe { cxxbridge :: FfiTransformList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla_rust :: client :: FfiMap { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: client :: FfiMap) { unsafe { cxxbridge :: FfiMap_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla_rust :: client :: FfiTrafficSign { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: client :: FfiTrafficSign) { unsafe { cxxbridge :: FfiTrafficSign_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla_rust :: client :: FfiVehicle { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: client :: FfiVehicle) { unsafe { cxxbridge :: FfiVehicle_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla_rust :: client :: FfiSensor { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: client :: FfiSensor) { unsafe { cxxbridge :: FfiSensor_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla_rust :: client :: FfiBlueprintLibrary { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: client :: FfiBlueprintLibrary) { unsafe { cxxbridge :: FfiBlueprintLibrary_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla_rust :: client :: FfiActorList { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: client :: FfiActorList) { unsafe { cxxbridge :: FfiActorList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla_rust :: client :: FfiBoundingBoxList { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla_rust :: client :: FfiBoundingBoxList > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: client :: FfiBoundingBoxList > >) { cxxbridge :: carla_rust_client_FfiBoundingBoxList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } impl Drop for root :: carla_rust :: client :: FfiBoundingBoxList { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: client :: FfiBoundingBoxList) { unsafe { cxxbridge :: FfiBoundingBoxList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla_rust :: client :: FfiLabelledPointList { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla_rust :: client :: FfiLabelledPointList > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: client :: FfiLabelledPointList > >) { cxxbridge :: carla_rust_client_FfiLabelledPointList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } impl Drop for root :: carla_rust :: client :: FfiLabelledPointList { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: client :: FfiLabelledPointList) { unsafe { cxxbridge :: FfiLabelledPointList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla_rust :: client :: FfiEnvironmentObjectList { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla_rust :: client :: FfiEnvironmentObjectList > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: client :: FfiEnvironmentObjectList > >) { cxxbridge :: carla_rust_client_FfiEnvironmentObjectList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } impl Drop for root :: carla_rust :: client :: FfiEnvironmentObjectList { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: client :: FfiEnvironmentObjectList) { unsafe { cxxbridge :: FfiEnvironmentObjectList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla_rust :: client :: FfiActorVec { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla_rust :: client :: FfiActorVec > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: client :: FfiActorVec > >) { cxxbridge :: carla_rust_client_FfiActorVec_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla_rust :: client :: FfiActorVec { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla_rust :: client :: FfiActorVec , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: client :: FfiActorVec > >) { cxxbridge :: carla_rust_client_FfiActorVec_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla_rust :: client :: FfiActorVec { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: client :: FfiActorVec) { unsafe { cxxbridge :: FfiActorVec_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla_rust :: client :: FfiWorldSnapshot { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla_rust :: client :: FfiWorldSnapshot > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: client :: FfiWorldSnapshot > >) { cxxbridge :: carla_rust_client_FfiWorldSnapshot_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla_rust :: client :: FfiWorldSnapshot { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla_rust :: client :: FfiWorldSnapshot , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: client :: FfiWorldSnapshot > >) { cxxbridge :: carla_rust_client_FfiWorldSnapshot_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla_rust :: client :: FfiWorldSnapshot { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: client :: FfiWorldSnapshot) { unsafe { cxxbridge :: FfiWorldSnapshot_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla_rust :: client :: FfiClientLightState { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla_rust :: client :: FfiClientLightState > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: client :: FfiClientLightState > >) { cxxbridge :: carla_rust_client_FfiClientLightState_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla_rust :: client :: FfiClientLightState { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla_rust :: client :: FfiClientLightState , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: client :: FfiClientLightState > >) { cxxbridge :: carla_rust_client_FfiClientLightState_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla_rust :: client :: FfiClientLightState { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: client :: FfiClientLightState) { unsafe { cxxbridge :: FfiClientLightState_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla_rust :: client :: FfiLightRef { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla_rust :: client :: FfiLightRef > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: client :: FfiLightRef > >) { cxxbridge :: carla_rust_client_FfiLightRef_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla_rust :: client :: FfiLightRef { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla_rust :: client :: FfiLightRef , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: client :: FfiLightRef > >) { cxxbridge :: carla_rust_client_FfiLightRef_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla_rust :: client :: FfiLightRef { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: client :: FfiLightRef) { unsafe { cxxbridge :: FfiLightRef_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla_rust :: client :: FfiLightList { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla_rust :: client :: FfiLightList > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: client :: FfiLightList > >) { cxxbridge :: carla_rust_client_FfiLightList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } impl Drop for root :: carla_rust :: client :: FfiLightList { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: client :: FfiLightList) { unsafe { cxxbridge :: FfiLightList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla_rust :: client :: FfiLightManager { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: client :: FfiLightManager) { unsafe { cxxbridge :: FfiLightManager_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla_rust :: client :: FfiClient { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla_rust :: client :: FfiClient > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: client :: FfiClient > >) { cxxbridge :: carla_rust_client_FfiClient_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla_rust :: client :: FfiClient { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla_rust :: client :: FfiClient , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: client :: FfiClient > >) { cxxbridge :: carla_rust_client_FfiClient_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla_rust :: client :: FfiClient { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: client :: FfiClient) { unsafe { cxxbridge :: FfiClient_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla_rust :: client :: FfiTrafficLightList { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla_rust :: client :: FfiTrafficLightList > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: client :: FfiTrafficLightList > >) { cxxbridge :: carla_rust_client_FfiTrafficLightList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla_rust :: client :: FfiTrafficLightList { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla_rust :: client :: FfiTrafficLightList , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: client :: FfiTrafficLightList > >) { cxxbridge :: carla_rust_client_FfiTrafficLightList_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla_rust :: client :: FfiTrafficLightList { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: client :: FfiTrafficLightList) { unsafe { cxxbridge :: FfiTrafficLightList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla_rust :: client :: FfiTrafficLight { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: client :: FfiTrafficLight) { unsafe { cxxbridge :: FfiTrafficLight_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla_rust :: client :: FfiActorAttributeValueList { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: client :: FfiActorAttributeValueList) { unsafe { cxxbridge :: FfiActorAttributeValueList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla_rust :: client :: FfiWorld { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: client :: FfiWorld) { unsafe { cxxbridge :: FfiWorld_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } # [allow (unused_imports)] use self :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: root ; } pub mod geom { # [repr (C)] pub struct FfiLocation { pub x : f32 , pub y : f32 , pub z : f32 , } # [repr (C)] pub struct FfiTransform { pub location : root :: carla_rust :: geom :: FfiLocation , pub rotation : root :: carla :: geom :: Rotation , } # [repr (C)] pub struct FfiBoundingBox { pub location : root :: carla_rust :: geom :: FfiLocation , pub extent : root :: carla :: geom :: Vector3D , pub rotation : root :: carla :: geom :: Rotation , } impl FfiLocation { # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::geom::Location"] fn as_native (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::geom::Location"] fn carla_rust_geom_FfiLocation_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } } impl FfiTransform { # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::geom::Transform"] fn carla_rust_geom_FfiTransform_as_native_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::geom::Transform"] fn carla_rust_geom_FfiTransform_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::geom::Transform"] fn carla_rust_geom_FfiTransform_new1_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } } impl FfiBoundingBox { pub fn Contains (self : & root :: carla_rust :: geom :: FfiBoundingBox , in_world_point : & root :: carla_rust :: geom :: FfiLocation , in_bbox_to_world_transform : & root :: carla_rust :: geom :: FfiTransform) -> bool { cxxbridge :: carla_rust_geom_FfiBoundingBox_Contains_autocxx_wrapper_0xd539d5a17acbdd25 (self , in_world_point , in_bbox_to_world_transform) } pub fn GetLocalVertices (self : & root :: carla_rust :: geom :: FfiBoundingBox) -> cxx :: UniquePtr < cxx :: CxxVector < root :: carla_rust :: geom :: FfiLocation > > { cxxbridge :: carla_rust_geom_FfiBoundingBox_GetLocalVertices_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetWorldVertices (self : & root :: carla_rust :: geom :: FfiBoundingBox , in_bbox_to_world_tr : & root :: carla_rust :: geom :: FfiTransform) -> cxx :: UniquePtr < cxx :: CxxVector < root :: carla_rust :: geom :: FfiLocation > > { cxxbridge :: carla_rust_geom_FfiBoundingBox_GetWorldVertices_autocxx_wrapper_0xd539d5a17acbdd25 (self , in_bbox_to_world_tr) } pub fn as_native (self : & root :: carla_rust :: geom :: FfiBoundingBox) -> & root :: carla :: geom :: BoundingBox { cxxbridge :: carla_rust_geom_FfiBoundingBox_as_native_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn new (base : impl autocxx :: RValueParam < root :: carla :: geom :: BoundingBox >) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let mut space0 = autocxx :: RValueParamHandler :: default () ; let mut space0 = :: core :: pin :: Pin :: new_unchecked (& mut space0) ; space0 . as_mut () . populate (base) ; let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_geom_FfiBoundingBox_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this , space0 . get_ptr ()) }) } } pub fn new1 < 'a > (base : & 'a root :: carla :: geom :: BoundingBox) -> impl autocxx :: moveit :: new :: New < Output = Self > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_geom_FfiBoundingBox_new1_autocxx_wrapper_0xd539d5a17acbdd25 (this , base) }) } } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: geom :: FfiLocation { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: geom :: FfiLocation { cxxbridge :: FfiLocation_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: geom :: FfiLocation) { cxxbridge :: FfiLocation_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: geom :: FfiTransform { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: geom :: FfiTransform { cxxbridge :: FfiTransform_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: geom :: FfiTransform) { cxxbridge :: FfiTransform_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: geom :: FfiBoundingBox { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: geom :: FfiBoundingBox { cxxbridge :: FfiBoundingBox_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: geom :: FfiBoundingBox) { cxxbridge :: FfiBoundingBox_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla_rust :: geom :: FfiLocation { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla_rust :: geom :: FfiLocation > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: geom :: FfiLocation > >) { cxxbridge :: carla_rust_geom_FfiLocation_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla_rust :: geom :: FfiLocation { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla_rust :: geom :: FfiLocation , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: geom :: FfiLocation > >) { cxxbridge :: carla_rust_geom_FfiLocation_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla_rust :: geom :: FfiLocation { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: geom :: FfiLocation) { unsafe { cxxbridge :: FfiLocation_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla_rust :: geom :: FfiTransform { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla_rust :: geom :: FfiTransform > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: geom :: FfiTransform > >) { cxxbridge :: carla_rust_geom_FfiTransform_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla_rust :: geom :: FfiTransform { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla_rust :: geom :: FfiTransform , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: geom :: FfiTransform > >) { cxxbridge :: carla_rust_geom_FfiTransform_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla_rust :: geom :: FfiTransform { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: geom :: FfiTransform) { unsafe { cxxbridge :: FfiTransform_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla_rust :: geom :: FfiBoundingBox { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla_rust :: geom :: FfiBoundingBox > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: geom :: FfiBoundingBox > >) { cxxbridge :: carla_rust_geom_FfiBoundingBox_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla_rust :: geom :: FfiBoundingBox { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla_rust :: geom :: FfiBoundingBox , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: geom :: FfiBoundingBox > >) { cxxbridge :: carla_rust_geom_FfiBoundingBox_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla_rust :: geom :: FfiBoundingBox { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: geom :: FfiBoundingBox) { unsafe { cxxbridge :: FfiBoundingBox_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } # [allow (unused_imports)] use self :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: root ; } pub mod road { pub mod element { # [repr (C , align (8))] pub struct FfiLaneMarking { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } impl FfiLaneMarking { pub fn type_ (self : & root :: carla_rust :: road :: element :: FfiLaneMarking) -> root :: carla :: road :: element :: LaneMarking_Type { cxxbridge :: carla_rust_road_element_FfiLaneMarking_type_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn width (self : & root :: carla_rust :: road :: element :: FfiLaneMarking) -> f64 { cxxbridge :: carla_rust_road_element_FfiLaneMarking_width_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn clone < 'a > (self : & 'a root :: carla_rust :: road :: element :: FfiLaneMarking) -> impl autocxx :: moveit :: new :: New < Output = root :: carla_rust :: road :: element :: FfiLaneMarking > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_road_element_FfiLaneMarking_clone_autocxx_wrapper_0xd539d5a17acbdd25 (self , placement_return_type) }) } } pub fn new (base : impl autocxx :: RValueParam < root :: carla :: road :: element :: LaneMarking >) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let mut space0 = autocxx :: RValueParamHandler :: default () ; let mut space0 = :: core :: pin :: Pin :: new_unchecked (& mut space0) ; space0 . as_mut () . populate (base) ; let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_road_element_FfiLaneMarking_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this , space0 . get_ptr ()) }) } } pub fn new1 < 'a > (base : :: core :: pin :: Pin < & 'a mut root :: carla :: road :: element :: LaneMarking >) -> impl autocxx :: moveit :: new :: New < Output = Self > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_road_element_FfiLaneMarking_new1_autocxx_wrapper_0xd539d5a17acbdd25 (this , base) }) } } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: road :: element :: FfiLaneMarking { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: road :: element :: FfiLaneMarking { cxxbridge :: FfiLaneMarking_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: road :: element :: FfiLaneMarking) { cxxbridge :: FfiLaneMarking_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla_rust :: road :: element :: FfiLaneMarking { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla_rust :: road :: element :: FfiLaneMarking > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: road :: element :: FfiLaneMarking > >) { cxxbridge :: carla_rust_road_element_FfiLaneMarking_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla_rust :: road :: element :: FfiLaneMarking { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla_rust :: road :: element :: FfiLaneMarking , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: road :: element :: FfiLaneMarking > >) { cxxbridge :: carla_rust_road_element_FfiLaneMarking_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla_rust :: road :: element :: FfiLaneMarking { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: road :: element :: FfiLaneMarking) { unsafe { cxxbridge :: FfiLaneMarking_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } # [allow (unused_imports)] use self :: super :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: root ; } # [allow (unused_imports)] use self :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: root ; } pub mod rpc { pub type FfiActorId = u32 ; # [repr (C , align (8))] pub struct FfiVehiclePhysicsControl { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 168] } # [repr (C , align (8))] pub struct FfiEpisodeSettings { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 64] } # [repr (C)] pub struct FfiLabelledPoint { pub location : root :: carla_rust :: geom :: FfiLocation , pub label : root :: carla :: rpc :: CityObjectLabel , } # [repr (C , align (8))] pub struct FfiVehicleLightStateElementRef { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 8] } # [repr (C , align (8))] pub struct FfiVehicleLightStateList { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 24] } # [repr (C , align (8))] pub struct FfiEnvironmentObjectRef { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 8] } # [repr (C)] pub struct FfiRpcColor { pub r : u8 , pub g : u8 , pub b : u8 , } pub type FfiLightId = u32 ; # [repr (u8)] # [derive (Clone , Hash , PartialEq , Eq)] pub enum FfiRpcLightGroup { None = 0 , Vehicle = 1 , Street = 2 , Building = 3 , Other = 4 , } # [repr (C)] pub struct FfiRpcLightState { pub location : root :: carla_rust :: geom :: FfiLocation , pub intensity : f32 , pub id : root :: carla_rust :: rpc :: FfiLightId , pub group : root :: carla_rust :: rpc :: FfiRpcLightGroup , pub color : root :: carla_rust :: rpc :: FfiRpcColor , pub active : bool , } impl FfiVehiclePhysicsControl { pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_rpc_FfiVehiclePhysicsControl_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this) }) } } pub fn new1 < 'a > (in_torque_curve : & 'a cxx :: CxxVector < root :: carla :: geom :: Vector2D > , in_max_rpm : f32 , in_moi : f32 , in_damping_rate_full_throttle : f32 , in_damping_rate_zero_throttle_clutch_engaged : f32 , in_damping_rate_zero_throttle_clutch_disengaged : f32 , in_use_gear_autobox : bool , in_gear_switch_time : f32 , in_clutch_strength : f32 , in_final_ratio : f32 , in_forward_gears : :: core :: pin :: Pin < & 'a mut cxx :: CxxVector < root :: carla :: rpc :: GearPhysicsControl > > , in_mass : f32 , in_drag_coefficient : f32 , in_center_of_mass : :: core :: pin :: Pin < & 'a mut root :: carla_rust :: geom :: FfiLocation > , in_steering_curve : & 'a cxx :: CxxVector < root :: carla :: geom :: Vector2D > , in_wheels : :: core :: pin :: Pin < & 'a mut cxx :: CxxVector < root :: carla :: rpc :: WheelPhysicsControl > > , in_use_sweep_wheel_collision : bool) -> impl autocxx :: moveit :: new :: New < Output = Self > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_rpc_FfiVehiclePhysicsControl_new1_autocxx_wrapper_0xd539d5a17acbdd25 (this , in_torque_curve , in_max_rpm , in_moi , in_damping_rate_full_throttle , in_damping_rate_zero_throttle_clutch_engaged , in_damping_rate_zero_throttle_clutch_disengaged , in_use_gear_autobox , in_gear_switch_time , in_clutch_strength , in_final_ratio , in_forward_gears , in_mass , in_drag_coefficient , in_center_of_mass , in_steering_curve , in_wheels , in_use_sweep_wheel_collision) }) } } pub fn new2 (base : impl autocxx :: RValueParam < root :: carla :: rpc :: VehiclePhysicsControl >) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let mut space0 = autocxx :: RValueParamHandler :: default () ; let mut space0 = :: core :: pin :: Pin :: new_unchecked (& mut space0) ; space0 . as_mut () . populate (base) ; let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_rpc_FfiVehiclePhysicsControl_new2_autocxx_wrapper_0xd539d5a17acbdd25 (this , space0 . get_ptr ()) }) } } } impl FfiEpisodeSettings { pub fn inner (self : & root :: carla_rust :: rpc :: FfiEpisodeSettings) -> & root :: carla :: rpc :: EpisodeSettings { cxxbridge :: carla_rust_rpc_FfiEpisodeSettings_inner_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_rpc_FfiEpisodeSettings_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this) }) } } pub fn new1 (base : impl autocxx :: RValueParam < root :: carla :: rpc :: EpisodeSettings >) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let mut space0 = autocxx :: RValueParamHandler :: default () ; let mut space0 = :: core :: pin :: Pin :: new_unchecked (& mut space0) ; space0 . as_mut () . populate (base) ; let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_rpc_FfiEpisodeSettings_new1_autocxx_wrapper_0xd539d5a17acbdd25 (this , space0 . get_ptr ()) }) } } pub fn new2 (synchronous_mode : bool , no_rendering_mode : bool , fixed_delta_seconds : f64 , substepping : bool , max_substep_delta_time : f64 , max_substeps : autocxx :: c_int , max_culling_distance : f32 , deterministic_ragdolls : bool , tile_stream_distance : f32 , actor_active_distance : f32) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_rpc_FfiEpisodeSettings_new2_autocxx_wrapper_0xd539d5a17acbdd25 (this , synchronous_mode , no_rendering_mode , fixed_delta_seconds , substepping , max_substep_delta_time , max_substeps , max_culling_distance , deterministic_ragdolls , tile_stream_distance , actor_active_distance) }) } } } impl FfiLabelledPoint { pub fn new (orig : impl autocxx :: RValueParam < root :: carla :: rpc :: LabelledPoint >) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let mut space0 = autocxx :: RValueParamHandler :: default () ; let mut space0 = :: core :: pin :: Pin :: new_unchecked (& mut space0) ; space0 . as_mut () . populate (orig) ; let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_rpc_FfiLabelledPoint_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this , space0 . get_ptr ()) }) } } } impl FfiVehicleLightStateElementRef { pub fn new < 'a > (elem : & 'a root :: std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete) -> impl autocxx :: moveit :: new :: New < Output = Self > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_rpc_FfiVehicleLightStateElementRef_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this , elem) }) } } } impl FfiVehicleLightStateList { pub fn new (vec : impl autocxx :: RValueParam < cxx :: CxxVector < root :: std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete > >) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let mut space0 = autocxx :: RValueParamHandler :: default () ; let mut space0 = :: core :: pin :: Pin :: new_unchecked (& mut space0) ; space0 . as_mut () . populate (vec) ; let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_rpc_FfiVehicleLightStateList_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this , space0 . get_ptr ()) }) } } } impl FfiEnvironmentObjectRef { pub fn id (self : & root :: carla_rust :: rpc :: FfiEnvironmentObjectRef) -> u64 { cxxbridge :: carla_rust_rpc_FfiEnvironmentObjectRef_id_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn name (self : & root :: carla_rust :: rpc :: FfiEnvironmentObjectRef) -> & cxx :: CxxString { cxxbridge :: carla_rust_rpc_FfiEnvironmentObjectRef_name_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn type_ (self : & root :: carla_rust :: rpc :: FfiEnvironmentObjectRef) -> root :: carla :: rpc :: CityObjectLabel { cxxbridge :: carla_rust_rpc_FfiEnvironmentObjectRef_type_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn new < 'a > (orig : & 'a root :: carla :: rpc :: EnvironmentObject) -> impl autocxx :: moveit :: new :: New < Output = Self > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_rpc_FfiEnvironmentObjectRef_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this , orig) }) } } } impl FfiRpcColor { # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::rpc::Color"] fn to_native_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::rpc::Color"] fn carla_rust_rpc_FfiRpcColor_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } } impl FfiRpcLightState { # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::rpc::LightState"] fn carla_rust_rpc_FfiRpcLightState_as_native_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::rpc::LightState"] fn carla_rust_rpc_FfiRpcLightState_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: rpc :: FfiVehiclePhysicsControl { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: rpc :: FfiVehiclePhysicsControl { cxxbridge :: FfiVehiclePhysicsControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: rpc :: FfiVehiclePhysicsControl) { cxxbridge :: FfiVehiclePhysicsControl_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: rpc :: FfiEpisodeSettings { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: rpc :: FfiEpisodeSettings { cxxbridge :: FfiEpisodeSettings_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: rpc :: FfiEpisodeSettings) { cxxbridge :: FfiEpisodeSettings_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: rpc :: FfiLabelledPoint { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: rpc :: FfiLabelledPoint { cxxbridge :: FfiLabelledPoint_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: rpc :: FfiLabelledPoint) { cxxbridge :: FfiLabelledPoint_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: rpc :: FfiVehicleLightStateElementRef { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: rpc :: FfiVehicleLightStateElementRef { cxxbridge :: FfiVehicleLightStateElementRef_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: rpc :: FfiVehicleLightStateElementRef) { cxxbridge :: FfiVehicleLightStateElementRef_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: rpc :: FfiVehicleLightStateList { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: rpc :: FfiVehicleLightStateList { cxxbridge :: FfiVehicleLightStateList_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: rpc :: FfiVehicleLightStateList) { cxxbridge :: FfiVehicleLightStateList_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: rpc :: FfiEnvironmentObjectRef { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: rpc :: FfiEnvironmentObjectRef { cxxbridge :: FfiEnvironmentObjectRef_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: rpc :: FfiEnvironmentObjectRef) { cxxbridge :: FfiEnvironmentObjectRef_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: rpc :: FfiRpcColor { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: rpc :: FfiRpcColor { cxxbridge :: FfiRpcColor_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: rpc :: FfiRpcColor) { cxxbridge :: FfiRpcColor_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: rpc :: FfiRpcLightState { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: rpc :: FfiRpcLightState { cxxbridge :: FfiRpcLightState_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: rpc :: FfiRpcLightState) { cxxbridge :: FfiRpcLightState_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla_rust :: rpc :: FfiVehiclePhysicsControl { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla_rust :: rpc :: FfiVehiclePhysicsControl > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: rpc :: FfiVehiclePhysicsControl > >) { cxxbridge :: carla_rust_rpc_FfiVehiclePhysicsControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } impl Drop for root :: carla_rust :: rpc :: FfiVehiclePhysicsControl { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: rpc :: FfiVehiclePhysicsControl) { unsafe { cxxbridge :: FfiVehiclePhysicsControl_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla_rust :: rpc :: FfiEpisodeSettings { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla_rust :: rpc :: FfiEpisodeSettings > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: rpc :: FfiEpisodeSettings > >) { cxxbridge :: carla_rust_rpc_FfiEpisodeSettings_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla_rust :: rpc :: FfiEpisodeSettings { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla_rust :: rpc :: FfiEpisodeSettings , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: rpc :: FfiEpisodeSettings > >) { cxxbridge :: carla_rust_rpc_FfiEpisodeSettings_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla_rust :: rpc :: FfiEpisodeSettings { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: rpc :: FfiEpisodeSettings) { unsafe { cxxbridge :: FfiEpisodeSettings_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla_rust :: rpc :: FfiLabelledPoint { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla_rust :: rpc :: FfiLabelledPoint > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: rpc :: FfiLabelledPoint > >) { cxxbridge :: carla_rust_rpc_FfiLabelledPoint_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla_rust :: rpc :: FfiLabelledPoint { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla_rust :: rpc :: FfiLabelledPoint , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: rpc :: FfiLabelledPoint > >) { cxxbridge :: carla_rust_rpc_FfiLabelledPoint_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla_rust :: rpc :: FfiLabelledPoint { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: rpc :: FfiLabelledPoint) { unsafe { cxxbridge :: FfiLabelledPoint_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla_rust :: rpc :: FfiVehicleLightStateElementRef { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla_rust :: rpc :: FfiVehicleLightStateElementRef > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: rpc :: FfiVehicleLightStateElementRef > >) { cxxbridge :: carla_rust_rpc_FfiVehicleLightStateElementRef_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla_rust :: rpc :: FfiVehicleLightStateElementRef { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla_rust :: rpc :: FfiVehicleLightStateElementRef , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: rpc :: FfiVehicleLightStateElementRef > >) { cxxbridge :: carla_rust_rpc_FfiVehicleLightStateElementRef_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla_rust :: rpc :: FfiVehicleLightStateElementRef { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: rpc :: FfiVehicleLightStateElementRef) { unsafe { cxxbridge :: FfiVehicleLightStateElementRef_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla_rust :: rpc :: FfiVehicleLightStateList { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla_rust :: rpc :: FfiVehicleLightStateList > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: rpc :: FfiVehicleLightStateList > >) { cxxbridge :: carla_rust_rpc_FfiVehicleLightStateList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } impl Drop for root :: carla_rust :: rpc :: FfiVehicleLightStateList { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: rpc :: FfiVehicleLightStateList) { unsafe { cxxbridge :: FfiVehicleLightStateList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla_rust :: rpc :: FfiEnvironmentObjectRef { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla_rust :: rpc :: FfiEnvironmentObjectRef > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: rpc :: FfiEnvironmentObjectRef > >) { cxxbridge :: carla_rust_rpc_FfiEnvironmentObjectRef_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla_rust :: rpc :: FfiEnvironmentObjectRef { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla_rust :: rpc :: FfiEnvironmentObjectRef , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: rpc :: FfiEnvironmentObjectRef > >) { cxxbridge :: carla_rust_rpc_FfiEnvironmentObjectRef_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla_rust :: rpc :: FfiEnvironmentObjectRef { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: rpc :: FfiEnvironmentObjectRef) { unsafe { cxxbridge :: FfiEnvironmentObjectRef_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla_rust :: rpc :: FfiRpcColor { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla_rust :: rpc :: FfiRpcColor > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: rpc :: FfiRpcColor > >) { cxxbridge :: carla_rust_rpc_FfiRpcColor_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla_rust :: rpc :: FfiRpcColor { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla_rust :: rpc :: FfiRpcColor , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: rpc :: FfiRpcColor > >) { cxxbridge :: carla_rust_rpc_FfiRpcColor_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla_rust :: rpc :: FfiRpcColor { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: rpc :: FfiRpcColor) { unsafe { cxxbridge :: FfiRpcColor_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla_rust :: rpc :: FfiRpcLightState { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla_rust :: rpc :: FfiRpcLightState > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: rpc :: FfiRpcLightState > >) { cxxbridge :: carla_rust_rpc_FfiRpcLightState_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla_rust :: rpc :: FfiRpcLightState { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla_rust :: rpc :: FfiRpcLightState , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: rpc :: FfiRpcLightState > >) { cxxbridge :: carla_rust_rpc_FfiRpcLightState_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla_rust :: rpc :: FfiRpcLightState { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: rpc :: FfiRpcLightState) { unsafe { cxxbridge :: FfiRpcLightState_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } # [allow (unused_imports)] use self :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: root ; } pub mod sensor { # [repr (C , align (8))] pub struct FfiSensorData { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } impl FfiSensorData { pub fn GetFrame (self : & root :: carla_rust :: sensor :: FfiSensorData) -> usize { cxxbridge :: carla_rust_sensor_FfiSensorData_GetFrame_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = " Simulation-time when the data was generated."] pub fn GetTimestamp (self : & root :: carla_rust :: sensor :: FfiSensorData) -> f64 { cxxbridge :: carla_rust_sensor_FfiSensorData_GetTimestamp_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = " Sensor's transform when the data was generated."] pub fn GetSensorTransform (self : & root :: carla_rust :: sensor :: FfiSensorData) -> root :: carla_rust :: geom :: FfiTransform { cxxbridge :: carla_rust_sensor_FfiSensorData_GetSensorTransform_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: sensor :: FfiSensorData { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: sensor :: FfiSensorData { cxxbridge :: FfiSensorData_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: sensor :: FfiSensorData) { cxxbridge :: FfiSensorData_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } impl Drop for root :: carla_rust :: sensor :: FfiSensorData { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: sensor :: FfiSensorData) { unsafe { cxxbridge :: FfiSensorData_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } pub mod data { # [repr (C)] pub struct FfiColor { pub b : u8 , pub g : u8 , pub r : u8 , pub a : u8 , } # [repr (C , align (8))] pub struct FfiCollisionEvent { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } # [repr (C , align (8))] pub struct FfiImage { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } # [repr (C , align (8))] pub struct FfiLaneInvasionEvent { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } # [repr (C)] pub struct FfiLidarDetection { pub point : root :: carla_rust :: geom :: FfiLocation , pub intensity : f32 , } # [repr (C , align (8))] pub struct FfiObstacleDetectionEvent { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } # [repr (C)] pub struct FfiSemanticLidarDetection { pub point : root :: carla_rust :: geom :: FfiLocation , pub cos_inc_angle : f32 , pub object_idx : u32 , pub object_tag : u32 , } # [repr (C , align (8))] pub struct FfiLidarMeasurement { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } # [repr (C , align (8))] pub struct FfiSemanticLidarMeasurement { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } # [repr (C , align (8))] pub struct FfiRadarMeasurement { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } # [repr (C , align (8))] pub struct FfiGnssMeasurement { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } # [repr (C , align (8))] pub struct FfiImuMeasurement { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } impl FfiColor { # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::sensor::data::Color"] fn as_builtin (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: carla::sensor::data::Color"] fn carla_rust_sensor_data_FfiColor_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (_uhoh : autocxx :: BindingGenerationFailure) { } } impl FfiCollisionEvent { pub fn GetActor (self : & root :: carla_rust :: sensor :: data :: FfiCollisionEvent) -> cxx :: SharedPtr < root :: carla_rust :: client :: FfiActor > { cxxbridge :: carla_rust_sensor_data_FfiCollisionEvent_GetActor_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetOtherActor (self : & root :: carla_rust :: sensor :: data :: FfiCollisionEvent) -> cxx :: SharedPtr < root :: carla_rust :: client :: FfiActor > { cxxbridge :: carla_rust_sensor_data_FfiCollisionEvent_GetOtherActor_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetNormalImpulse (self : & root :: carla_rust :: sensor :: data :: FfiCollisionEvent) -> & root :: carla :: geom :: Vector3D { cxxbridge :: carla_rust_sensor_data_FfiCollisionEvent_GetNormalImpulse_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } } impl FfiImage { pub fn GetWidth (self : & root :: carla_rust :: sensor :: data :: FfiImage) -> usize { cxxbridge :: carla_rust_sensor_data_FfiImage_GetWidth_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetHeight (self : & root :: carla_rust :: sensor :: data :: FfiImage) -> usize { cxxbridge :: carla_rust_sensor_data_FfiImage_GetHeight_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn size (self : & root :: carla_rust :: sensor :: data :: FfiImage) -> usize { cxxbridge :: carla_rust_sensor_data_FfiImage_size_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn data (self : & root :: carla_rust :: sensor :: data :: FfiImage) -> * const root :: carla_rust :: sensor :: data :: FfiColor { cxxbridge :: carla_rust_sensor_data_FfiImage_data_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn at (self : & root :: carla_rust :: sensor :: data :: FfiImage , pos : usize) -> & root :: carla_rust :: sensor :: data :: FfiColor { cxxbridge :: carla_rust_sensor_data_FfiImage_at_autocxx_wrapper_0xd539d5a17acbdd25 (self , pos) } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } } impl FfiLaneInvasionEvent { pub fn GetActor (self : & root :: carla_rust :: sensor :: data :: FfiLaneInvasionEvent) -> cxx :: SharedPtr < root :: carla_rust :: client :: FfiActor > { cxxbridge :: carla_rust_sensor_data_FfiLaneInvasionEvent_GetActor_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetCrossedLaneMarkings (self : & root :: carla_rust :: sensor :: data :: FfiLaneInvasionEvent) -> & cxx :: CxxVector < root :: carla_rust :: road :: element :: FfiLaneMarking > { cxxbridge :: carla_rust_sensor_data_FfiLaneInvasionEvent_GetCrossedLaneMarkings_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } } impl FfiLidarDetection { pub fn as_builtin < 'a > (self : :: core :: pin :: Pin < & 'a mut root :: carla_rust :: sensor :: data :: FfiLidarDetection >) -> :: core :: pin :: Pin < & 'a mut root :: carla :: sensor :: data :: LidarDetection > { cxxbridge :: carla_rust_sensor_data_FfiLidarDetection_as_builtin_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn new (base : impl autocxx :: RValueParam < root :: carla :: sensor :: data :: LidarDetection >) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let mut space0 = autocxx :: RValueParamHandler :: default () ; let mut space0 = :: core :: pin :: Pin :: new_unchecked (& mut space0) ; space0 . as_mut () . populate (base) ; let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_sensor_data_FfiLidarDetection_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this , space0 . get_ptr ()) }) } } } impl FfiObstacleDetectionEvent { pub fn GetActor (self : & root :: carla_rust :: sensor :: data :: FfiObstacleDetectionEvent) -> cxx :: SharedPtr < root :: carla_rust :: client :: FfiActor > { cxxbridge :: carla_rust_sensor_data_FfiObstacleDetectionEvent_GetActor_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetOtherActor (self : & root :: carla_rust :: sensor :: data :: FfiObstacleDetectionEvent) -> cxx :: SharedPtr < root :: carla_rust :: client :: FfiActor > { cxxbridge :: carla_rust_sensor_data_FfiObstacleDetectionEvent_GetOtherActor_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetDistance (self : & root :: carla_rust :: sensor :: data :: FfiObstacleDetectionEvent) -> f32 { cxxbridge :: carla_rust_sensor_data_FfiObstacleDetectionEvent_GetDistance_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } } impl FfiSemanticLidarDetection { pub fn as_builtin < 'a > (self : :: core :: pin :: Pin < & 'a mut root :: carla_rust :: sensor :: data :: FfiSemanticLidarDetection >) -> :: core :: pin :: Pin < & 'a mut root :: carla :: sensor :: data :: SemanticLidarDetection > { cxxbridge :: carla_rust_sensor_data_FfiSemanticLidarDetection_as_builtin_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn new (base : impl autocxx :: RValueParam < root :: carla :: sensor :: data :: SemanticLidarDetection >) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let mut space0 = autocxx :: RValueParamHandler :: default () ; let mut space0 = :: core :: pin :: Pin :: new_unchecked (& mut space0) ; space0 . as_mut () . populate (base) ; let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_sensor_data_FfiSemanticLidarDetection_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this , space0 . get_ptr ()) }) } } } impl FfiLidarMeasurement { pub fn GetHorizontalAngle (self : & root :: carla_rust :: sensor :: data :: FfiLidarMeasurement) -> f32 { cxxbridge :: carla_rust_sensor_data_FfiLidarMeasurement_GetHorizontalAngle_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetChannelCount (self : & root :: carla_rust :: sensor :: data :: FfiLidarMeasurement) -> u32 { cxxbridge :: carla_rust_sensor_data_FfiLidarMeasurement_GetChannelCount_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetPointCount (self : & root :: carla_rust :: sensor :: data :: FfiLidarMeasurement , channel : usize) -> u32 { cxxbridge :: carla_rust_sensor_data_FfiLidarMeasurement_GetPointCount_autocxx_wrapper_0xd539d5a17acbdd25 (self , channel) } pub fn size (self : & root :: carla_rust :: sensor :: data :: FfiLidarMeasurement) -> usize { cxxbridge :: carla_rust_sensor_data_FfiLidarMeasurement_size_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn data (self : & root :: carla_rust :: sensor :: data :: FfiLidarMeasurement) -> * const root :: carla_rust :: sensor :: data :: FfiLidarDetection { cxxbridge :: carla_rust_sensor_data_FfiLidarMeasurement_data_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn at (self : & root :: carla_rust :: sensor :: data :: FfiLidarMeasurement , pos : usize) -> & root :: carla_rust :: sensor :: data :: FfiLidarDetection { cxxbridge :: carla_rust_sensor_data_FfiLidarMeasurement_at_autocxx_wrapper_0xd539d5a17acbdd25 (self , pos) } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } } impl FfiSemanticLidarMeasurement { pub fn GetHorizontalAngle (self : & root :: carla_rust :: sensor :: data :: FfiSemanticLidarMeasurement) -> f32 { cxxbridge :: carla_rust_sensor_data_FfiSemanticLidarMeasurement_GetHorizontalAngle_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetChannelCount (self : & root :: carla_rust :: sensor :: data :: FfiSemanticLidarMeasurement) -> u32 { cxxbridge :: carla_rust_sensor_data_FfiSemanticLidarMeasurement_GetChannelCount_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetPointCount (self : & root :: carla_rust :: sensor :: data :: FfiSemanticLidarMeasurement , channel : usize) -> u32 { cxxbridge :: carla_rust_sensor_data_FfiSemanticLidarMeasurement_GetPointCount_autocxx_wrapper_0xd539d5a17acbdd25 (self , channel) } pub fn size (self : & root :: carla_rust :: sensor :: data :: FfiSemanticLidarMeasurement) -> usize { cxxbridge :: carla_rust_sensor_data_FfiSemanticLidarMeasurement_size_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn data (self : & root :: carla_rust :: sensor :: data :: FfiSemanticLidarMeasurement) -> * const root :: carla_rust :: sensor :: data :: FfiSemanticLidarDetection { cxxbridge :: carla_rust_sensor_data_FfiSemanticLidarMeasurement_data_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn at (self : & root :: carla_rust :: sensor :: data :: FfiSemanticLidarMeasurement , pos : usize) -> & root :: carla_rust :: sensor :: data :: FfiSemanticLidarDetection { cxxbridge :: carla_rust_sensor_data_FfiSemanticLidarMeasurement_at_autocxx_wrapper_0xd539d5a17acbdd25 (self , pos) } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } } impl FfiRadarMeasurement { pub fn GetDetectionAmount (self : & root :: carla_rust :: sensor :: data :: FfiRadarMeasurement) -> usize { cxxbridge :: carla_rust_sensor_data_FfiRadarMeasurement_GetDetectionAmount_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn size (self : & root :: carla_rust :: sensor :: data :: FfiRadarMeasurement) -> usize { cxxbridge :: carla_rust_sensor_data_FfiRadarMeasurement_size_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn data (self : & root :: carla_rust :: sensor :: data :: FfiRadarMeasurement) -> * const root :: carla :: sensor :: data :: RadarDetection { cxxbridge :: carla_rust_sensor_data_FfiRadarMeasurement_data_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn at (self : & root :: carla_rust :: sensor :: data :: FfiRadarMeasurement , pos : usize) -> & root :: carla :: sensor :: data :: RadarDetection { cxxbridge :: carla_rust_sensor_data_FfiRadarMeasurement_at_autocxx_wrapper_0xd539d5a17acbdd25 (self , pos) } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } } impl FfiGnssMeasurement { pub fn GetGeoLocation (self : & root :: carla_rust :: sensor :: data :: FfiGnssMeasurement) -> root :: carla :: geom :: GeoLocation { cxxbridge :: carla_rust_sensor_data_FfiGnssMeasurement_GetGeoLocation_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetLongitude (self : & root :: carla_rust :: sensor :: data :: FfiGnssMeasurement) -> f64 { cxxbridge :: carla_rust_sensor_data_FfiGnssMeasurement_GetLongitude_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetLatitude (self : & root :: carla_rust :: sensor :: data :: FfiGnssMeasurement) -> f64 { cxxbridge :: carla_rust_sensor_data_FfiGnssMeasurement_GetLatitude_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetAltitude (self : & root :: carla_rust :: sensor :: data :: FfiGnssMeasurement) -> f64 { cxxbridge :: carla_rust_sensor_data_FfiGnssMeasurement_GetAltitude_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } } impl FfiImuMeasurement { pub fn GetAccelerometer (self : & root :: carla_rust :: sensor :: data :: FfiImuMeasurement) -> root :: carla :: geom :: Vector3D { cxxbridge :: carla_rust_sensor_data_FfiImuMeasurement_GetAccelerometer_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetGyroscope (self : & root :: carla_rust :: sensor :: data :: FfiImuMeasurement) -> root :: carla :: geom :: Vector3D { cxxbridge :: carla_rust_sensor_data_FfiImuMeasurement_GetGyroscope_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetCompass (self : & root :: carla_rust :: sensor :: data :: FfiImuMeasurement) -> f32 { cxxbridge :: carla_rust_sensor_data_FfiImuMeasurement_GetCompass_autocxx_wrapper_0xd539d5a17acbdd25 (self) } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: sensor :: data :: FfiColor { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: sensor :: data :: FfiColor { cxxbridge :: FfiColor_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: sensor :: data :: FfiColor) { cxxbridge :: FfiColor_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: sensor :: data :: FfiCollisionEvent { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: sensor :: data :: FfiCollisionEvent { cxxbridge :: FfiCollisionEvent_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: sensor :: data :: FfiCollisionEvent) { cxxbridge :: FfiCollisionEvent_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: sensor :: data :: FfiImage { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: sensor :: data :: FfiImage { cxxbridge :: FfiImage_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: sensor :: data :: FfiImage) { cxxbridge :: FfiImage_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: sensor :: data :: FfiLaneInvasionEvent { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: sensor :: data :: FfiLaneInvasionEvent { cxxbridge :: FfiLaneInvasionEvent_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: sensor :: data :: FfiLaneInvasionEvent) { cxxbridge :: FfiLaneInvasionEvent_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: sensor :: data :: FfiLidarDetection { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: sensor :: data :: FfiLidarDetection { cxxbridge :: FfiLidarDetection_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: sensor :: data :: FfiLidarDetection) { cxxbridge :: FfiLidarDetection_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: sensor :: data :: FfiObstacleDetectionEvent { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: sensor :: data :: FfiObstacleDetectionEvent { cxxbridge :: FfiObstacleDetectionEvent_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: sensor :: data :: FfiObstacleDetectionEvent) { cxxbridge :: FfiObstacleDetectionEvent_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: sensor :: data :: FfiSemanticLidarDetection { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: sensor :: data :: FfiSemanticLidarDetection { cxxbridge :: FfiSemanticLidarDetection_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: sensor :: data :: FfiSemanticLidarDetection) { cxxbridge :: FfiSemanticLidarDetection_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: sensor :: data :: FfiLidarMeasurement { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: sensor :: data :: FfiLidarMeasurement { cxxbridge :: FfiLidarMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: sensor :: data :: FfiLidarMeasurement) { cxxbridge :: FfiLidarMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: sensor :: data :: FfiSemanticLidarMeasurement { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: sensor :: data :: FfiSemanticLidarMeasurement { cxxbridge :: FfiSemanticLidarMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: sensor :: data :: FfiSemanticLidarMeasurement) { cxxbridge :: FfiSemanticLidarMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: sensor :: data :: FfiRadarMeasurement { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: sensor :: data :: FfiRadarMeasurement { cxxbridge :: FfiRadarMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: sensor :: data :: FfiRadarMeasurement) { cxxbridge :: FfiRadarMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: sensor :: data :: FfiGnssMeasurement { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: sensor :: data :: FfiGnssMeasurement { cxxbridge :: FfiGnssMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: sensor :: data :: FfiGnssMeasurement) { cxxbridge :: FfiGnssMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: sensor :: data :: FfiImuMeasurement { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: sensor :: data :: FfiImuMeasurement { cxxbridge :: FfiImuMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: sensor :: data :: FfiImuMeasurement) { cxxbridge :: FfiImuMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla_rust :: sensor :: data :: FfiColor { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla_rust :: sensor :: data :: FfiColor > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: sensor :: data :: FfiColor > >) { cxxbridge :: carla_rust_sensor_data_FfiColor_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla_rust :: sensor :: data :: FfiColor { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla_rust :: sensor :: data :: FfiColor , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: sensor :: data :: FfiColor > >) { cxxbridge :: carla_rust_sensor_data_FfiColor_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla_rust :: sensor :: data :: FfiColor { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: sensor :: data :: FfiColor) { unsafe { cxxbridge :: FfiColor_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla_rust :: sensor :: data :: FfiCollisionEvent { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: sensor :: data :: FfiCollisionEvent) { unsafe { cxxbridge :: FfiCollisionEvent_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla_rust :: sensor :: data :: FfiImage { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: sensor :: data :: FfiImage) { unsafe { cxxbridge :: FfiImage_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla_rust :: sensor :: data :: FfiLaneInvasionEvent { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: sensor :: data :: FfiLaneInvasionEvent) { unsafe { cxxbridge :: FfiLaneInvasionEvent_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla_rust :: sensor :: data :: FfiLidarDetection { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla_rust :: sensor :: data :: FfiLidarDetection > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: sensor :: data :: FfiLidarDetection > >) { cxxbridge :: carla_rust_sensor_data_FfiLidarDetection_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla_rust :: sensor :: data :: FfiLidarDetection { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla_rust :: sensor :: data :: FfiLidarDetection , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: sensor :: data :: FfiLidarDetection > >) { cxxbridge :: carla_rust_sensor_data_FfiLidarDetection_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla_rust :: sensor :: data :: FfiLidarDetection { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: sensor :: data :: FfiLidarDetection) { unsafe { cxxbridge :: FfiLidarDetection_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla_rust :: sensor :: data :: FfiObstacleDetectionEvent { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: sensor :: data :: FfiObstacleDetectionEvent) { unsafe { cxxbridge :: FfiObstacleDetectionEvent_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla_rust :: sensor :: data :: FfiSemanticLidarDetection { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla_rust :: sensor :: data :: FfiSemanticLidarDetection > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: sensor :: data :: FfiSemanticLidarDetection > >) { cxxbridge :: carla_rust_sensor_data_FfiSemanticLidarDetection_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla_rust :: sensor :: data :: FfiSemanticLidarDetection { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla_rust :: sensor :: data :: FfiSemanticLidarDetection , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: sensor :: data :: FfiSemanticLidarDetection > >) { cxxbridge :: carla_rust_sensor_data_FfiSemanticLidarDetection_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla_rust :: sensor :: data :: FfiSemanticLidarDetection { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: sensor :: data :: FfiSemanticLidarDetection) { unsafe { cxxbridge :: FfiSemanticLidarDetection_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla_rust :: sensor :: data :: FfiLidarMeasurement { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: sensor :: data :: FfiLidarMeasurement) { unsafe { cxxbridge :: FfiLidarMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla_rust :: sensor :: data :: FfiSemanticLidarMeasurement { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: sensor :: data :: FfiSemanticLidarMeasurement) { unsafe { cxxbridge :: FfiSemanticLidarMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla_rust :: sensor :: data :: FfiRadarMeasurement { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: sensor :: data :: FfiRadarMeasurement) { unsafe { cxxbridge :: FfiRadarMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla_rust :: sensor :: data :: FfiGnssMeasurement { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: sensor :: data :: FfiGnssMeasurement) { unsafe { cxxbridge :: FfiGnssMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla_rust :: sensor :: data :: FfiImuMeasurement { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: sensor :: data :: FfiImuMeasurement) { unsafe { cxxbridge :: FfiImuMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } # [allow (unused_imports)] use self :: super :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: root ; } # [allow (unused_imports)] use self :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: root ; } pub mod traffic_manager { pub type FfiPath = cxx :: CxxVector < root :: carla_rust :: geom :: FfiLocation > ; pub type FfiRoute = cxx :: CxxVector < u8 > ; # [repr (C , align (8))] pub struct FfiAction { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 24] } # [repr (C , align (8))] pub struct FfiActionBuffer { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 24] } # [repr (C , align (2))] pub struct FfiTrafficManager { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 2] } impl FfiAction { pub fn new (base : impl autocxx :: RValueParam < root :: std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete >) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let mut space0 = autocxx :: RValueParamHandler :: default () ; let mut space0 = :: core :: pin :: Pin :: new_unchecked (& mut space0) ; space0 . as_mut () . populate (base) ; let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_traffic_manager_FfiAction_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this , space0 . get_ptr ()) }) } } } impl FfiActionBuffer { pub fn size (self : & root :: carla_rust :: traffic_manager :: FfiActionBuffer) -> usize { cxxbridge :: carla_rust_traffic_manager_FfiActionBuffer_size_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn new (base : impl autocxx :: RValueParam < cxx :: CxxVector < root :: std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete > >) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let mut space0 = autocxx :: RValueParamHandler :: default () ; let mut space0 = :: core :: pin :: Pin :: new_unchecked (& mut space0) ; space0 . as_mut () . populate (base) ; let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_traffic_manager_FfiActionBuffer_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this , space0 . get_ptr ()) }) } } } impl FfiTrafficManager { pub fn Port (self : & root :: carla_rust :: traffic_manager :: FfiTrafficManager) -> u16 { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_Port_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn IsValidPort (self : & root :: carla_rust :: traffic_manager :: FfiTrafficManager) -> bool { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_IsValidPort_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn SetOSMMode (self : :: core :: pin :: Pin < & mut root :: carla_rust :: traffic_manager :: FfiTrafficManager > , mode_switch : bool) { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_SetOSMMode_autocxx_wrapper_0xd539d5a17acbdd25 (self , mode_switch) } pub fn SetCustomPath (self : :: core :: pin :: Pin < & mut root :: carla_rust :: traffic_manager :: FfiTrafficManager > , actor : & root :: carla_rust :: client :: FfiActor , path : & cxx :: CxxVector < root :: carla_rust :: geom :: FfiLocation > , empty_buffer : bool) { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_SetCustomPath_autocxx_wrapper_0xd539d5a17acbdd25 (self , actor , path , empty_buffer) } pub fn RemoveUploadPath (self : :: core :: pin :: Pin < & mut root :: carla_rust :: traffic_manager :: FfiTrafficManager > , actor_id : & u32 , remove_path : bool) { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_RemoveUploadPath_autocxx_wrapper_0xd539d5a17acbdd25 (self , actor_id , remove_path) } pub fn UpdateUploadPath (self : :: core :: pin :: Pin < & mut root :: carla_rust :: traffic_manager :: FfiTrafficManager > , actor_id : & u32 , path : & cxx :: CxxVector < root :: carla_rust :: geom :: FfiLocation >) { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_UpdateUploadPath_autocxx_wrapper_0xd539d5a17acbdd25 (self , actor_id , path) } pub fn SetImportedRoute (self : :: core :: pin :: Pin < & mut root :: carla_rust :: traffic_manager :: FfiTrafficManager > , actor : & root :: carla_rust :: client :: FfiActor , route : impl autocxx :: ValueParam < cxx :: CxxVector < u8 > > , empty_buffer : bool) { let mut space0 = autocxx :: ValueParamHandler :: default () ; let mut space0 = unsafe { :: core :: pin :: Pin :: new_unchecked (& mut space0) } ; unsafe { space0 . as_mut () . populate (route) ; cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_SetImportedRoute_autocxx_wrapper_0xd539d5a17acbdd25 (self , actor , space0 . get_ptr () , empty_buffer) } } pub fn RemoveImportedRoute (self : :: core :: pin :: Pin < & mut root :: carla_rust :: traffic_manager :: FfiTrafficManager > , actor_id : & u32 , remove_path : bool) { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_RemoveImportedRoute_autocxx_wrapper_0xd539d5a17acbdd25 (self , actor_id , remove_path) } pub fn UpdateImportedRoute (self : :: core :: pin :: Pin < & mut root :: carla_rust :: traffic_manager :: FfiTrafficManager > , actor_id : & u32 , route : impl autocxx :: ValueParam < cxx :: CxxVector < u8 > >) { let mut space0 = autocxx :: ValueParamHandler :: default () ; let mut space0 = unsafe { :: core :: pin :: Pin :: new_unchecked (& mut space0) } ; unsafe { space0 . as_mut () . populate (route) ; cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_UpdateImportedRoute_autocxx_wrapper_0xd539d5a17acbdd25 (self , actor_id , space0 . get_ptr ()) } } pub fn SetRespawnDormantVehicles (self : :: core :: pin :: Pin < & mut root :: carla_rust :: traffic_manager :: FfiTrafficManager > , mode_switch : bool) { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_SetRespawnDormantVehicles_autocxx_wrapper_0xd539d5a17acbdd25 (self , mode_switch) } pub fn SetBoundariesRespawnDormantVehicles (self : :: core :: pin :: Pin < & mut root :: carla_rust :: traffic_manager :: FfiTrafficManager > , lower_bound : f32 , upper_bound : f32) { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_SetBoundariesRespawnDormantVehicles_autocxx_wrapper_0xd539d5a17acbdd25 (self , lower_bound , upper_bound) } pub fn SetMaxBoundaries (self : :: core :: pin :: Pin < & mut root :: carla_rust :: traffic_manager :: FfiTrafficManager > , lower : f32 , upper : f32) { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_SetMaxBoundaries_autocxx_wrapper_0xd539d5a17acbdd25 (self , lower , upper) } pub fn SetHybridPhysicsMode (self : :: core :: pin :: Pin < & mut root :: carla_rust :: traffic_manager :: FfiTrafficManager > , mode_switch : bool) { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_SetHybridPhysicsMode_autocxx_wrapper_0xd539d5a17acbdd25 (self , mode_switch) } pub fn SetHybridPhysicsRadius (self : :: core :: pin :: Pin < & mut root :: carla_rust :: traffic_manager :: FfiTrafficManager > , radius : f32) { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_SetHybridPhysicsRadius_autocxx_wrapper_0xd539d5a17acbdd25 (self , radius) } pub unsafe fn RegisterVehicles (self : :: core :: pin :: Pin < & mut root :: carla_rust :: traffic_manager :: FfiTrafficManager > , actor_ptr : * const cxx :: SharedPtr < root :: carla_rust :: client :: FfiActor > , size : usize) { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_RegisterVehicles_autocxx_wrapper_0xd539d5a17acbdd25 (self , actor_ptr , size) } pub unsafe fn UnregisterVehicles (self : :: core :: pin :: Pin < & mut root :: carla_rust :: traffic_manager :: FfiTrafficManager > , actor_ptr : * const cxx :: SharedPtr < root :: carla_rust :: client :: FfiActor > , size : usize) { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_UnregisterVehicles_autocxx_wrapper_0xd539d5a17acbdd25 (self , actor_ptr , size) } pub fn SetPercentageSpeedDifference (self : :: core :: pin :: Pin < & mut root :: carla_rust :: traffic_manager :: FfiTrafficManager > , actor : & root :: carla_rust :: client :: FfiActor , percentage : f32) { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_SetPercentageSpeedDifference_autocxx_wrapper_0xd539d5a17acbdd25 (self , actor , percentage) } pub fn SetLaneOffset (self : :: core :: pin :: Pin < & mut root :: carla_rust :: traffic_manager :: FfiTrafficManager > , actor : & root :: carla_rust :: client :: FfiActor , offset : f32) { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_SetLaneOffset_autocxx_wrapper_0xd539d5a17acbdd25 (self , actor , offset) } pub fn SetDesiredSpeed (self : :: core :: pin :: Pin < & mut root :: carla_rust :: traffic_manager :: FfiTrafficManager > , actor : & root :: carla_rust :: client :: FfiActor , value : f32) { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_SetDesiredSpeed_autocxx_wrapper_0xd539d5a17acbdd25 (self , actor , value) } pub fn SetGlobalPercentageSpeedDifference (self : :: core :: pin :: Pin < & mut root :: carla_rust :: traffic_manager :: FfiTrafficManager > , percentage : f32) { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_SetGlobalPercentageSpeedDifference_autocxx_wrapper_0xd539d5a17acbdd25 (self , percentage) } pub fn SetGlobalLaneOffset (self : :: core :: pin :: Pin < & mut root :: carla_rust :: traffic_manager :: FfiTrafficManager > , offset : f32) { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_SetGlobalLaneOffset_autocxx_wrapper_0xd539d5a17acbdd25 (self , offset) } pub fn SetUpdateVehicleLights (self : :: core :: pin :: Pin < & mut root :: carla_rust :: traffic_manager :: FfiTrafficManager > , actor : & root :: carla_rust :: client :: FfiActor , do_update : bool) { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_SetUpdateVehicleLights_autocxx_wrapper_0xd539d5a17acbdd25 (self , actor , do_update) } pub fn SetCollisionDetection (self : :: core :: pin :: Pin < & mut root :: carla_rust :: traffic_manager :: FfiTrafficManager > , reference_actor : & root :: carla_rust :: client :: FfiActor , other_actor : & root :: carla_rust :: client :: FfiActor , detect_collision : bool) { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_SetCollisionDetection_autocxx_wrapper_0xd539d5a17acbdd25 (self , reference_actor , other_actor , detect_collision) } pub fn SetForceLaneChange (self : :: core :: pin :: Pin < & mut root :: carla_rust :: traffic_manager :: FfiTrafficManager > , actor : & root :: carla_rust :: client :: FfiActor , direction : bool) { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_SetForceLaneChange_autocxx_wrapper_0xd539d5a17acbdd25 (self , actor , direction) } pub fn SetAutoLaneChange (self : :: core :: pin :: Pin < & mut root :: carla_rust :: traffic_manager :: FfiTrafficManager > , actor : & root :: carla_rust :: client :: FfiActor , enable : bool) { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_SetAutoLaneChange_autocxx_wrapper_0xd539d5a17acbdd25 (self , actor , enable) } pub fn SetDistanceToLeadingVehicle (self : :: core :: pin :: Pin < & mut root :: carla_rust :: traffic_manager :: FfiTrafficManager > , actor : & root :: carla_rust :: client :: FfiActor , distance : f32) { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_SetDistanceToLeadingVehicle_autocxx_wrapper_0xd539d5a17acbdd25 (self , actor , distance) } pub fn SetPercentageIgnoreWalkers (self : :: core :: pin :: Pin < & mut root :: carla_rust :: traffic_manager :: FfiTrafficManager > , actor : & root :: carla_rust :: client :: FfiActor , perc : f32) { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_SetPercentageIgnoreWalkers_autocxx_wrapper_0xd539d5a17acbdd25 (self , actor , perc) } pub fn SetPercentageIgnoreVehicles (self : :: core :: pin :: Pin < & mut root :: carla_rust :: traffic_manager :: FfiTrafficManager > , actor : & root :: carla_rust :: client :: FfiActor , perc : f32) { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_SetPercentageIgnoreVehicles_autocxx_wrapper_0xd539d5a17acbdd25 (self , actor , perc) } pub fn SetPercentageRunningSign (self : :: core :: pin :: Pin < & mut root :: carla_rust :: traffic_manager :: FfiTrafficManager > , actor : & root :: carla_rust :: client :: FfiActor , perc : f32) { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_SetPercentageRunningSign_autocxx_wrapper_0xd539d5a17acbdd25 (self , actor , perc) } pub fn SetPercentageRunningLight (self : :: core :: pin :: Pin < & mut root :: carla_rust :: traffic_manager :: FfiTrafficManager > , actor : & root :: carla_rust :: client :: FfiActor , perc : f32) { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_SetPercentageRunningLight_autocxx_wrapper_0xd539d5a17acbdd25 (self , actor , perc) } pub fn SetSynchronousMode (self : :: core :: pin :: Pin < & mut root :: carla_rust :: traffic_manager :: FfiTrafficManager > , mode : bool) { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_SetSynchronousMode_autocxx_wrapper_0xd539d5a17acbdd25 (self , mode) } pub fn SetSynchronousModeTimeOutInMiliSecond (self : :: core :: pin :: Pin < & mut root :: carla_rust :: traffic_manager :: FfiTrafficManager > , time : f64) { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_SetSynchronousModeTimeOutInMiliSecond_autocxx_wrapper_0xd539d5a17acbdd25 (self , time) } pub fn SynchronousTick (self : :: core :: pin :: Pin < & mut root :: carla_rust :: traffic_manager :: FfiTrafficManager >) -> bool { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_SynchronousTick_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn SetGlobalDistanceToLeadingVehicle (self : :: core :: pin :: Pin < & mut root :: carla_rust :: traffic_manager :: FfiTrafficManager > , distance : f32) { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_SetGlobalDistanceToLeadingVehicle_autocxx_wrapper_0xd539d5a17acbdd25 (self , distance) } pub fn SetKeepRightPercentage (self : :: core :: pin :: Pin < & mut root :: carla_rust :: traffic_manager :: FfiTrafficManager > , actor : & root :: carla_rust :: client :: FfiActor , percentage : f32) { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_SetKeepRightPercentage_autocxx_wrapper_0xd539d5a17acbdd25 (self , actor , percentage) } pub fn SetRandomLeftLaneChangePercentage (self : :: core :: pin :: Pin < & mut root :: carla_rust :: traffic_manager :: FfiTrafficManager > , actor : & root :: carla_rust :: client :: FfiActor , percentage : f32) { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_SetRandomLeftLaneChangePercentage_autocxx_wrapper_0xd539d5a17acbdd25 (self , actor , percentage) } pub fn SetRandomRightLaneChangePercentage (self : :: core :: pin :: Pin < & mut root :: carla_rust :: traffic_manager :: FfiTrafficManager > , actor : & root :: carla_rust :: client :: FfiActor , percentage : f32) { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_SetRandomRightLaneChangePercentage_autocxx_wrapper_0xd539d5a17acbdd25 (self , actor , percentage) } pub fn SetRandomDeviceSeed (self : :: core :: pin :: Pin < & mut root :: carla_rust :: traffic_manager :: FfiTrafficManager > , seed : u64) { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_SetRandomDeviceSeed_autocxx_wrapper_0xd539d5a17acbdd25 (self , seed) } pub fn ShutDown (self : :: core :: pin :: Pin < & mut root :: carla_rust :: traffic_manager :: FfiTrafficManager >) { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_ShutDown_autocxx_wrapper_0xd539d5a17acbdd25 (self) } pub fn GetNextAction < 'a > (self : :: core :: pin :: Pin < & 'a mut root :: carla_rust :: traffic_manager :: FfiTrafficManager > , actor_id : & 'a u32) -> impl autocxx :: moveit :: new :: New < Output = root :: carla_rust :: traffic_manager :: FfiAction > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_GetNextAction_autocxx_wrapper_0xd539d5a17acbdd25 (self , actor_id , placement_return_type) }) } } pub fn GetActionBuffer < 'a > (self : :: core :: pin :: Pin < & 'a mut root :: carla_rust :: traffic_manager :: FfiTrafficManager > , actor_id : & 'a u32) -> impl autocxx :: moveit :: new :: New < Output = root :: carla_rust :: traffic_manager :: FfiActionBuffer > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_GetActionBuffer_autocxx_wrapper_0xd539d5a17acbdd25 (self , actor_id , placement_return_type) }) } } pub fn new (base : impl autocxx :: RValueParam < root :: carla :: traffic_manager :: TrafficManager >) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let mut space0 = autocxx :: RValueParamHandler :: default () ; let mut space0 = :: core :: pin :: Pin :: new_unchecked (& mut space0) ; space0 . as_mut () . populate (base) ; let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (this , space0 . get_ptr ()) }) } } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: traffic_manager :: FfiAction { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: traffic_manager :: FfiAction { cxxbridge :: FfiAction_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: traffic_manager :: FfiAction) { cxxbridge :: FfiAction_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: traffic_manager :: FfiActionBuffer { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: traffic_manager :: FfiActionBuffer { cxxbridge :: FfiActionBuffer_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: traffic_manager :: FfiActionBuffer) { cxxbridge :: FfiActionBuffer_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: carla_rust :: traffic_manager :: FfiTrafficManager { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: carla_rust :: traffic_manager :: FfiTrafficManager { cxxbridge :: FfiTrafficManager_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: carla_rust :: traffic_manager :: FfiTrafficManager) { cxxbridge :: FfiTrafficManager_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0) } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla_rust :: traffic_manager :: FfiActionBuffer { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla_rust :: traffic_manager :: FfiActionBuffer > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: traffic_manager :: FfiActionBuffer > >) { cxxbridge :: carla_rust_traffic_manager_FfiActionBuffer_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } impl Drop for root :: carla_rust :: traffic_manager :: FfiActionBuffer { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: traffic_manager :: FfiActionBuffer) { unsafe { cxxbridge :: FfiActionBuffer_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: carla_rust :: traffic_manager :: FfiTrafficManager { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: carla_rust :: traffic_manager :: FfiTrafficManager > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: traffic_manager :: FfiTrafficManager > >) { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: carla_rust :: traffic_manager :: FfiTrafficManager { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: carla_rust :: traffic_manager :: FfiTrafficManager , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: carla_rust :: traffic_manager :: FfiTrafficManager > >) { cxxbridge :: carla_rust_traffic_manager_FfiTrafficManager_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: carla_rust :: traffic_manager :: FfiTrafficManager { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: traffic_manager :: FfiTrafficManager) { unsafe { cxxbridge :: FfiTrafficManager_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } impl Drop for root :: carla_rust :: traffic_manager :: FfiAction { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: carla_rust :: traffic_manager :: FfiAction) { unsafe { cxxbridge :: FfiAction_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (self) } } } # [allow (unused_imports)] use self :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: root ; } pub mod utils { # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] pub struct VectorRef ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: root ; } # [allow (unused_imports)] use self :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: root ; } pub mod std { pub type ostream = root :: std_basic_ostream_char_AutocxxConcrete ; # [allow (unused_imports)] use self :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: root ; } # [allow (unused_imports)] use self :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: root ; } } # [cxx :: bridge] mod cxxbridge { impl UniquePtr < Vector3D > { } impl SharedPtr < Vector3D > { } impl WeakPtr < Vector3D > { } impl CxxVector < Vector3D > { } impl UniquePtr < Vector3DInt > { } impl SharedPtr < Vector3DInt > { } impl WeakPtr < Vector3DInt > { } impl CxxVector < Vector3DInt > { } impl UniquePtr < Math > { } impl SharedPtr < Math > { } impl WeakPtr < Math > { } impl CxxVector < Math > { } impl UniquePtr < Rotation > { } impl SharedPtr < Rotation > { } impl WeakPtr < Rotation > { } impl CxxVector < Rotation > { } impl UniquePtr < BoundingBox > { } impl SharedPtr < BoundingBox > { } impl WeakPtr < BoundingBox > { } impl CxxVector < BoundingBox > { } impl UniquePtr < Vector2D > { } impl SharedPtr < Vector2D > { } impl WeakPtr < Vector2D > { } impl CxxVector < Vector2D > { } impl UniquePtr < MeshMaterial > { } impl SharedPtr < MeshMaterial > { } impl WeakPtr < MeshMaterial > { } impl CxxVector < MeshMaterial > { } impl UniquePtr < Mesh > { } impl SharedPtr < Mesh > { } impl WeakPtr < Mesh > { } impl CxxVector < Mesh > { } impl UniquePtr < GeoLocation > { } impl SharedPtr < GeoLocation > { } impl WeakPtr < GeoLocation > { } impl CxxVector < GeoLocation > { } impl UniquePtr < CubicPolynomial > { } impl SharedPtr < CubicPolynomial > { } impl WeakPtr < CubicPolynomial > { } impl UniquePtr < TrafficLightState > { } impl SharedPtr < TrafficLightState > { } impl WeakPtr < TrafficLightState > { } impl CxxVector < TrafficLightState > { } impl UniquePtr < VehicleControl > { } impl SharedPtr < VehicleControl > { } impl WeakPtr < VehicleControl > { } impl CxxVector < VehicleControl > { } impl UniquePtr < ActorAttributeType > { } impl SharedPtr < ActorAttributeType > { } impl WeakPtr < ActorAttributeType > { } impl CxxVector < ActorAttributeType > { } impl UniquePtr < AttachmentType > { } impl SharedPtr < AttachmentType > { } impl WeakPtr < AttachmentType > { } impl CxxVector < AttachmentType > { } impl UniquePtr < EpisodeSettings > { } impl SharedPtr < EpisodeSettings > { } impl WeakPtr < EpisodeSettings > { } impl CxxVector < EpisodeSettings > { } impl UniquePtr < CityObjectLabel > { } impl SharedPtr < CityObjectLabel > { } impl WeakPtr < CityObjectLabel > { } impl CxxVector < CityObjectLabel > { } impl UniquePtr < LabelledPoint > { } impl SharedPtr < LabelledPoint > { } impl WeakPtr < LabelledPoint > { } impl CxxVector < LabelledPoint > { } impl UniquePtr < GearPhysicsControl > { } impl SharedPtr < GearPhysicsControl > { } impl WeakPtr < GearPhysicsControl > { } impl CxxVector < GearPhysicsControl > { } impl UniquePtr < WheelPhysicsControl > { } impl SharedPtr < WheelPhysicsControl > { } impl WeakPtr < WheelPhysicsControl > { } impl CxxVector < WheelPhysicsControl > { } impl UniquePtr < WeatherParameters > { } impl SharedPtr < WeatherParameters > { } impl WeakPtr < WeatherParameters > { } impl CxxVector < WeatherParameters > { } impl UniquePtr < VehicleLightState > { } impl SharedPtr < VehicleLightState > { } impl WeakPtr < VehicleLightState > { } impl CxxVector < VehicleLightState > { } impl UniquePtr < AckermannControllerSettings > { } impl SharedPtr < AckermannControllerSettings > { } impl WeakPtr < AckermannControllerSettings > { } impl CxxVector < AckermannControllerSettings > { } impl UniquePtr < VehicleAckermannControl > { } impl SharedPtr < VehicleAckermannControl > { } impl WeakPtr < VehicleAckermannControl > { } impl CxxVector < VehicleAckermannControl > { } impl UniquePtr < VehicleDoor > { } impl SharedPtr < VehicleDoor > { } impl WeakPtr < VehicleDoor > { } impl CxxVector < VehicleDoor > { } impl UniquePtr < VehicleWheelLocation > { } impl SharedPtr < VehicleWheelLocation > { } impl WeakPtr < VehicleWheelLocation > { } impl CxxVector < VehicleWheelLocation > { } impl UniquePtr < OpendriveGenerationParameters > { } impl SharedPtr < OpendriveGenerationParameters > { } impl WeakPtr < OpendriveGenerationParameters > { } impl CxxVector < OpendriveGenerationParameters > { } impl UniquePtr < SensorData > { } impl SharedPtr < SensorData > { } impl WeakPtr < SensorData > { } impl UniquePtr < SemanticLidarDetection > { } impl SharedPtr < SemanticLidarDetection > { } impl WeakPtr < SemanticLidarDetection > { } impl CxxVector < SemanticLidarDetection > { } impl UniquePtr < SemanticLidarData > { } impl SharedPtr < SemanticLidarData > { } impl WeakPtr < SemanticLidarData > { } impl UniquePtr < LidarDetection > { } impl SharedPtr < LidarDetection > { } impl WeakPtr < LidarDetection > { } impl CxxVector < LidarDetection > { } impl UniquePtr < LidarData > { } impl SharedPtr < LidarData > { } impl WeakPtr < LidarData > { } impl UniquePtr < IMUMeasurement > { } impl SharedPtr < IMUMeasurement > { } impl WeakPtr < IMUMeasurement > { } impl UniquePtr < GnssMeasurement > { } impl SharedPtr < GnssMeasurement > { } impl WeakPtr < GnssMeasurement > { } impl UniquePtr < LidarMeasurement > { } impl SharedPtr < LidarMeasurement > { } impl WeakPtr < LidarMeasurement > { } impl UniquePtr < SemanticLidarMeasurement > { } impl SharedPtr < SemanticLidarMeasurement > { } impl WeakPtr < SemanticLidarMeasurement > { } impl UniquePtr < RadarDetection > { } impl SharedPtr < RadarDetection > { } impl WeakPtr < RadarDetection > { } impl CxxVector < RadarDetection > { } impl UniquePtr < RadarData > { } impl SharedPtr < RadarData > { } impl WeakPtr < RadarData > { } impl UniquePtr < RadarMeasurement > { } impl SharedPtr < RadarMeasurement > { } impl WeakPtr < RadarMeasurement > { } impl UniquePtr < Landmark > { } impl SharedPtr < Landmark > { } impl WeakPtr < Landmark > { } impl UniquePtr < Timestamp > { } impl SharedPtr < Timestamp > { } impl WeakPtr < Timestamp > { } impl CxxVector < Timestamp > { } impl UniquePtr < WorldSnapshot > { } impl SharedPtr < WorldSnapshot > { } impl WeakPtr < WorldSnapshot > { } impl CxxVector < WorldSnapshot > { } impl UniquePtr < Light > { } impl SharedPtr < Light > { } impl WeakPtr < Light > { } impl UniquePtr < Vehicle > { } impl SharedPtr < Vehicle > { } impl WeakPtr < Vehicle > { } impl UniquePtr < TrafficSign > { } impl SharedPtr < TrafficSign > { } impl WeakPtr < TrafficSign > { } impl UniquePtr < TrafficLight > { } impl SharedPtr < TrafficLight > { } impl WeakPtr < TrafficLight > { } impl UniquePtr < Walker > { } impl SharedPtr < Walker > { } impl WeakPtr < Walker > { } impl UniquePtr < ActorBlueprint > { } impl SharedPtr < ActorBlueprint > { } impl WeakPtr < ActorBlueprint > { } impl UniquePtr < ActorList > { } impl SharedPtr < ActorList > { } impl WeakPtr < ActorList > { } impl UniquePtr < LaneInvasionSensor > { } impl SharedPtr < LaneInvasionSensor > { } impl WeakPtr < LaneInvasionSensor > { } impl UniquePtr < LaneMarking_Type > { } impl SharedPtr < LaneMarking_Type > { } impl WeakPtr < LaneMarking_Type > { } impl CxxVector < LaneMarking_Type > { } impl UniquePtr < LaneMarking_Color > { } impl SharedPtr < LaneMarking_Color > { } impl WeakPtr < LaneMarking_Color > { } impl CxxVector < LaneMarking_Color > { } impl UniquePtr < LaneMarking_LaneChange > { } impl SharedPtr < LaneMarking_LaneChange > { } impl WeakPtr < LaneMarking_LaneChange > { } impl CxxVector < LaneMarking_LaneChange > { } impl UniquePtr < RoadOption > { } impl SharedPtr < RoadOption > { } impl WeakPtr < RoadOption > { } impl CxxVector < RoadOption > { } impl UniquePtr < FfiLocation > { } impl SharedPtr < FfiLocation > { } impl WeakPtr < FfiLocation > { } impl CxxVector < FfiLocation > { } impl UniquePtr < FfiTransform > { } impl SharedPtr < FfiTransform > { } impl WeakPtr < FfiTransform > { } impl CxxVector < FfiTransform > { } impl UniquePtr < FfiBoundingBox > { } impl SharedPtr < FfiBoundingBox > { } impl WeakPtr < FfiBoundingBox > { } impl CxxVector < FfiBoundingBox > { } impl UniquePtr < FfiVehiclePhysicsControl > { } impl SharedPtr < FfiVehiclePhysicsControl > { } impl WeakPtr < FfiVehiclePhysicsControl > { } impl CxxVector < FfiVehiclePhysicsControl > { } impl UniquePtr < FfiEpisodeSettings > { } impl SharedPtr < FfiEpisodeSettings > { } impl WeakPtr < FfiEpisodeSettings > { } impl CxxVector < FfiEpisodeSettings > { } impl UniquePtr < FfiLabelledPoint > { } impl SharedPtr < FfiLabelledPoint > { } impl WeakPtr < FfiLabelledPoint > { } impl CxxVector < FfiLabelledPoint > { } impl UniquePtr < FfiVehicleLightStateElementRef > { } impl SharedPtr < FfiVehicleLightStateElementRef > { } impl WeakPtr < FfiVehicleLightStateElementRef > { } impl CxxVector < FfiVehicleLightStateElementRef > { } impl UniquePtr < FfiVehicleLightStateList > { } impl SharedPtr < FfiVehicleLightStateList > { } impl WeakPtr < FfiVehicleLightStateList > { } impl CxxVector < FfiVehicleLightStateList > { } impl UniquePtr < FfiEnvironmentObjectRef > { } impl SharedPtr < FfiEnvironmentObjectRef > { } impl WeakPtr < FfiEnvironmentObjectRef > { } impl CxxVector < FfiEnvironmentObjectRef > { } impl UniquePtr < FfiRpcColor > { } impl SharedPtr < FfiRpcColor > { } impl WeakPtr < FfiRpcColor > { } impl CxxVector < FfiRpcColor > { } impl UniquePtr < FfiRpcLightGroup > { } impl SharedPtr < FfiRpcLightGroup > { } impl WeakPtr < FfiRpcLightGroup > { } impl CxxVector < FfiRpcLightGroup > { } impl UniquePtr < FfiRpcLightState > { } impl SharedPtr < FfiRpcLightState > { } impl WeakPtr < FfiRpcLightState > { } impl CxxVector < FfiRpcLightState > { } impl UniquePtr < FfiColor > { } impl SharedPtr < FfiColor > { } impl WeakPtr < FfiColor > { } impl CxxVector < FfiColor > { } impl UniquePtr < FfiCollisionEvent > { } impl SharedPtr < FfiCollisionEvent > { } impl WeakPtr < FfiCollisionEvent > { } impl UniquePtr < FfiImage > { } impl SharedPtr < FfiImage > { } impl WeakPtr < FfiImage > { } impl UniquePtr < FfiLaneInvasionEvent > { } impl SharedPtr < FfiLaneInvasionEvent > { } impl WeakPtr < FfiLaneInvasionEvent > { } impl UniquePtr < FfiLidarDetection > { } impl SharedPtr < FfiLidarDetection > { } impl WeakPtr < FfiLidarDetection > { } impl CxxVector < FfiLidarDetection > { } impl UniquePtr < FfiObstacleDetectionEvent > { } impl SharedPtr < FfiObstacleDetectionEvent > { } impl WeakPtr < FfiObstacleDetectionEvent > { } impl UniquePtr < FfiSemanticLidarDetection > { } impl SharedPtr < FfiSemanticLidarDetection > { } impl WeakPtr < FfiSemanticLidarDetection > { } impl CxxVector < FfiSemanticLidarDetection > { } impl UniquePtr < FfiLidarMeasurement > { } impl SharedPtr < FfiLidarMeasurement > { } impl WeakPtr < FfiLidarMeasurement > { } impl UniquePtr < FfiSemanticLidarMeasurement > { } impl SharedPtr < FfiSemanticLidarMeasurement > { } impl WeakPtr < FfiSemanticLidarMeasurement > { } impl UniquePtr < FfiRadarMeasurement > { } impl SharedPtr < FfiRadarMeasurement > { } impl WeakPtr < FfiRadarMeasurement > { } impl UniquePtr < FfiGnssMeasurement > { } impl SharedPtr < FfiGnssMeasurement > { } impl WeakPtr < FfiGnssMeasurement > { } impl UniquePtr < FfiImuMeasurement > { } impl SharedPtr < FfiImuMeasurement > { } impl WeakPtr < FfiImuMeasurement > { } impl UniquePtr < FfiSensorData > { } impl SharedPtr < FfiSensorData > { } impl WeakPtr < FfiSensorData > { } impl UniquePtr < FfiActorAttributeValue > { } impl SharedPtr < FfiActorAttributeValue > { } impl WeakPtr < FfiActorAttributeValue > { } impl CxxVector < FfiActorAttributeValue > { } impl UniquePtr < FfiActorAttributeValueList > { } impl SharedPtr < FfiActorAttributeValueList > { } impl WeakPtr < FfiActorAttributeValueList > { } impl UniquePtr < FfiActor > { } impl SharedPtr < FfiActor > { } impl WeakPtr < FfiActor > { } impl UniquePtr < ListenCallback > { } impl SharedPtr < ListenCallback > { } impl WeakPtr < ListenCallback > { } impl CxxVector < ListenCallback > { } impl UniquePtr < FfiWaypointList > { } impl SharedPtr < FfiWaypointList > { } impl WeakPtr < FfiWaypointList > { } impl CxxVector < FfiWaypointList > { } impl UniquePtr < FfiWaypointPair > { } impl SharedPtr < FfiWaypointPair > { } impl WeakPtr < FfiWaypointPair > { } impl CxxVector < FfiWaypointPair > { } impl UniquePtr < FfiJunction > { } impl SharedPtr < FfiJunction > { } impl WeakPtr < FfiJunction > { } impl UniquePtr < FfiLandmarkList > { } impl SharedPtr < FfiLandmarkList > { } impl WeakPtr < FfiLandmarkList > { } impl CxxVector < FfiLandmarkList > { } impl UniquePtr < FfiWaypoint > { } impl SharedPtr < FfiWaypoint > { } impl WeakPtr < FfiWaypoint > { } impl UniquePtr < FfiLandmark > { } impl SharedPtr < FfiLandmark > { } impl WeakPtr < FfiLandmark > { } impl UniquePtr < FfiTransformList > { } impl SharedPtr < FfiTransformList > { } impl WeakPtr < FfiTransformList > { } impl CxxVector < FfiTransformList > { } impl UniquePtr < FfiMap > { } impl SharedPtr < FfiMap > { } impl WeakPtr < FfiMap > { } impl CxxVector < FfiMap > { } impl UniquePtr < FfiTrafficSign > { } impl SharedPtr < FfiTrafficSign > { } impl WeakPtr < FfiTrafficSign > { } impl UniquePtr < FfiVehicle > { } impl SharedPtr < FfiVehicle > { } impl WeakPtr < FfiVehicle > { } impl UniquePtr < FfiSensor > { } impl SharedPtr < FfiSensor > { } impl WeakPtr < FfiSensor > { } impl UniquePtr < FfiBlueprintLibrary > { } impl SharedPtr < FfiBlueprintLibrary > { } impl WeakPtr < FfiBlueprintLibrary > { } impl UniquePtr < FfiActorList > { } impl SharedPtr < FfiActorList > { } impl WeakPtr < FfiActorList > { } impl UniquePtr < FfiBoundingBoxList > { } impl SharedPtr < FfiBoundingBoxList > { } impl WeakPtr < FfiBoundingBoxList > { } impl CxxVector < FfiBoundingBoxList > { } impl UniquePtr < FfiLabelledPointList > { } impl SharedPtr < FfiLabelledPointList > { } impl WeakPtr < FfiLabelledPointList > { } impl CxxVector < FfiLabelledPointList > { } impl UniquePtr < FfiEnvironmentObjectList > { } impl SharedPtr < FfiEnvironmentObjectList > { } impl WeakPtr < FfiEnvironmentObjectList > { } impl CxxVector < FfiEnvironmentObjectList > { } impl UniquePtr < FfiActorVec > { } impl SharedPtr < FfiActorVec > { } impl WeakPtr < FfiActorVec > { } impl CxxVector < FfiActorVec > { } impl UniquePtr < FfiWorldSnapshot > { } impl SharedPtr < FfiWorldSnapshot > { } impl WeakPtr < FfiWorldSnapshot > { } impl CxxVector < FfiWorldSnapshot > { } impl UniquePtr < FfiClientLightState > { } impl SharedPtr < FfiClientLightState > { } impl WeakPtr < FfiClientLightState > { } impl CxxVector < FfiClientLightState > { } impl UniquePtr < FfiLightRef > { } impl SharedPtr < FfiLightRef > { } impl WeakPtr < FfiLightRef > { } impl CxxVector < FfiLightRef > { } impl UniquePtr < FfiLightList > { } impl SharedPtr < FfiLightList > { } impl WeakPtr < FfiLightList > { } impl CxxVector < FfiLightList > { } impl UniquePtr < FfiLightManager > { } impl SharedPtr < FfiLightManager > { } impl WeakPtr < FfiLightManager > { } impl UniquePtr < FfiWorld > { } impl SharedPtr < FfiWorld > { } impl WeakPtr < FfiWorld > { } impl CxxVector < FfiWorld > { } impl UniquePtr < FfiClient > { } impl SharedPtr < FfiClient > { } impl WeakPtr < FfiClient > { } impl CxxVector < FfiClient > { } impl UniquePtr < FfiTrafficLightList > { } impl SharedPtr < FfiTrafficLightList > { } impl WeakPtr < FfiTrafficLightList > { } impl CxxVector < FfiTrafficLightList > { } impl UniquePtr < FfiTrafficLight > { } impl SharedPtr < FfiTrafficLight > { } impl WeakPtr < FfiTrafficLight > { } impl UniquePtr < FfiLaneMarking > { } impl SharedPtr < FfiLaneMarking > { } impl WeakPtr < FfiLaneMarking > { } impl CxxVector < FfiLaneMarking > { } impl UniquePtr < FfiAction > { } impl SharedPtr < FfiAction > { } impl WeakPtr < FfiAction > { } impl UniquePtr < FfiActionBuffer > { } impl SharedPtr < FfiActionBuffer > { } impl WeakPtr < FfiActionBuffer > { } impl CxxVector < FfiActionBuffer > { } impl UniquePtr < FfiTrafficManager > { } impl SharedPtr < FfiTrafficManager > { } impl WeakPtr < FfiTrafficManager > { } impl CxxVector < FfiTrafficManager > { } impl UniquePtr < std_pair_float_float_AutocxxConcrete > { } impl SharedPtr < std_pair_float_float_AutocxxConcrete > { } impl WeakPtr < std_pair_float_float_AutocxxConcrete > { } impl UniquePtr < VehicleLightState_LightState > { } impl SharedPtr < VehicleLightState_LightState > { } impl WeakPtr < VehicleLightState_LightState > { } impl CxxVector < VehicleLightState_LightState > { } impl UniquePtr < std_basic_ostream_char_AutocxxConcrete > { } impl SharedPtr < std_basic_ostream_char_AutocxxConcrete > { } impl WeakPtr < std_basic_ostream_char_AutocxxConcrete > { } impl UniquePtr < RawData > { } impl SharedPtr < RawData > { } impl WeakPtr < RawData > { } impl CxxVector < RawData > { } impl UniquePtr < carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete > { } impl SharedPtr < carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete > { } impl WeakPtr < carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete > { } impl UniquePtr < SignalOrientation > { } impl SharedPtr < SignalOrientation > { } impl WeakPtr < SignalOrientation > { } impl CxxVector < SignalOrientation > { } impl UniquePtr < LaneValidity > { } impl SharedPtr < LaneValidity > { } impl WeakPtr < LaneValidity > { } impl CxxVector < LaneValidity > { } impl UniquePtr < EpisodeState > { } impl SharedPtr < EpisodeState > { } impl WeakPtr < EpisodeState > { } impl UniquePtr < VehiclePhysicsControl > { } impl SharedPtr < VehiclePhysicsControl > { } impl WeakPtr < VehiclePhysicsControl > { } impl CxxVector < VehiclePhysicsControl > { } impl UniquePtr < VehicleFailureState > { } impl SharedPtr < VehicleFailureState > { } impl WeakPtr < VehicleFailureState > { } impl CxxVector < VehicleFailureState > { } impl UniquePtr < ActorInitializer > { } impl SharedPtr < ActorInitializer > { } impl WeakPtr < ActorInitializer > { } impl CxxVector < ActorInitializer > { } impl UniquePtr < WalkerControl > { } impl SharedPtr < WalkerControl > { } impl WeakPtr < WalkerControl > { } impl CxxVector < WalkerControl > { } impl UniquePtr < WalkerBoneControlOut > { } impl SharedPtr < WalkerBoneControlOut > { } impl WeakPtr < WalkerBoneControlOut > { } impl CxxVector < WalkerBoneControlOut > { } impl UniquePtr < WalkerBoneControlIn > { } impl SharedPtr < WalkerBoneControlIn > { } impl WeakPtr < WalkerBoneControlIn > { } impl CxxVector < WalkerBoneControlIn > { } impl UniquePtr < ActorDescription > { } impl SharedPtr < ActorDescription > { } impl WeakPtr < ActorDescription > { } impl CxxVector < ActorDescription > { } impl UniquePtr < ActorDefinition > { } impl SharedPtr < ActorDefinition > { } impl WeakPtr < ActorDefinition > { } impl CxxVector < ActorDefinition > { } impl UniquePtr < std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete > { } impl SharedPtr < std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete > { } impl WeakPtr < std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete > { } impl UniquePtr < EnvironmentObject > { } impl SharedPtr < EnvironmentObject > { } impl WeakPtr < EnvironmentObject > { } impl UniquePtr < Lane_LaneType > { } impl SharedPtr < Lane_LaneType > { } impl WeakPtr < Lane_LaneType > { } impl CxxVector < Lane_LaneType > { } impl UniquePtr < World > { } impl SharedPtr < World > { } impl WeakPtr < World > { } impl CxxVector < World > { } impl UniquePtr < LaneMarking > { } impl SharedPtr < LaneMarking > { } impl WeakPtr < LaneMarking > { } impl CxxVector < LaneMarking > { } impl UniquePtr < std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete > { } impl SharedPtr < std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete > { } impl WeakPtr < std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete > { } impl UniquePtr < TrafficManager > { } impl SharedPtr < TrafficManager > { } impl WeakPtr < TrafficManager > { } impl CxxVector < TrafficManager > { } unsafe extern "C++" { fn autocxx_make_string_0xd539d5a17acbdd25 (str_ : & str) -> UniquePtr < CxxString > ; pub unsafe fn Vector3D_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut Vector3D ; pub unsafe fn Vector3D_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut Vector3D) ; # [namespace = "carla::geom"] type Vector3D = super :: bindgen :: root :: carla :: geom :: Vector3D ; pub unsafe fn Vector3DInt_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut Vector3DInt ; pub unsafe fn Vector3DInt_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut Vector3DInt) ; # [namespace = "carla::geom"] type Vector3DInt = super :: bindgen :: root :: carla :: geom :: Vector3DInt ; pub unsafe fn Math_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut Math ; pub unsafe fn Math_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut Math) ; # [namespace = "carla::geom"] type Math = super :: bindgen :: root :: carla :: geom :: Math ; pub unsafe fn Rotation_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut Rotation ; pub unsafe fn Rotation_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut Rotation) ; # [namespace = "carla::geom"] type Rotation = super :: bindgen :: root :: carla :: geom :: Rotation ; pub unsafe fn BoundingBox_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut BoundingBox ; pub unsafe fn BoundingBox_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut BoundingBox) ; # [namespace = "carla::geom"] type BoundingBox = super :: bindgen :: root :: carla :: geom :: BoundingBox ; pub unsafe fn Vector2D_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut Vector2D ; pub unsafe fn Vector2D_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut Vector2D) ; # [namespace = "carla::geom"] type Vector2D = super :: bindgen :: root :: carla :: geom :: Vector2D ; pub unsafe fn MeshMaterial_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut MeshMaterial ; pub unsafe fn MeshMaterial_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut MeshMaterial) ; # [namespace = "carla::geom"] # [doc = " Material that references the vertex index start and end of\n a mesh where it is affecting."] type MeshMaterial = super :: bindgen :: root :: carla :: geom :: MeshMaterial ; pub unsafe fn Mesh_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut Mesh ; pub unsafe fn Mesh_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut Mesh) ; # [namespace = "carla::geom"] # [doc = " Mesh data container, validator and exporter."] type Mesh = super :: bindgen :: root :: carla :: geom :: Mesh ; pub unsafe fn GeoLocation_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut GeoLocation ; pub unsafe fn GeoLocation_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut GeoLocation) ; # [namespace = "carla::geom"] type GeoLocation = super :: bindgen :: root :: carla :: geom :: GeoLocation ; pub unsafe fn CubicPolynomial_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut CubicPolynomial ; pub unsafe fn CubicPolynomial_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut CubicPolynomial) ; # [namespace = "carla::geom"] # [doc = " Describes a Cubic Polynomial so:\n f(x) = a + bx + cx^2 + dx^3"] type CubicPolynomial = super :: bindgen :: root :: carla :: geom :: CubicPolynomial ; # [namespace = "carla::geom"] pub fn SquaredLength (self : & Vector3D) -> f32 ; # [namespace = "carla::geom"] pub fn Length (self : & Vector3D) -> f32 ; # [namespace = "carla::geom"] pub fn Abs (self : & Vector3D) -> Vector3D ; # [namespace = "carla::geom"] pub fn MakeUnitVector (self : & Vector3D) -> Vector3D ; # [namespace = "carla::geom"] pub fn MakeSafeUnitVector (self : & Vector3D , epsilon : f32) -> Vector3D ; pub unsafe fn carla_geom_Vector3D_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Vector3D) ; pub unsafe fn carla_geom_Vector3D_new1_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Vector3D , ix : f32 , iy : f32 , iz : f32) ; pub fn carla_geom_Vector3DInt_SquaredLength_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & Vector3DInt) -> i64 ; pub fn carla_geom_Vector3DInt_Length_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & Vector3DInt) -> f64 ; pub unsafe fn carla_geom_Vector3DInt_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Vector3DInt) ; pub unsafe fn carla_geom_Vector3DInt_new1_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Vector3DInt , ix : i32 , iy : i32 , iz : i32) ; pub fn Cross_autocxx_wrapper_0xd539d5a17acbdd25 (a : & Vector3D , b : & Vector3D) -> Vector3D ; pub fn Dot_autocxx_wrapper_0xd539d5a17acbdd25 (a : & Vector3D , b : & Vector3D) -> f32 ; pub fn Dot2D_autocxx_wrapper_0xd539d5a17acbdd25 (a : & Vector3D , b : & Vector3D) -> f32 ; pub fn DistanceSquared_autocxx_wrapper_0xd539d5a17acbdd25 (a : & Vector3D , b : & Vector3D) -> f32 ; pub fn DistanceSquared2D_autocxx_wrapper_0xd539d5a17acbdd25 (a : & Vector3D , b : & Vector3D) -> f32 ; pub fn Distance_autocxx_wrapper_0xd539d5a17acbdd25 (a : & Vector3D , b : & Vector3D) -> f32 ; pub fn Distance2D_autocxx_wrapper_0xd539d5a17acbdd25 (a : & Vector3D , b : & Vector3D) -> f32 ; # [doc = " Returns the angle between 2 vectors in radians"] pub fn GetVectorAngle_autocxx_wrapper_0xd539d5a17acbdd25 (a : & Vector3D , b : & Vector3D) -> f64 ; # [doc = " Returns a pair containing:\n - @b first:  distance from v to p' where p' = p projected on segment\n   (w - v)\n - @b second: Euclidean distance from p to p'\n   @param p point to calculate distance\n   @param v first point of the segment\n   @param w second point of the segment"] pub fn DistanceSegmentToPoint_autocxx_wrapper_0xd539d5a17acbdd25 (p : & Vector3D , v : & Vector3D , w : & Vector3D) -> UniquePtr < std_pair_float_float_AutocxxConcrete > ; # [doc = " Returns a pair containing:\n - @b first:  distance across the arc from start_pos to p' where p' = p\n projected on Arc\n - @b second: Euclidean distance from p to p'"] pub fn DistanceArcToPoint_autocxx_wrapper_0xd539d5a17acbdd25 (p : Vector3D , start_pos : Vector3D , length : f32 , heading : f32 , curvature : f32) -> UniquePtr < std_pair_float_float_AutocxxConcrete > ; pub fn RotatePointOnOrigin2D_autocxx_wrapper_0xd539d5a17acbdd25 (p : Vector3D , angle : f32) -> Vector3D ; # [doc = " Compute the unit vector pointing towards the X-axis of @a rotation."] pub fn GetForwardVector_autocxx_wrapper_0xd539d5a17acbdd25 (rotation : & Rotation) -> Vector3D ; # [doc = " Compute the unit vector pointing towards the Y-axis of @a rotation."] pub fn GetRightVector_autocxx_wrapper_0xd539d5a17acbdd25 (rotation : & Rotation) -> Vector3D ; # [doc = " Compute the unit vector pointing towards the Y-axis of @a rotation."] pub fn GetUpVector_autocxx_wrapper_0xd539d5a17acbdd25 (rotation : & Rotation) -> Vector3D ; pub fn carla_geom_Rotation_GetForwardVector_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & Rotation) -> Vector3D ; pub fn carla_geom_Rotation_GetRightVector_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & Rotation) -> Vector3D ; pub fn carla_geom_Rotation_GetUpVector_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & Rotation) -> Vector3D ; # [namespace = "carla::geom"] pub fn RotateVector (self : & Rotation , in_point : Pin < & mut Vector3D >) ; # [namespace = "carla::geom"] # [cxx_name = "RotateVector"] pub fn RotateVector1 (self : & Rotation , in_point : & Vector3D) -> Vector3D ; # [namespace = "carla::geom"] pub fn InverseRotateVector (self : & Rotation , in_point : Pin < & mut Vector3D >) ; pub unsafe fn carla_geom_Rotation_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Rotation) ; pub unsafe fn carla_geom_Rotation_new1_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Rotation , p : f32 , y : f32 , r : f32) ; pub unsafe fn carla_geom_BoundingBox_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut BoundingBox) ; pub unsafe fn carla_geom_BoundingBox_new3_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut BoundingBox , in_extent : & Vector3D) ; pub fn carla_geom_Vector2D_SquaredLength_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & Vector2D) -> f32 ; pub fn carla_geom_Vector2D_Length_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & Vector2D) -> f32 ; pub fn carla_geom_Vector2D_MakeUnitVector_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & Vector2D) -> Vector2D ; pub unsafe fn carla_geom_Vector2D_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Vector2D) ; pub unsafe fn carla_geom_Vector2D_new1_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Vector2D , ix : f32 , iy : f32) ; pub unsafe fn carla_geom_MeshMaterial_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut MeshMaterial , new_name : & CxxString , start : usize , end : usize) ; # [namespace = "carla::geom"] # [doc = " Check if the mesh can be valid or not."] pub fn IsValid (self : & Mesh) -> bool ; # [namespace = "carla::geom"] # [doc = " Adds a triangle strip to the mesh, vertex order is counterclockwise."] pub fn AddTriangleStrip (self : Pin < & mut Mesh > , vertices : & CxxVector < Vector3D >) ; # [namespace = "carla::geom"] # [doc = " Adds a triangle fan to the mesh, vertex order is counterclockwise."] pub fn AddTriangleFan (self : Pin < & mut Mesh > , vertices : & CxxVector < Vector3D >) ; # [namespace = "carla::geom"] # [doc = " Appends a vertex to the vertices list."] pub fn AddVertex (self : Pin < & mut Mesh > , vertex : Vector3D) ; # [namespace = "carla::geom"] # [doc = " Appends a vertex to the vertices list."] pub fn AddVertices (self : Pin < & mut Mesh > , vertices : & CxxVector < Vector3D >) ; # [namespace = "carla::geom"] # [doc = " Appends a normal to the normal list."] pub fn AddNormal (self : Pin < & mut Mesh > , normal : Vector3D) ; # [namespace = "carla::geom"] # [doc = " Appends a index to the indexes list."] pub fn AddIndex (self : Pin < & mut Mesh > , index : usize) ; # [namespace = "carla::geom"] # [doc = " Appends a vertex to the vertices list, they will be read 3 in 3."] pub fn AddUV (self : Pin < & mut Mesh > , uv : Vector2D) ; # [namespace = "carla::geom"] # [doc = " Starts applying a new material to the new added triangles."] pub fn AddMaterial (self : Pin < & mut Mesh > , material_name : & CxxString) ; # [namespace = "carla::geom"] # [doc = " Stops applying the material to the new added triangles."] pub fn EndMaterial (self : Pin < & mut Mesh >) ; # [doc = " Returns a string containing the mesh encoded in OBJ.\n Units are in meters. It is in Unreal space."] pub fn GenerateOBJ_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & Mesh) -> UniquePtr < CxxString > ; # [doc = " Returns a string containing the mesh encoded in OBJ.\n Units are in meters. This function exports the OBJ file\n specifically to be consumed by Recast library.\n Changes the build face direction and the coordinate space."] pub fn GenerateOBJForRecast_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & Mesh) -> UniquePtr < CxxString > ; # [doc = " Returns a string containing the mesh encoded in PLY.\n Units are in meters."] pub fn GeneratePLY_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & Mesh) -> UniquePtr < CxxString > ; # [namespace = "carla::geom"] pub fn GetVertices < 'a > (self : & 'a Mesh) -> & 'a CxxVector < Vector3D > ; # [namespace = "carla::geom"] # [cxx_name = "GetVertices"] pub fn GetVertices1 < 'a > (self : Pin < & 'a mut Mesh >) -> Pin < & 'a mut CxxVector < Vector3D > > ; # [namespace = "carla::geom"] pub fn GetVerticesNum (self : & Mesh) -> usize ; # [namespace = "carla::geom"] pub fn GetNormals < 'a > (self : & 'a Mesh) -> & 'a CxxVector < Vector3D > ; # [namespace = "carla::geom"] pub fn GetIndexes < 'a > (self : & 'a Mesh) -> & 'a CxxVector < usize > ; # [namespace = "carla::geom"] pub fn GetIndexesNum (self : & Mesh) -> usize ; # [namespace = "carla::geom"] pub fn GetUVs < 'a > (self : & 'a Mesh) -> & 'a CxxVector < Vector2D > ; # [namespace = "carla::geom"] pub fn GetMaterials < 'a > (self : & 'a Mesh) -> & 'a CxxVector < MeshMaterial > ; # [namespace = "carla::geom"] # [doc = " Returns the index of the last added vertex (number of vertices)."] pub fn GetLastVertexIndex (self : & Mesh) -> usize ; pub unsafe fn carla_geom_Mesh_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Mesh , vertices : & CxxVector < Vector3D > , normals : & CxxVector < Vector3D > , indexes : & CxxVector < usize > , uvs : & CxxVector < Vector2D >) ; pub unsafe fn carla_geom_GeoLocation_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut GeoLocation) ; pub unsafe fn carla_geom_GeoLocation_new1_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut GeoLocation , latitude : f64 , longitude : f64 , altitude : f64) ; # [namespace = "carla::geom"] pub fn GetA (self : & CubicPolynomial) -> f64 ; # [namespace = "carla::geom"] pub fn GetB (self : & CubicPolynomial) -> f64 ; # [namespace = "carla::geom"] pub fn GetC (self : & CubicPolynomial) -> f64 ; # [namespace = "carla::geom"] pub fn GetD (self : & CubicPolynomial) -> f64 ; # [namespace = "carla::geom"] pub fn GetS (self : & CubicPolynomial) -> f64 ; # [namespace = "carla::geom"] pub fn Set (self : Pin < & mut CubicPolynomial > , a : & f64 , b : & f64 , c : & f64 , d : & f64 , s : & f64) ; # [namespace = "carla::geom"] # [cxx_name = "Set"] pub fn Set1 (self : Pin < & mut CubicPolynomial > , a : & f64 , b : & f64 , c : & f64 , d : & f64) ; # [namespace = "carla::geom"] # [doc = " Evaluates f(x) = a + bx + cx^2 + dx^3"] pub fn Evaluate (self : & CubicPolynomial , x : & f64) -> f64 ; # [namespace = "carla::geom"] # [doc = " Evaluates the tangent using df/dx = b + 2cx + 3dx^2"] pub fn Tangent (self : & CubicPolynomial , x : & f64) -> f64 ; pub unsafe fn carla_geom_CubicPolynomial_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut CubicPolynomial) ; pub unsafe fn carla_geom_CubicPolynomial_new1_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut CubicPolynomial , arg1 : & CubicPolynomial) ; pub unsafe fn carla_geom_CubicPolynomial_new2_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut CubicPolynomial , a : & f64 , b : & f64 , c : & f64 , d : & f64) ; pub unsafe fn carla_geom_CubicPolynomial_new3_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut CubicPolynomial , a : & f64 , b : & f64 , c : & f64 , d : & f64 , s : & f64) ; # [namespace = "carla::rpc"] type TrafficLightState = super :: bindgen :: root :: carla :: rpc :: TrafficLightState ; pub unsafe fn VehicleControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut VehicleControl ; pub unsafe fn VehicleControl_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut VehicleControl) ; # [namespace = "carla::rpc"] type VehicleControl = super :: bindgen :: root :: carla :: rpc :: VehicleControl ; # [namespace = "carla::rpc"] type ActorAttributeType = super :: bindgen :: root :: carla :: rpc :: ActorAttributeType ; # [namespace = "carla::rpc"] type AttachmentType = super :: bindgen :: root :: carla :: rpc :: AttachmentType ; pub unsafe fn EpisodeSettings_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut EpisodeSettings ; pub unsafe fn EpisodeSettings_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut EpisodeSettings) ; # [namespace = "carla::rpc"] type EpisodeSettings = super :: bindgen :: root :: carla :: rpc :: EpisodeSettings ; # [namespace = "carla::rpc"] type CityObjectLabel = super :: bindgen :: root :: carla :: rpc :: CityObjectLabel ; pub unsafe fn LabelledPoint_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut LabelledPoint ; pub unsafe fn LabelledPoint_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut LabelledPoint) ; # [namespace = "carla::rpc"] type LabelledPoint = super :: bindgen :: root :: carla :: rpc :: LabelledPoint ; pub unsafe fn GearPhysicsControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut GearPhysicsControl ; pub unsafe fn GearPhysicsControl_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut GearPhysicsControl) ; # [namespace = "carla::rpc"] type GearPhysicsControl = super :: bindgen :: root :: carla :: rpc :: GearPhysicsControl ; pub unsafe fn WheelPhysicsControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut WheelPhysicsControl ; pub unsafe fn WheelPhysicsControl_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut WheelPhysicsControl) ; # [namespace = "carla::rpc"] type WheelPhysicsControl = super :: bindgen :: root :: carla :: rpc :: WheelPhysicsControl ; pub unsafe fn WeatherParameters_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut WeatherParameters ; pub unsafe fn WeatherParameters_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut WeatherParameters) ; # [namespace = "carla::rpc"] type WeatherParameters = super :: bindgen :: root :: carla :: rpc :: WeatherParameters ; pub unsafe fn VehicleLightState_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut VehicleLightState ; pub unsafe fn VehicleLightState_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut VehicleLightState) ; # [namespace = "carla::rpc"] # [doc = " Defines the physical appearance of a vehicle whitch is obtained\n by the sensors."] type VehicleLightState = super :: bindgen :: root :: carla :: rpc :: VehicleLightState ; pub unsafe fn AckermannControllerSettings_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut AckermannControllerSettings ; pub unsafe fn AckermannControllerSettings_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut AckermannControllerSettings) ; # [namespace = "carla::rpc"] type AckermannControllerSettings = super :: bindgen :: root :: carla :: rpc :: AckermannControllerSettings ; pub unsafe fn VehicleAckermannControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut VehicleAckermannControl ; pub unsafe fn VehicleAckermannControl_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut VehicleAckermannControl) ; # [namespace = "carla::rpc"] type VehicleAckermannControl = super :: bindgen :: root :: carla :: rpc :: VehicleAckermannControl ; # [namespace = "carla::rpc"] type VehicleDoor = super :: bindgen :: root :: carla :: rpc :: VehicleDoor ; # [namespace = "carla::rpc"] type VehicleWheelLocation = super :: bindgen :: root :: carla :: rpc :: VehicleWheelLocation ; pub unsafe fn OpendriveGenerationParameters_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut OpendriveGenerationParameters ; pub unsafe fn OpendriveGenerationParameters_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut OpendriveGenerationParameters) ; # [namespace = "carla::rpc"] # [doc = " Seting for map generation from opendrive without additional geometry"] type OpendriveGenerationParameters = super :: bindgen :: root :: carla :: rpc :: OpendriveGenerationParameters ; pub unsafe fn carla_rpc_VehicleControl_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut VehicleControl) ; pub unsafe fn carla_rpc_VehicleControl_new1_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut VehicleControl , in_throttle : f32 , in_steer : f32 , in_brake : f32 , in_hand_brake : bool , in_reverse : bool , in_manual_gear_shift : bool , in_gear : i32) ; pub unsafe fn carla_rpc_EpisodeSettings_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut EpisodeSettings) ; pub unsafe fn carla_rpc_EpisodeSettings_new1_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut EpisodeSettings , synchronous_mode : bool , no_rendering_mode : bool , fixed_delta_seconds : f64 , substepping : bool , max_substep_delta_time : f64 , max_substeps : c_int , max_culling_distance : f32 , deterministic_ragdolls : bool , tile_stream_distance : f32 , actor_active_distance : f32) ; pub unsafe fn carla_rpc_LabelledPoint_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut LabelledPoint) ; pub unsafe fn carla_rpc_GearPhysicsControl_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut GearPhysicsControl) ; pub unsafe fn carla_rpc_GearPhysicsControl_new1_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut GearPhysicsControl , in_ratio : f32 , in_down_ratio : f32 , in_up_ratio : f32) ; pub unsafe fn carla_rpc_WheelPhysicsControl_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut WheelPhysicsControl) ; pub unsafe fn carla_rpc_WheelPhysicsControl_new1_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut WheelPhysicsControl , in_tire_friction : f32 , in_damping_rate : f32 , in_max_steer_angle : f32 , in_radius : f32 , in_max_brake_torque : f32 , in_max_handbrake_torque : f32 , in_lat_stiff_max_load : f32 , in_lat_stiff_value : f32 , in_long_stiff_value : f32 , in_position : Vector3D) ; # [doc = " @}"] pub unsafe fn carla_rpc_WeatherParameters_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut WeatherParameters) ; pub unsafe fn carla_rpc_WeatherParameters_new1_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut WeatherParameters , in_cloudiness : f32 , in_precipitation : f32 , in_precipitation_deposits : f32 , in_wind_intensity : f32 , in_sun_azimuth_angle : f32 , in_sun_altitude_angle : f32 , in_fog_density : f32 , in_fog_distance : f32 , in_fog_falloff : f32 , in_wetness : f32 , in_scattering_intensity : f32 , in_mie_scattering_scale : f32 , in_rayleigh_scattering_scale : f32 , in_dust_storm : f32) ; # [namespace = "carla::rpc"] # [doc = " Returns the current light state as an enum type"] pub fn GetLightStateEnum (self : & VehicleLightState) -> VehicleLightState_LightState ; # [namespace = "carla::rpc"] # [doc = " Returns the current light state as a value type"] pub fn GetLightStateAsValue (self : & VehicleLightState) -> u32 ; pub unsafe fn carla_rpc_VehicleLightState_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut VehicleLightState) ; pub unsafe fn carla_rpc_VehicleLightState_new1_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut VehicleLightState , light_state : VehicleLightState_LightState) ; pub unsafe fn carla_rpc_VehicleLightState_new2_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut VehicleLightState , light_state : u32) ; pub unsafe fn carla_rpc_AckermannControllerSettings_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut AckermannControllerSettings) ; pub unsafe fn carla_rpc_AckermannControllerSettings_new1_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut AckermannControllerSettings , speed_kp : f32 , speed_ki : f32 , speed_kd : f32 , accel_kp : f32 , accel_ki : f32 , accel_kd : f32) ; pub unsafe fn carla_rpc_VehicleAckermannControl_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut VehicleAckermannControl) ; pub unsafe fn carla_rpc_VehicleAckermannControl_new1_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut VehicleAckermannControl , in_steer : f32 , in_steer_speed : f32 , in_speed : f32 , in_acceleration : f32 , in_jerk : f32) ; pub unsafe fn carla_rpc_OpendriveGenerationParameters_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut OpendriveGenerationParameters) ; pub unsafe fn carla_rpc_OpendriveGenerationParameters_new1_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut OpendriveGenerationParameters , v_distance : f64 , max_road_len : f64 , w_height : f64 , a_width : f64 , smooth_junc : bool , e_visibility : bool , e_pedestrian : bool) ; pub unsafe fn SensorData_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut SensorData ; pub unsafe fn SensorData_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut SensorData) ; # [namespace = "carla::sensor"] # [doc = " Base class for all the objects containing data generated by a sensor."] type SensorData = super :: bindgen :: root :: carla :: sensor :: SensorData ; # [namespace = "carla::sensor::data"] type Image ; pub unsafe fn SemanticLidarDetection_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut SemanticLidarDetection ; pub unsafe fn SemanticLidarDetection_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut SemanticLidarDetection) ; # [namespace = "carla::sensor::data"] type SemanticLidarDetection = super :: bindgen :: root :: carla :: sensor :: data :: SemanticLidarDetection ; pub unsafe fn SemanticLidarData_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut SemanticLidarData ; pub unsafe fn SemanticLidarData_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut SemanticLidarData) ; # [namespace = "carla::sensor::data"] type SemanticLidarData = super :: bindgen :: root :: carla :: sensor :: data :: SemanticLidarData ; pub unsafe fn LidarDetection_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut LidarDetection ; pub unsafe fn LidarDetection_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut LidarDetection) ; # [namespace = "carla::sensor::data"] # [doc = " Helper class to store and serialize the data generated by a Lidar.\n\n The header of a Lidar measurement consists of an array of uint32_t's in\n the following layout\n\n    {\n      Horizontal angle (float),\n      Channel count,\n      Point count of channel 0,\n      ...\n      Point count of channel n,\n    }\n\n The points are stored in an array of floats\n\n    {\n      X0, Y0, Z0, I0\n      ...\n      Xn, Yn, Zn, In\n    }\n"] type LidarDetection = super :: bindgen :: root :: carla :: sensor :: data :: LidarDetection ; pub fn cast_LidarData_to_SemanticLidarData_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & LidarData) -> & SemanticLidarData ; pub unsafe fn LidarData_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut LidarData ; pub unsafe fn LidarData_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut LidarData) ; # [namespace = "carla::sensor::data"] type LidarData = super :: bindgen :: root :: carla :: sensor :: data :: LidarData ; pub fn cast_IMUMeasurement_to_SensorData_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & IMUMeasurement) -> & SensorData ; pub unsafe fn IMUMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut IMUMeasurement ; pub unsafe fn IMUMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut IMUMeasurement) ; # [namespace = "carla::sensor::data"] type IMUMeasurement = super :: bindgen :: root :: carla :: sensor :: data :: IMUMeasurement ; pub fn cast_GnssMeasurement_to_SensorData_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & GnssMeasurement) -> & SensorData ; pub unsafe fn GnssMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut GnssMeasurement ; pub unsafe fn GnssMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut GnssMeasurement) ; # [namespace = "carla::sensor::data"] # [doc = " A change of GNSS Measurement."] type GnssMeasurement = super :: bindgen :: root :: carla :: sensor :: data :: GnssMeasurement ; pub unsafe fn LidarMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut LidarMeasurement ; pub unsafe fn LidarMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut LidarMeasurement) ; # [namespace = "carla::sensor::data"] # [doc = " Measurement produced by a Lidar. Consists of an array of 3D points plus\n some extra meta-information about the Lidar."] type LidarMeasurement = super :: bindgen :: root :: carla :: sensor :: data :: LidarMeasurement ; pub unsafe fn SemanticLidarMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut SemanticLidarMeasurement ; pub unsafe fn SemanticLidarMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut SemanticLidarMeasurement) ; # [namespace = "carla::sensor::data"] # [doc = " Measurement produced by a Lidar. Consists of an array of 3D points plus\n some extra meta-information about the Lidar."] type SemanticLidarMeasurement = super :: bindgen :: root :: carla :: sensor :: data :: SemanticLidarMeasurement ; pub unsafe fn RadarDetection_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut RadarDetection ; pub unsafe fn RadarDetection_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut RadarDetection) ; # [namespace = "carla::sensor::data"] type RadarDetection = super :: bindgen :: root :: carla :: sensor :: data :: RadarDetection ; pub unsafe fn RadarData_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut RadarData ; pub unsafe fn RadarData_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut RadarData) ; # [namespace = "carla::sensor::data"] type RadarData = super :: bindgen :: root :: carla :: sensor :: data :: RadarData ; pub unsafe fn RadarMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut RadarMeasurement ; pub unsafe fn RadarMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut RadarMeasurement) ; # [namespace = "carla::sensor::data"] # [doc = " Measurement produced by a Radar. Consists of an array of RadarDetection.\n A RadarDetection contains 4 floats: velocity, azimuth, altitude and depth"] type RadarMeasurement = super :: bindgen :: root :: carla :: sensor :: data :: RadarMeasurement ; # [namespace = "carla::sensor::data"] pub fn WritePlyHeaderInfo (self : & SemanticLidarDetection , out : Pin < & mut std_basic_ostream_char_AutocxxConcrete >) ; # [namespace = "carla::sensor::data"] pub fn WriteDetection (self : & SemanticLidarDetection , out : Pin < & mut std_basic_ostream_char_AutocxxConcrete >) ; pub unsafe fn carla_sensor_data_SemanticLidarDetection_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut SemanticLidarDetection) ; pub unsafe fn carla_sensor_data_SemanticLidarDetection_new1_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut SemanticLidarDetection , x : f32 , y : f32 , z : f32 , cosTh : f32 , idx : u32 , tag : u32) ; pub fn carla_sensor_data_SemanticLidarData_GetHorizontalAngle_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & SemanticLidarData) -> f32 ; # [namespace = "carla::sensor::data"] pub fn SetHorizontalAngle (self : Pin < & mut SemanticLidarData > , angle : f32) ; pub fn carla_sensor_data_SemanticLidarData_GetChannelCount_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & SemanticLidarData) -> u32 ; pub unsafe fn carla_sensor_data_SemanticLidarData_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut SemanticLidarData , ChannelCount : u32) ; pub unsafe fn SemanticLidarData_destructor_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut SemanticLidarData) ; pub unsafe fn ResetMemory_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut SemanticLidarData > , points_per_channel : * mut CxxVector < u32 >) ; pub unsafe fn WriteChannelCount_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut SemanticLidarData > , points_per_channel : * mut CxxVector < u32 >) ; pub fn WritePointSync_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut SemanticLidarData > , detection : Pin < & mut SemanticLidarDetection >) ; pub fn carla_sensor_data_LidarDetection_WritePlyHeaderInfo_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & LidarDetection , out : Pin < & mut std_basic_ostream_char_AutocxxConcrete >) ; pub fn carla_sensor_data_LidarDetection_WriteDetection_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & LidarDetection , out : Pin < & mut std_basic_ostream_char_AutocxxConcrete >) ; pub unsafe fn carla_sensor_data_LidarDetection_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut LidarDetection) ; pub unsafe fn carla_sensor_data_LidarDetection_new1_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut LidarDetection , x : f32 , y : f32 , z : f32 , intensity : f32) ; pub fn carla_sensor_data_LidarData_WritePointSync_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut LidarData > , detection : Pin < & mut LidarDetection >) ; pub unsafe fn carla_sensor_data_LidarData_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut LidarData , ChannelCount : u32) ; pub unsafe fn LidarData_destructor_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut LidarData) ; pub unsafe fn carla_sensor_data_LidarData_ResetMemory_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut LidarData > , points_per_channel : * mut CxxVector < u32 >) ; pub fn WritePointSync1_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut LidarData > , detection : Pin < & mut SemanticLidarDetection >) ; # [namespace = "carla::sensor::data"] pub fn GetAccelerometer (self : & IMUMeasurement) -> Vector3D ; # [namespace = "carla::sensor::data"] pub fn GetGyroscope (self : & IMUMeasurement) -> Vector3D ; # [namespace = "carla::sensor::data"] pub fn GetCompass (self : & IMUMeasurement) -> f32 ; # [namespace = "carla::sensor::data"] pub fn GetGeoLocation (self : & GnssMeasurement) -> GeoLocation ; # [namespace = "carla::sensor::data"] pub fn GetLongitude (self : & GnssMeasurement) -> f64 ; # [namespace = "carla::sensor::data"] pub fn GetLatitude (self : & GnssMeasurement) -> f64 ; # [namespace = "carla::sensor::data"] pub fn GetAltitude (self : & GnssMeasurement) -> f64 ; # [doc = " Horizontal angle of the Lidar at the time of the measurement."] pub fn carla_sensor_data_LidarMeasurement_GetHorizontalAngle_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & LidarMeasurement) -> f32 ; # [doc = " Number of channels of the Lidar."] pub fn carla_sensor_data_LidarMeasurement_GetChannelCount_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & LidarMeasurement) -> c_uint ; # [doc = " Retrieve the number of points that @a channel generated. Points are\n sorted by channel, so this method allows to identify the channel that\n generated each point."] pub fn carla_sensor_data_LidarMeasurement_GetPointCount_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & LidarMeasurement , channel : usize) -> c_uint ; # [doc = " Horizontal angle of the Lidar at the time of the measurement."] pub fn carla_sensor_data_SemanticLidarMeasurement_GetHorizontalAngle_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & SemanticLidarMeasurement) -> f32 ; # [doc = " Number of channels of the Lidar."] pub fn carla_sensor_data_SemanticLidarMeasurement_GetChannelCount_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & SemanticLidarMeasurement) -> c_uint ; # [doc = " Retrieve the number of points that @a channel generated. Points are\n sorted by channel, so this method allows to identify the channel that\n generated each point."] pub fn carla_sensor_data_SemanticLidarMeasurement_GetPointCount_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & SemanticLidarMeasurement , channel : usize) -> c_uint ; # [namespace = "carla::sensor::data"] # [doc = " Set a new resolution for the RadarData.\n Allocates / Deallocates space in memory if needed.\n\n @warning This is expensive, not to be called each tick!"] pub fn SetResolution (self : Pin < & mut RadarData > , resolution : u32) ; # [namespace = "carla::sensor::data"] # [doc = " Returns the number of current detections."] pub fn GetDetectionCount (self : & RadarData) -> usize ; # [namespace = "carla::sensor::data"] # [doc = " Deletes the current detections.\n It doesn't change the resolution nor the allocated memory."] pub fn Reset (self : Pin < & mut RadarData >) ; # [doc = " Adds a new detection."] pub fn carla_sensor_data_RadarData_WriteDetection_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut RadarData > , detection : RadarDetection) ; pub unsafe fn carla_sensor_data_RadarData_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut RadarData) ; # [doc = " Frame count when the data was generated."] pub fn carla_sensor_SensorData_GetFrame_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & SensorData) -> usize ; # [doc = " Simulation-time when the data was generated."] pub fn carla_sensor_SensorData_GetTimestamp_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & SensorData) -> f64 ; pub unsafe fn SensorData_destructor_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut SensorData) ; pub unsafe fn Landmark_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut Landmark ; pub unsafe fn Landmark_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut Landmark) ; # [namespace = "carla::client"] # [doc = " Class containing a reference to RoadInfoSignal"] type Landmark = super :: bindgen :: root :: carla :: client :: Landmark ; pub unsafe fn Timestamp_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut Timestamp ; pub unsafe fn Timestamp_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut Timestamp) ; # [namespace = "carla::client"] type Timestamp = super :: bindgen :: root :: carla :: client :: Timestamp ; pub unsafe fn WorldSnapshot_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut WorldSnapshot ; pub unsafe fn WorldSnapshot_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut WorldSnapshot) ; # [namespace = "carla::client"] type WorldSnapshot = super :: bindgen :: root :: carla :: client :: WorldSnapshot ; pub unsafe fn Light_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut Light ; pub unsafe fn Light_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut Light) ; # [namespace = "carla::client"] type Light = super :: bindgen :: root :: carla :: client :: Light ; pub unsafe fn Vehicle_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut Vehicle ; pub unsafe fn Vehicle_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut Vehicle) ; # [namespace = "carla::client"] type Vehicle = super :: bindgen :: root :: carla :: client :: Vehicle ; pub unsafe fn TrafficSign_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut TrafficSign ; pub unsafe fn TrafficSign_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut TrafficSign) ; # [namespace = "carla::client"] type TrafficSign = super :: bindgen :: root :: carla :: client :: TrafficSign ; pub fn cast_TrafficLight_to_TrafficSign_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & TrafficLight) -> & TrafficSign ; pub unsafe fn TrafficLight_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut TrafficLight ; pub unsafe fn TrafficLight_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut TrafficLight) ; # [namespace = "carla::client"] type TrafficLight = super :: bindgen :: root :: carla :: client :: TrafficLight ; pub unsafe fn Walker_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut Walker ; pub unsafe fn Walker_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut Walker) ; # [namespace = "carla::client"] type Walker = super :: bindgen :: root :: carla :: client :: Walker ; pub unsafe fn ActorBlueprint_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut ActorBlueprint ; pub unsafe fn ActorBlueprint_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut ActorBlueprint) ; # [namespace = "carla::client"] # [doc = " Contains all the necessary information for spawning an Actor."] type ActorBlueprint = super :: bindgen :: root :: carla :: client :: ActorBlueprint ; pub unsafe fn ActorList_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut ActorList ; pub unsafe fn ActorList_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut ActorList) ; # [namespace = "carla::client"] type ActorList = super :: bindgen :: root :: carla :: client :: ActorList ; pub unsafe fn LaneInvasionSensor_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut LaneInvasionSensor ; pub unsafe fn LaneInvasionSensor_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut LaneInvasionSensor) ; # [namespace = "carla::client"] type LaneInvasionSensor = super :: bindgen :: root :: carla :: client :: LaneInvasionSensor ; pub fn carla_client_Landmark_GetRoadId_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & Landmark) -> u32 ; pub fn carla_client_Landmark_GetDistance_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & Landmark) -> f64 ; pub fn carla_client_Landmark_GetS_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & Landmark) -> f64 ; # [namespace = "carla::client"] pub fn GetT (self : & Landmark) -> f64 ; pub fn carla_client_Landmark_GetId_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & Landmark) -> UniquePtr < CxxString > ; pub fn GetName_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & Landmark) -> UniquePtr < CxxString > ; # [namespace = "carla::client"] pub fn IsDynamic (self : & Landmark) -> bool ; # [namespace = "carla::client"] pub fn GetOrientation (self : & Landmark) -> SignalOrientation ; # [namespace = "carla::client"] pub fn GetZOffset (self : & Landmark) -> f64 ; pub fn GetCountry_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & Landmark) -> UniquePtr < CxxString > ; pub fn carla_client_Landmark_GetType_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & Landmark) -> UniquePtr < CxxString > ; pub fn GetSubType_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & Landmark) -> UniquePtr < CxxString > ; # [namespace = "carla::client"] pub fn GetValue (self : & Landmark) -> f64 ; pub fn GetUnit_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & Landmark) -> UniquePtr < CxxString > ; # [namespace = "carla::client"] pub fn GetHeight (self : & Landmark) -> f64 ; # [namespace = "carla::client"] pub fn GetWidth (self : & Landmark) -> f64 ; pub fn GetText_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & Landmark) -> UniquePtr < CxxString > ; # [namespace = "carla::client"] pub fn GethOffset (self : & Landmark) -> f64 ; # [namespace = "carla::client"] pub fn GetPitch (self : & Landmark) -> f64 ; # [namespace = "carla::client"] pub fn GetRoll (self : & Landmark) -> f64 ; # [namespace = "carla::client"] pub fn GetValidities < 'a > (self : & 'a Landmark) -> & 'a CxxVector < LaneValidity > ; pub unsafe fn carla_client_Timestamp_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Timestamp) ; pub unsafe fn carla_client_Timestamp_new1_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Timestamp , in_frame : usize , in_elapsed_seconds : f64 , in_delta_seconds : f64 , in_platform_timestamp : f64) ; # [doc = " Get the id of the episode associated with this world."] pub fn carla_client_WorldSnapshot_GetId_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & WorldSnapshot) -> u64 ; pub fn carla_client_WorldSnapshot_GetFrame_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & WorldSnapshot) -> usize ; # [doc = " Get timestamp of this snapshot."] pub fn carla_client_WorldSnapshot_GetTimestamp_autocxx_wrapper_0xd539d5a17acbdd25 < 'a > (autocxx_gen_this : & 'a WorldSnapshot) -> & 'a Timestamp ; # [doc = " Return number of ActorSnapshots present in this WorldSnapshot."] pub fn carla_client_WorldSnapshot_size_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & WorldSnapshot) -> usize ; pub unsafe fn carla_client_WorldSnapshot_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut WorldSnapshot , state : SharedPtr < EpisodeState >) ; # [namespace = "carla::client"] pub fn GetIntensity (self : & Light) -> f32 ; # [namespace = "carla::client"] pub fn IsOn (self : & Light) -> bool ; # [namespace = "carla::client"] pub fn IsOff (self : & Light) -> bool ; # [namespace = "carla::client"] pub fn SetIntensity (self : Pin < & mut Light > , intensity : f32) ; # [namespace = "carla::client"] pub fn TurnOn (self : Pin < & mut Light >) ; # [namespace = "carla::client"] pub fn TurnOff (self : Pin < & mut Light >) ; pub unsafe fn carla_client_Light_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Light) ; # [namespace = "carla::client"] # [doc = " Switch on/off this vehicle's autopilot."] pub fn SetAutopilot (self : Pin < & mut Vehicle > , enabled : bool , tm_port : u16) ; # [namespace = "carla::client"] # [doc = " Switch on/off this vehicle's autopilot."] pub fn ShowDebugTelemetry (self : Pin < & mut Vehicle > , enabled : bool) ; # [namespace = "carla::client"] # [doc = " Apply @a control to this vehicle."] pub fn ApplyControl (self : Pin < & mut Vehicle > , control : & VehicleControl) ; # [namespace = "carla::client"] # [doc = " Apply @a control to this vehicle."] pub fn ApplyAckermannControl (self : Pin < & mut Vehicle > , control : & VehicleAckermannControl) ; # [doc = " Return the last Ackermann controller settings applied to this vehicle.\n\n @warning This function does call the simulator."] pub fn carla_client_Vehicle_GetAckermannControllerSettings_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & Vehicle) -> AckermannControllerSettings ; # [doc = " Apply Ackermann control settings to this vehicle"] pub fn carla_client_Vehicle_ApplyAckermannControllerSettings_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut Vehicle > , settings : & AckermannControllerSettings) ; # [namespace = "carla::client"] # [doc = " Apply physics control to this vehicle."] pub fn ApplyPhysicsControl (self : Pin < & mut Vehicle > , physics_control : & VehiclePhysicsControl) ; # [namespace = "carla::client"] # [doc = " Return the control last applied to this vehicle.\n\n @note This function does not call the simulator, it returns the data\n received in the last tick."] pub fn GetControl (self : & Vehicle) -> VehicleControl ; # [doc = " Return the physics control last applied to this vehicle.\n\n @warning This function does call the simulator."] pub unsafe fn GetPhysicsControl_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & Vehicle , placement_return_type : * mut VehiclePhysicsControl) ; # [namespace = "carla::client"] # [doc = " Return the speed limit currently affecting this vehicle.\n\n @note This function does not call the simulator, it returns the data\n received in the last tick."] pub fn GetSpeedLimit (self : & Vehicle) -> f32 ; # [namespace = "carla::client"] # [doc = " Return the state of the traffic light currently affecting this vehicle.\n\n @return Green If no traffic light is affecting the vehicle.\n\n @note This function does not call the simulator, it returns the data\n received in the last tick."] pub fn GetTrafficLightState (self : & Vehicle) -> TrafficLightState ; # [namespace = "carla::client"] # [doc = " Return whether a traffic light is affecting this vehicle.\n\n @note This function does not call the simulator, it returns the data\n received in the last tick."] pub fn IsAtTrafficLight (self : Pin < & mut Vehicle >) -> bool ; # [doc = " Enables CarSim simulation if it is availiable"] pub fn carla_client_Vehicle_EnableCarSim_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut Vehicle > , simfile_path : UniquePtr < CxxString >) ; # [doc = " Enables the use of CarSim internal road definition instead of unreal's"] pub fn carla_client_Vehicle_UseCarSimRoad_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut Vehicle > , enabled : bool) ; pub fn carla_client_Vehicle_EnableChronoPhysics_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut Vehicle > , MaxSubsteps : u64 , MaxSubstepDeltaTime : f32 , VehicleJSON : UniquePtr < CxxString > , PowertrainJSON : UniquePtr < CxxString > , TireJSON : UniquePtr < CxxString > , BaseJSONPath : UniquePtr < CxxString >) ; # [namespace = "carla::client"] # [doc = " Returns the failure state of the vehicle"] pub fn GetFailureState (self : & Vehicle) -> VehicleFailureState ; pub unsafe fn carla_client_Vehicle_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Vehicle , init : * mut ActorInitializer) ; # [namespace = "carla::client"] pub fn GetTriggerVolume (self : & TrafficSign) -> & BoundingBox ; pub fn GetSignId_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & TrafficSign) -> UniquePtr < CxxString > ; pub unsafe fn carla_client_TrafficSign_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut TrafficSign , init : * mut ActorInitializer) ; # [namespace = "carla::client"] pub fn SetState (self : Pin < & mut TrafficLight > , state : TrafficLightState) ; # [doc = " Return the current state of the traffic light.\n\n @note This function does not call the simulator, it returns the data\n received in the last tick."] pub fn carla_client_TrafficLight_GetState_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & TrafficLight) -> TrafficLightState ; # [namespace = "carla::client"] pub fn SetGreenTime (self : Pin < & mut TrafficLight > , green_time : f32) ; # [namespace = "carla::client"] # [doc = " @note This function does not call the simulator, it returns the data\n received in the last tick."] pub fn GetGreenTime (self : & TrafficLight) -> f32 ; # [namespace = "carla::client"] pub fn SetYellowTime (self : Pin < & mut TrafficLight > , yellow_time : f32) ; # [namespace = "carla::client"] # [doc = " @note This function does not call the simulator, it returns the data\n received in the last tick."] pub fn GetYellowTime (self : & TrafficLight) -> f32 ; # [namespace = "carla::client"] pub fn SetRedTime (self : Pin < & mut TrafficLight > , red_time : f32) ; # [namespace = "carla::client"] # [doc = " @note This function does not call the simulator, it returns the data\n received in the last tick."] pub fn GetRedTime (self : & TrafficLight) -> f32 ; # [namespace = "carla::client"] # [doc = " @note This function does not call the simulator, it returns the data\n received in the last tick."] pub fn GetElapsedTime (self : & TrafficLight) -> f32 ; # [namespace = "carla::client"] pub fn Freeze (self : Pin < & mut TrafficLight > , freeze : bool) ; # [namespace = "carla::client"] # [doc = " @note This function does not call the simulator, it returns the data\n received in the last tick."] pub fn IsFrozen (self : & TrafficLight) -> bool ; # [namespace = "carla::client"] # [doc = " Returns the index of the pole in the traffic light group"] pub fn GetPoleIndex (self : Pin < & mut TrafficLight >) -> u32 ; # [namespace = "carla::client"] pub fn ResetGroup (self : Pin < & mut TrafficLight >) ; pub fn carla_client_TrafficLight_GetLightBoxes_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & TrafficLight) -> UniquePtr < CxxVector < BoundingBox > > ; pub fn GetOpenDRIVEID_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & TrafficLight) -> UniquePtr < CxxString > ; pub unsafe fn carla_client_TrafficLight_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut TrafficLight , init : * mut ActorInitializer) ; # [doc = " Apply @a control to this Walker."] pub fn carla_client_Walker_ApplyControl_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut Walker > , control : & WalkerControl) ; # [doc = " Return the control last applied to this Walker.\n\n @note This function does not call the simulator, it returns the Control\n received in the last tick."] pub unsafe fn GetWalkerControl_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & Walker , placement_return_type : * mut WalkerControl) ; pub unsafe fn carla_client_Walker_GetBonesTransform_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut Walker > , placement_return_type : * mut WalkerBoneControlOut) ; pub fn carla_client_Walker_SetBonesTransform_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut Walker > , bones : & WalkerBoneControlIn) ; pub fn carla_client_Walker_BlendPose_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut Walker > , blend : f32) ; # [namespace = "carla::client"] pub fn ShowPose (self : Pin < & mut Walker >) ; # [namespace = "carla::client"] pub fn HidePose (self : Pin < & mut Walker >) ; pub fn carla_client_Walker_GetPoseFromAnimation_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut Walker >) ; pub unsafe fn carla_client_Walker_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Walker , init : * mut ActorInitializer) ; # [doc = " @{"] pub fn carla_client_ActorBlueprint_GetId_autocxx_wrapper_0xd539d5a17acbdd25 < 'a > (autocxx_gen_this : & 'a ActorBlueprint) -> & 'a CxxString ; # [namespace = "carla::client"] # [doc = " @{"] pub fn ContainsTag (self : & ActorBlueprint , tag : & CxxString) -> bool ; # [namespace = "carla::client"] # [doc = " Test if any of the flags matches @a wildcard_pattern.\n\n @a wildcard_pattern follows Unix shell-style wildcards."] pub fn MatchTags (self : & ActorBlueprint , wildcard_pattern : & CxxString) -> bool ; pub fn GetTags_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & ActorBlueprint) -> UniquePtr < CxxVector < CxxString > > ; # [namespace = "carla::client"] # [doc = " @{"] pub fn ContainsAttribute (self : & ActorBlueprint , id : & CxxString) -> bool ; # [doc = " Set the value of the attribute given by @a id.\n\n @throw std::out_of_range if no such element exists.\n @throw InvalidAttributeValue if attribute is not modifiable.\n @throw InvalidAttributeValue if format does not match the attribute type."] pub fn SetAttribute_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut ActorBlueprint > , id : & CxxString , value : UniquePtr < CxxString >) ; pub fn carla_client_ActorBlueprint_size_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & ActorBlueprint) -> usize ; # [doc = " @{"] pub unsafe fn MakeActorDescription_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & ActorBlueprint , placement_return_type : * mut ActorDescription) ; # [doc = " @{"] pub unsafe fn carla_client_ActorBlueprint_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut ActorBlueprint , actor_definition : * mut ActorDefinition) ; pub fn carla_client_ActorList_empty_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & ActorList) -> bool ; pub fn carla_client_ActorList_size_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & ActorList) -> usize ; pub unsafe fn LaneInvasionSensor_destructor_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut LaneInvasionSensor) ; # [doc = " Stop listening for new measurements."] pub fn carla_client_LaneInvasionSensor_Stop_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut LaneInvasionSensor >) ; # [doc = " Return whether this Sensor instance is currently listening to the\n associated sensor in the simulator."] pub fn carla_client_LaneInvasionSensor_IsListening_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & LaneInvasionSensor) -> bool ; # [namespace = "carla::road::element::LaneMarking"] # [cxx_name = "Type"] type LaneMarking_Type = super :: bindgen :: root :: carla :: road :: element :: LaneMarking_Type ; # [namespace = "carla::road::element::LaneMarking"] # [cxx_name = "Color"] type LaneMarking_Color = super :: bindgen :: root :: carla :: road :: element :: LaneMarking_Color ; # [namespace = "carla::road::element::LaneMarking"] # [cxx_name = "LaneChange"] # [doc = " Can be used as flags."] type LaneMarking_LaneChange = super :: bindgen :: root :: carla :: road :: element :: LaneMarking_LaneChange ; # [namespace = "carla::traffic_manager"] type RoadOption = super :: bindgen :: root :: carla :: traffic_manager :: RoadOption ; pub unsafe fn FfiLocation_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiLocation ; pub unsafe fn FfiLocation_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiLocation) ; # [namespace = "carla_rust::geom"] type FfiLocation = super :: bindgen :: root :: carla_rust :: geom :: FfiLocation ; pub unsafe fn FfiTransform_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiTransform ; pub unsafe fn FfiTransform_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiTransform) ; # [namespace = "carla_rust::geom"] type FfiTransform = super :: bindgen :: root :: carla_rust :: geom :: FfiTransform ; pub unsafe fn FfiBoundingBox_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiBoundingBox ; pub unsafe fn FfiBoundingBox_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiBoundingBox) ; # [namespace = "carla_rust::geom"] type FfiBoundingBox = super :: bindgen :: root :: carla_rust :: geom :: FfiBoundingBox ; pub fn carla_rust_geom_FfiBoundingBox_Contains_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiBoundingBox , in_world_point : & FfiLocation , in_bbox_to_world_transform : & FfiTransform) -> bool ; pub fn carla_rust_geom_FfiBoundingBox_GetLocalVertices_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiBoundingBox) -> UniquePtr < CxxVector < FfiLocation > > ; pub fn carla_rust_geom_FfiBoundingBox_GetWorldVertices_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiBoundingBox , in_bbox_to_world_tr : & FfiTransform) -> UniquePtr < CxxVector < FfiLocation > > ; pub fn carla_rust_geom_FfiBoundingBox_as_native_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiBoundingBox) -> & BoundingBox ; pub unsafe fn carla_rust_geom_FfiBoundingBox_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiBoundingBox , base : * mut BoundingBox) ; pub unsafe fn carla_rust_geom_FfiBoundingBox_new1_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiBoundingBox , base : & BoundingBox) ; pub unsafe fn FfiVehiclePhysicsControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiVehiclePhysicsControl ; pub unsafe fn FfiVehiclePhysicsControl_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiVehiclePhysicsControl) ; # [namespace = "carla_rust::rpc"] type FfiVehiclePhysicsControl = super :: bindgen :: root :: carla_rust :: rpc :: FfiVehiclePhysicsControl ; pub unsafe fn FfiEpisodeSettings_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiEpisodeSettings ; pub unsafe fn FfiEpisodeSettings_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiEpisodeSettings) ; # [namespace = "carla_rust::rpc"] type FfiEpisodeSettings = super :: bindgen :: root :: carla_rust :: rpc :: FfiEpisodeSettings ; pub unsafe fn FfiLabelledPoint_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiLabelledPoint ; pub unsafe fn FfiLabelledPoint_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiLabelledPoint) ; # [namespace = "carla_rust::rpc"] type FfiLabelledPoint = super :: bindgen :: root :: carla_rust :: rpc :: FfiLabelledPoint ; pub unsafe fn FfiVehicleLightStateElementRef_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiVehicleLightStateElementRef ; pub unsafe fn FfiVehicleLightStateElementRef_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiVehicleLightStateElementRef) ; # [namespace = "carla_rust::rpc"] type FfiVehicleLightStateElementRef = super :: bindgen :: root :: carla_rust :: rpc :: FfiVehicleLightStateElementRef ; pub unsafe fn FfiVehicleLightStateList_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiVehicleLightStateList ; pub unsafe fn FfiVehicleLightStateList_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiVehicleLightStateList) ; # [namespace = "carla_rust::rpc"] type FfiVehicleLightStateList = super :: bindgen :: root :: carla_rust :: rpc :: FfiVehicleLightStateList ; pub unsafe fn FfiEnvironmentObjectRef_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiEnvironmentObjectRef ; pub unsafe fn FfiEnvironmentObjectRef_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiEnvironmentObjectRef) ; # [namespace = "carla_rust::rpc"] type FfiEnvironmentObjectRef = super :: bindgen :: root :: carla_rust :: rpc :: FfiEnvironmentObjectRef ; pub unsafe fn FfiRpcColor_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiRpcColor ; pub unsafe fn FfiRpcColor_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiRpcColor) ; # [namespace = "carla_rust::rpc"] type FfiRpcColor = super :: bindgen :: root :: carla_rust :: rpc :: FfiRpcColor ; # [namespace = "carla_rust::rpc"] type FfiRpcLightGroup = super :: bindgen :: root :: carla_rust :: rpc :: FfiRpcLightGroup ; pub unsafe fn FfiRpcLightState_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiRpcLightState ; pub unsafe fn FfiRpcLightState_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiRpcLightState) ; # [namespace = "carla_rust::rpc"] type FfiRpcLightState = super :: bindgen :: root :: carla_rust :: rpc :: FfiRpcLightState ; # [namespace = "carla_rust::rpc"] pub fn torque_curve < 'a > (self : & 'a FfiVehiclePhysicsControl) -> & 'a CxxVector < Vector2D > ; # [namespace = "carla_rust::rpc"] pub fn max_rpm (self : & FfiVehiclePhysicsControl) -> f32 ; # [namespace = "carla_rust::rpc"] pub fn moi (self : & FfiVehiclePhysicsControl) -> f32 ; # [namespace = "carla_rust::rpc"] pub fn damping_rate_full_throttle (self : & FfiVehiclePhysicsControl) -> f32 ; # [namespace = "carla_rust::rpc"] pub fn damping_rate_zero_throttle_clutch_engaged (self : & FfiVehiclePhysicsControl) -> f32 ; # [namespace = "carla_rust::rpc"] pub fn damping_rate_zero_throttle_clutch_disengaged (self : & FfiVehiclePhysicsControl) -> f32 ; # [namespace = "carla_rust::rpc"] pub fn use_gear_autobox (self : & FfiVehiclePhysicsControl) -> bool ; # [namespace = "carla_rust::rpc"] pub fn gear_switch_time (self : & FfiVehiclePhysicsControl) -> f32 ; # [namespace = "carla_rust::rpc"] pub fn clutch_strength (self : & FfiVehiclePhysicsControl) -> f32 ; # [namespace = "carla_rust::rpc"] pub fn final_ratio (self : & FfiVehiclePhysicsControl) -> f32 ; # [namespace = "carla_rust::rpc"] pub fn forward_gears < 'a > (self : & 'a FfiVehiclePhysicsControl) -> & 'a CxxVector < GearPhysicsControl > ; # [namespace = "carla_rust::rpc"] pub fn mass (self : & FfiVehiclePhysicsControl) -> f32 ; # [namespace = "carla_rust::rpc"] pub fn drag_coefficient (self : & FfiVehiclePhysicsControl) -> f32 ; # [namespace = "carla_rust::rpc"] pub fn center_of_mass < 'a > (self : & 'a FfiVehiclePhysicsControl) -> & 'a FfiLocation ; # [namespace = "carla_rust::rpc"] pub fn steering_curve < 'a > (self : & 'a FfiVehiclePhysicsControl) -> & 'a CxxVector < Vector2D > ; # [namespace = "carla_rust::rpc"] pub fn wheels < 'a > (self : & 'a FfiVehiclePhysicsControl) -> & 'a CxxVector < WheelPhysicsControl > ; # [namespace = "carla_rust::rpc"] pub fn use_sweep_wheel_collision (self : & FfiVehiclePhysicsControl) -> bool ; # [namespace = "carla_rust::rpc"] pub fn inner (self : & FfiVehiclePhysicsControl) -> & VehiclePhysicsControl ; pub unsafe fn carla_rust_rpc_FfiVehiclePhysicsControl_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiVehiclePhysicsControl) ; pub unsafe fn carla_rust_rpc_FfiVehiclePhysicsControl_new1_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiVehiclePhysicsControl , in_torque_curve : & CxxVector < Vector2D > , in_max_rpm : f32 , in_moi : f32 , in_damping_rate_full_throttle : f32 , in_damping_rate_zero_throttle_clutch_engaged : f32 , in_damping_rate_zero_throttle_clutch_disengaged : f32 , in_use_gear_autobox : bool , in_gear_switch_time : f32 , in_clutch_strength : f32 , in_final_ratio : f32 , in_forward_gears : Pin < & mut CxxVector < GearPhysicsControl > > , in_mass : f32 , in_drag_coefficient : f32 , in_center_of_mass : Pin < & mut FfiLocation > , in_steering_curve : & CxxVector < Vector2D > , in_wheels : Pin < & mut CxxVector < WheelPhysicsControl > > , in_use_sweep_wheel_collision : bool) ; pub unsafe fn carla_rust_rpc_FfiVehiclePhysicsControl_new2_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiVehiclePhysicsControl , base : * mut VehiclePhysicsControl) ; pub fn carla_rust_rpc_FfiEpisodeSettings_inner_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiEpisodeSettings) -> & EpisodeSettings ; # [namespace = "carla_rust::rpc"] pub fn synchronous_mode (self : & FfiEpisodeSettings) -> bool ; # [namespace = "carla_rust::rpc"] pub fn no_rendering_mode (self : & FfiEpisodeSettings) -> bool ; # [namespace = "carla_rust::rpc"] pub fn fixed_delta_seconds (self : & FfiEpisodeSettings) -> f64 ; # [namespace = "carla_rust::rpc"] pub fn substepping (self : & FfiEpisodeSettings) -> bool ; # [namespace = "carla_rust::rpc"] pub fn max_substep_delta_time (self : & FfiEpisodeSettings) -> f64 ; # [namespace = "carla_rust::rpc"] pub fn max_substeps (self : & FfiEpisodeSettings) -> c_int ; # [namespace = "carla_rust::rpc"] pub fn max_culling_distance (self : & FfiEpisodeSettings) -> f32 ; # [namespace = "carla_rust::rpc"] pub fn deterministic_ragdolls (self : & FfiEpisodeSettings) -> bool ; # [namespace = "carla_rust::rpc"] pub fn tile_stream_distance (self : & FfiEpisodeSettings) -> f32 ; # [namespace = "carla_rust::rpc"] pub fn actor_active_distance (self : & FfiEpisodeSettings) -> f32 ; pub unsafe fn carla_rust_rpc_FfiEpisodeSettings_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiEpisodeSettings) ; pub unsafe fn carla_rust_rpc_FfiEpisodeSettings_new1_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiEpisodeSettings , base : * mut EpisodeSettings) ; pub unsafe fn carla_rust_rpc_FfiEpisodeSettings_new2_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiEpisodeSettings , synchronous_mode : bool , no_rendering_mode : bool , fixed_delta_seconds : f64 , substepping : bool , max_substep_delta_time : f64 , max_substeps : c_int , max_culling_distance : f32 , deterministic_ragdolls : bool , tile_stream_distance : f32 , actor_active_distance : f32) ; pub unsafe fn carla_rust_rpc_FfiLabelledPoint_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiLabelledPoint , orig : * mut LabelledPoint) ; # [namespace = "carla_rust::rpc"] pub fn id (self : & FfiVehicleLightStateElementRef) -> u32 ; # [namespace = "carla_rust::rpc"] pub fn light_state (self : & FfiVehicleLightStateElementRef) -> VehicleLightState_LightState ; pub unsafe fn carla_rust_rpc_FfiVehicleLightStateElementRef_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiVehicleLightStateElementRef , elem : & std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete) ; # [namespace = "carla_rust::rpc"] pub fn len (self : & FfiVehicleLightStateList) -> usize ; # [namespace = "carla_rust::rpc"] pub fn get (self : & FfiVehicleLightStateList , index : usize) -> UniquePtr < FfiVehicleLightStateElementRef > ; pub unsafe fn carla_rust_rpc_FfiVehicleLightStateList_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiVehicleLightStateList , vec : * mut CxxVector < std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete >) ; # [namespace = "carla_rust::rpc"] pub fn transform < 'a > (self : & 'a FfiEnvironmentObjectRef) -> & 'a FfiTransform ; # [namespace = "carla_rust::rpc"] pub fn bounding_box < 'a > (self : & 'a FfiEnvironmentObjectRef) -> & 'a FfiBoundingBox ; pub fn carla_rust_rpc_FfiEnvironmentObjectRef_id_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiEnvironmentObjectRef) -> u64 ; pub fn carla_rust_rpc_FfiEnvironmentObjectRef_name_autocxx_wrapper_0xd539d5a17acbdd25 < 'a > (autocxx_gen_this : & 'a FfiEnvironmentObjectRef) -> & 'a CxxString ; pub fn carla_rust_rpc_FfiEnvironmentObjectRef_type_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiEnvironmentObjectRef) -> CityObjectLabel ; pub unsafe fn carla_rust_rpc_FfiEnvironmentObjectRef_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiEnvironmentObjectRef , orig : & EnvironmentObject) ; pub unsafe fn FfiColor_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiColor ; pub unsafe fn FfiColor_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiColor) ; # [namespace = "carla_rust::sensor::data"] type FfiColor = super :: bindgen :: root :: carla_rust :: sensor :: data :: FfiColor ; pub unsafe fn FfiCollisionEvent_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiCollisionEvent ; pub unsafe fn FfiCollisionEvent_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiCollisionEvent) ; # [namespace = "carla_rust::sensor::data"] type FfiCollisionEvent = super :: bindgen :: root :: carla_rust :: sensor :: data :: FfiCollisionEvent ; pub unsafe fn FfiImage_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiImage ; pub unsafe fn FfiImage_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiImage) ; # [namespace = "carla_rust::sensor::data"] type FfiImage = super :: bindgen :: root :: carla_rust :: sensor :: data :: FfiImage ; pub unsafe fn FfiLaneInvasionEvent_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiLaneInvasionEvent ; pub unsafe fn FfiLaneInvasionEvent_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiLaneInvasionEvent) ; # [namespace = "carla_rust::sensor::data"] type FfiLaneInvasionEvent = super :: bindgen :: root :: carla_rust :: sensor :: data :: FfiLaneInvasionEvent ; pub unsafe fn FfiLidarDetection_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiLidarDetection ; pub unsafe fn FfiLidarDetection_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiLidarDetection) ; # [namespace = "carla_rust::sensor::data"] type FfiLidarDetection = super :: bindgen :: root :: carla_rust :: sensor :: data :: FfiLidarDetection ; pub unsafe fn FfiObstacleDetectionEvent_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiObstacleDetectionEvent ; pub unsafe fn FfiObstacleDetectionEvent_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiObstacleDetectionEvent) ; # [namespace = "carla_rust::sensor::data"] type FfiObstacleDetectionEvent = super :: bindgen :: root :: carla_rust :: sensor :: data :: FfiObstacleDetectionEvent ; pub unsafe fn FfiSemanticLidarDetection_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiSemanticLidarDetection ; pub unsafe fn FfiSemanticLidarDetection_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiSemanticLidarDetection) ; # [namespace = "carla_rust::sensor::data"] type FfiSemanticLidarDetection = super :: bindgen :: root :: carla_rust :: sensor :: data :: FfiSemanticLidarDetection ; pub unsafe fn FfiLidarMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiLidarMeasurement ; pub unsafe fn FfiLidarMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiLidarMeasurement) ; # [namespace = "carla_rust::sensor::data"] type FfiLidarMeasurement = super :: bindgen :: root :: carla_rust :: sensor :: data :: FfiLidarMeasurement ; pub unsafe fn FfiSemanticLidarMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiSemanticLidarMeasurement ; pub unsafe fn FfiSemanticLidarMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiSemanticLidarMeasurement) ; # [namespace = "carla_rust::sensor::data"] type FfiSemanticLidarMeasurement = super :: bindgen :: root :: carla_rust :: sensor :: data :: FfiSemanticLidarMeasurement ; pub unsafe fn FfiRadarMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiRadarMeasurement ; pub unsafe fn FfiRadarMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiRadarMeasurement) ; # [namespace = "carla_rust::sensor::data"] type FfiRadarMeasurement = super :: bindgen :: root :: carla_rust :: sensor :: data :: FfiRadarMeasurement ; pub unsafe fn FfiGnssMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiGnssMeasurement ; pub unsafe fn FfiGnssMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiGnssMeasurement) ; # [namespace = "carla_rust::sensor::data"] type FfiGnssMeasurement = super :: bindgen :: root :: carla_rust :: sensor :: data :: FfiGnssMeasurement ; pub unsafe fn FfiImuMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiImuMeasurement ; pub unsafe fn FfiImuMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiImuMeasurement) ; # [namespace = "carla_rust::sensor::data"] type FfiImuMeasurement = super :: bindgen :: root :: carla_rust :: sensor :: data :: FfiImuMeasurement ; pub fn carla_rust_sensor_data_FfiCollisionEvent_GetActor_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiCollisionEvent) -> SharedPtr < FfiActor > ; pub fn carla_rust_sensor_data_FfiCollisionEvent_GetOtherActor_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiCollisionEvent) -> SharedPtr < FfiActor > ; pub fn carla_rust_sensor_data_FfiCollisionEvent_GetNormalImpulse_autocxx_wrapper_0xd539d5a17acbdd25 < 'a > (autocxx_gen_this : & 'a FfiCollisionEvent) -> & 'a Vector3D ; pub fn carla_rust_sensor_data_FfiImage_GetWidth_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiImage) -> usize ; pub fn carla_rust_sensor_data_FfiImage_GetHeight_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiImage) -> usize ; # [namespace = "carla_rust::sensor::data"] pub fn GetFOVAngle (self : & FfiImage) -> f32 ; pub fn carla_rust_sensor_data_FfiImage_size_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiImage) -> usize ; pub fn carla_rust_sensor_data_FfiImage_data_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiImage) -> * const FfiColor ; pub fn carla_rust_sensor_data_FfiImage_at_autocxx_wrapper_0xd539d5a17acbdd25 < 'a > (autocxx_gen_this : & 'a FfiImage , pos : usize) -> & 'a FfiColor ; pub fn carla_rust_sensor_data_FfiLaneInvasionEvent_GetActor_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLaneInvasionEvent) -> SharedPtr < FfiActor > ; pub fn carla_rust_sensor_data_FfiLaneInvasionEvent_GetCrossedLaneMarkings_autocxx_wrapper_0xd539d5a17acbdd25 < 'a > (autocxx_gen_this : & 'a FfiLaneInvasionEvent) -> & 'a CxxVector < FfiLaneMarking > ; pub fn carla_rust_sensor_data_FfiLidarDetection_as_builtin_autocxx_wrapper_0xd539d5a17acbdd25 < 'a > (autocxx_gen_this : Pin < & 'a mut FfiLidarDetection >) -> Pin < & 'a mut LidarDetection > ; pub unsafe fn carla_rust_sensor_data_FfiLidarDetection_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiLidarDetection , base : * mut LidarDetection) ; pub fn carla_rust_sensor_data_FfiObstacleDetectionEvent_GetActor_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiObstacleDetectionEvent) -> SharedPtr < FfiActor > ; pub fn carla_rust_sensor_data_FfiObstacleDetectionEvent_GetOtherActor_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiObstacleDetectionEvent) -> SharedPtr < FfiActor > ; pub fn carla_rust_sensor_data_FfiObstacleDetectionEvent_GetDistance_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiObstacleDetectionEvent) -> f32 ; pub fn carla_rust_sensor_data_FfiSemanticLidarDetection_as_builtin_autocxx_wrapper_0xd539d5a17acbdd25 < 'a > (autocxx_gen_this : Pin < & 'a mut FfiSemanticLidarDetection >) -> Pin < & 'a mut SemanticLidarDetection > ; pub unsafe fn carla_rust_sensor_data_FfiSemanticLidarDetection_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiSemanticLidarDetection , base : * mut SemanticLidarDetection) ; pub fn carla_rust_sensor_data_FfiLidarMeasurement_GetHorizontalAngle_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLidarMeasurement) -> f32 ; pub fn carla_rust_sensor_data_FfiLidarMeasurement_GetChannelCount_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLidarMeasurement) -> u32 ; pub fn carla_rust_sensor_data_FfiLidarMeasurement_GetPointCount_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLidarMeasurement , channel : usize) -> u32 ; pub fn carla_rust_sensor_data_FfiLidarMeasurement_size_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLidarMeasurement) -> usize ; pub fn carla_rust_sensor_data_FfiLidarMeasurement_data_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLidarMeasurement) -> * const FfiLidarDetection ; pub fn carla_rust_sensor_data_FfiLidarMeasurement_at_autocxx_wrapper_0xd539d5a17acbdd25 < 'a > (autocxx_gen_this : & 'a FfiLidarMeasurement , pos : usize) -> & 'a FfiLidarDetection ; pub fn carla_rust_sensor_data_FfiSemanticLidarMeasurement_GetHorizontalAngle_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiSemanticLidarMeasurement) -> f32 ; pub fn carla_rust_sensor_data_FfiSemanticLidarMeasurement_GetChannelCount_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiSemanticLidarMeasurement) -> u32 ; pub fn carla_rust_sensor_data_FfiSemanticLidarMeasurement_GetPointCount_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiSemanticLidarMeasurement , channel : usize) -> u32 ; pub fn carla_rust_sensor_data_FfiSemanticLidarMeasurement_size_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiSemanticLidarMeasurement) -> usize ; pub fn carla_rust_sensor_data_FfiSemanticLidarMeasurement_data_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiSemanticLidarMeasurement) -> * const FfiSemanticLidarDetection ; pub fn carla_rust_sensor_data_FfiSemanticLidarMeasurement_at_autocxx_wrapper_0xd539d5a17acbdd25 < 'a > (autocxx_gen_this : & 'a FfiSemanticLidarMeasurement , pos : usize) -> & 'a FfiSemanticLidarDetection ; pub fn carla_rust_sensor_data_FfiRadarMeasurement_GetDetectionAmount_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiRadarMeasurement) -> usize ; pub fn carla_rust_sensor_data_FfiRadarMeasurement_size_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiRadarMeasurement) -> usize ; pub fn carla_rust_sensor_data_FfiRadarMeasurement_data_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiRadarMeasurement) -> * const RadarDetection ; pub fn carla_rust_sensor_data_FfiRadarMeasurement_at_autocxx_wrapper_0xd539d5a17acbdd25 < 'a > (autocxx_gen_this : & 'a FfiRadarMeasurement , pos : usize) -> & 'a RadarDetection ; pub fn carla_rust_sensor_data_FfiGnssMeasurement_GetGeoLocation_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiGnssMeasurement) -> GeoLocation ; pub fn carla_rust_sensor_data_FfiGnssMeasurement_GetLongitude_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiGnssMeasurement) -> f64 ; pub fn carla_rust_sensor_data_FfiGnssMeasurement_GetLatitude_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiGnssMeasurement) -> f64 ; pub fn carla_rust_sensor_data_FfiGnssMeasurement_GetAltitude_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiGnssMeasurement) -> f64 ; pub fn carla_rust_sensor_data_FfiImuMeasurement_GetAccelerometer_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiImuMeasurement) -> Vector3D ; pub fn carla_rust_sensor_data_FfiImuMeasurement_GetGyroscope_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiImuMeasurement) -> Vector3D ; pub fn carla_rust_sensor_data_FfiImuMeasurement_GetCompass_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiImuMeasurement) -> f32 ; pub unsafe fn FfiSensorData_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiSensorData ; pub unsafe fn FfiSensorData_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiSensorData) ; # [namespace = "carla_rust::sensor"] type FfiSensorData = super :: bindgen :: root :: carla_rust :: sensor :: FfiSensorData ; pub fn carla_rust_sensor_FfiSensorData_GetFrame_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiSensorData) -> usize ; # [doc = " Simulation-time when the data was generated."] pub fn carla_rust_sensor_FfiSensorData_GetTimestamp_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiSensorData) -> f64 ; # [doc = " Sensor's transform when the data was generated."] pub fn carla_rust_sensor_FfiSensorData_GetSensorTransform_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiSensorData) -> FfiTransform ; # [namespace = "carla_rust::sensor"] pub fn to_image (self : & FfiSensorData) -> SharedPtr < FfiImage > ; # [namespace = "carla_rust::sensor"] pub fn to_gnss_measurement (self : & FfiSensorData) -> SharedPtr < FfiGnssMeasurement > ; # [namespace = "carla_rust::sensor"] pub fn to_imu_measurement (self : & FfiSensorData) -> SharedPtr < FfiImuMeasurement > ; # [namespace = "carla_rust::sensor"] pub fn to_collision_event (self : & FfiSensorData) -> SharedPtr < FfiCollisionEvent > ; # [namespace = "carla_rust::sensor"] pub fn to_obstacle_detection_event (self : & FfiSensorData) -> SharedPtr < FfiObstacleDetectionEvent > ; # [namespace = "carla_rust::sensor"] pub fn to_lane_invasion_event (self : & FfiSensorData) -> SharedPtr < FfiLaneInvasionEvent > ; # [namespace = "carla_rust::sensor"] pub fn to_lidar_measurement (self : & FfiSensorData) -> SharedPtr < FfiLidarMeasurement > ; # [namespace = "carla_rust::sensor"] pub fn to_semantic_lidar_measurement (self : & FfiSensorData) -> SharedPtr < FfiSemanticLidarMeasurement > ; # [namespace = "carla_rust::sensor"] pub fn to_radar_measurement (self : & FfiSensorData) -> SharedPtr < FfiRadarMeasurement > ; pub unsafe fn FfiActorAttributeValue_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiActorAttributeValue ; pub unsafe fn FfiActorAttributeValue_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiActorAttributeValue) ; # [namespace = "carla_rust::client"] type FfiActorAttributeValue = super :: bindgen :: root :: carla_rust :: client :: FfiActorAttributeValue ; pub unsafe fn FfiActorAttributeValueList_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiActorAttributeValueList ; pub unsafe fn FfiActorAttributeValueList_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiActorAttributeValueList) ; # [namespace = "carla_rust::client"] type FfiActorAttributeValueList = super :: bindgen :: root :: carla_rust :: client :: FfiActorAttributeValueList ; pub unsafe fn FfiActor_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiActor ; pub unsafe fn FfiActor_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiActor) ; # [namespace = "carla_rust::client"] type FfiActor = super :: bindgen :: root :: carla_rust :: client :: FfiActor ; pub unsafe fn ListenCallback_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut ListenCallback ; pub unsafe fn ListenCallback_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut ListenCallback) ; # [namespace = "carla_rust::client"] type ListenCallback = super :: bindgen :: root :: carla_rust :: client :: ListenCallback ; pub unsafe fn FfiWaypointList_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiWaypointList ; pub unsafe fn FfiWaypointList_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiWaypointList) ; # [namespace = "carla_rust::client"] type FfiWaypointList = super :: bindgen :: root :: carla_rust :: client :: FfiWaypointList ; pub unsafe fn FfiWaypointPair_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiWaypointPair ; pub unsafe fn FfiWaypointPair_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiWaypointPair) ; # [namespace = "carla_rust::client"] type FfiWaypointPair = super :: bindgen :: root :: carla_rust :: client :: FfiWaypointPair ; pub unsafe fn FfiJunction_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiJunction ; pub unsafe fn FfiJunction_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiJunction) ; # [namespace = "carla_rust::client"] type FfiJunction = super :: bindgen :: root :: carla_rust :: client :: FfiJunction ; pub unsafe fn FfiLandmarkList_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiLandmarkList ; pub unsafe fn FfiLandmarkList_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiLandmarkList) ; # [namespace = "carla_rust::client"] type FfiLandmarkList = super :: bindgen :: root :: carla_rust :: client :: FfiLandmarkList ; pub unsafe fn FfiWaypoint_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiWaypoint ; pub unsafe fn FfiWaypoint_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiWaypoint) ; # [namespace = "carla_rust::client"] type FfiWaypoint = super :: bindgen :: root :: carla_rust :: client :: FfiWaypoint ; pub unsafe fn FfiLandmark_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiLandmark ; pub unsafe fn FfiLandmark_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiLandmark) ; # [namespace = "carla_rust::client"] type FfiLandmark = super :: bindgen :: root :: carla_rust :: client :: FfiLandmark ; pub unsafe fn FfiTransformList_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiTransformList ; pub unsafe fn FfiTransformList_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiTransformList) ; # [namespace = "carla_rust::client"] type FfiTransformList = super :: bindgen :: root :: carla_rust :: client :: FfiTransformList ; pub unsafe fn FfiMap_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiMap ; pub unsafe fn FfiMap_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiMap) ; # [namespace = "carla_rust::client"] type FfiMap = super :: bindgen :: root :: carla_rust :: client :: FfiMap ; pub unsafe fn FfiTrafficSign_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiTrafficSign ; pub unsafe fn FfiTrafficSign_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiTrafficSign) ; # [namespace = "carla_rust::client"] type FfiTrafficSign = super :: bindgen :: root :: carla_rust :: client :: FfiTrafficSign ; pub unsafe fn FfiVehicle_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiVehicle ; pub unsafe fn FfiVehicle_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiVehicle) ; # [namespace = "carla_rust::client"] type FfiVehicle = super :: bindgen :: root :: carla_rust :: client :: FfiVehicle ; pub unsafe fn FfiSensor_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiSensor ; pub unsafe fn FfiSensor_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiSensor) ; # [namespace = "carla_rust::client"] type FfiSensor = super :: bindgen :: root :: carla_rust :: client :: FfiSensor ; pub unsafe fn FfiBlueprintLibrary_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiBlueprintLibrary ; pub unsafe fn FfiBlueprintLibrary_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiBlueprintLibrary) ; # [namespace = "carla_rust::client"] type FfiBlueprintLibrary = super :: bindgen :: root :: carla_rust :: client :: FfiBlueprintLibrary ; pub unsafe fn FfiActorList_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiActorList ; pub unsafe fn FfiActorList_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiActorList) ; # [namespace = "carla_rust::client"] type FfiActorList = super :: bindgen :: root :: carla_rust :: client :: FfiActorList ; pub unsafe fn FfiBoundingBoxList_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiBoundingBoxList ; pub unsafe fn FfiBoundingBoxList_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiBoundingBoxList) ; # [namespace = "carla_rust::client"] type FfiBoundingBoxList = super :: bindgen :: root :: carla_rust :: client :: FfiBoundingBoxList ; pub unsafe fn FfiLabelledPointList_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiLabelledPointList ; pub unsafe fn FfiLabelledPointList_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiLabelledPointList) ; # [namespace = "carla_rust::client"] type FfiLabelledPointList = super :: bindgen :: root :: carla_rust :: client :: FfiLabelledPointList ; pub unsafe fn FfiEnvironmentObjectList_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiEnvironmentObjectList ; pub unsafe fn FfiEnvironmentObjectList_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiEnvironmentObjectList) ; # [namespace = "carla_rust::client"] type FfiEnvironmentObjectList = super :: bindgen :: root :: carla_rust :: client :: FfiEnvironmentObjectList ; pub unsafe fn FfiActorVec_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiActorVec ; pub unsafe fn FfiActorVec_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiActorVec) ; # [namespace = "carla_rust::client"] type FfiActorVec = super :: bindgen :: root :: carla_rust :: client :: FfiActorVec ; pub unsafe fn FfiWorldSnapshot_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiWorldSnapshot ; pub unsafe fn FfiWorldSnapshot_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiWorldSnapshot) ; # [namespace = "carla_rust::client"] type FfiWorldSnapshot = super :: bindgen :: root :: carla_rust :: client :: FfiWorldSnapshot ; pub unsafe fn FfiClientLightState_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiClientLightState ; pub unsafe fn FfiClientLightState_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiClientLightState) ; # [namespace = "carla_rust::client"] type FfiClientLightState = super :: bindgen :: root :: carla_rust :: client :: FfiClientLightState ; pub unsafe fn FfiLightRef_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiLightRef ; pub unsafe fn FfiLightRef_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiLightRef) ; # [namespace = "carla_rust::client"] type FfiLightRef = super :: bindgen :: root :: carla_rust :: client :: FfiLightRef ; pub unsafe fn FfiLightList_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiLightList ; pub unsafe fn FfiLightList_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiLightList) ; # [namespace = "carla_rust::client"] type FfiLightList = super :: bindgen :: root :: carla_rust :: client :: FfiLightList ; pub unsafe fn FfiLightManager_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiLightManager ; pub unsafe fn FfiLightManager_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiLightManager) ; # [namespace = "carla_rust::client"] type FfiLightManager = super :: bindgen :: root :: carla_rust :: client :: FfiLightManager ; pub unsafe fn FfiWorld_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiWorld ; pub unsafe fn FfiWorld_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiWorld) ; # [namespace = "carla_rust::client"] type FfiWorld = super :: bindgen :: root :: carla_rust :: client :: FfiWorld ; pub unsafe fn FfiClient_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiClient ; pub unsafe fn FfiClient_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiClient) ; # [namespace = "carla_rust::client"] type FfiClient = super :: bindgen :: root :: carla_rust :: client :: FfiClient ; pub unsafe fn FfiTrafficLightList_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiTrafficLightList ; pub unsafe fn FfiTrafficLightList_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiTrafficLightList) ; # [namespace = "carla_rust::client"] type FfiTrafficLightList = super :: bindgen :: root :: carla_rust :: client :: FfiTrafficLightList ; pub unsafe fn FfiTrafficLight_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiTrafficLight ; pub unsafe fn FfiTrafficLight_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiTrafficLight) ; # [namespace = "carla_rust::client"] type FfiTrafficLight = super :: bindgen :: root :: carla_rust :: client :: FfiTrafficLight ; pub fn carla_rust_client_FfiActorAttributeValue_GetId_autocxx_wrapper_0xd539d5a17acbdd25 < 'a > (autocxx_gen_this : & 'a FfiActorAttributeValue) -> & 'a CxxString ; pub fn carla_rust_client_FfiActorAttributeValue_GetType_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiActorAttributeValue) -> ActorAttributeType ; pub fn carla_rust_client_FfiActorAttributeValue_GetValue_autocxx_wrapper_0xd539d5a17acbdd25 < 'a > (autocxx_gen_this : & 'a FfiActorAttributeValue) -> & 'a CxxString ; # [namespace = "carla_rust::client"] pub fn to_bool (self : & FfiActorAttributeValue) -> bool ; # [namespace = "carla_rust::client"] pub fn to_int (self : & FfiActorAttributeValue) -> c_int ; # [namespace = "carla_rust::client"] pub fn to_float (self : & FfiActorAttributeValue) -> f32 ; pub fn to_string_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiActorAttributeValue) -> UniquePtr < CxxString > ; # [namespace = "carla_rust::client"] pub fn to_color (self : & FfiActorAttributeValue) -> FfiColor ; pub fn carla_rust_client_FfiActorAttributeValueList_len_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiActorAttributeValueList) -> usize ; pub fn carla_rust_client_FfiActorAttributeValueList_data_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiActorAttributeValueList) -> * const FfiActorAttributeValue ; pub fn carla_rust_client_FfiActor_GetLocation_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiActor) -> FfiLocation ; pub fn carla_rust_client_FfiActor_GetTransform_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiActor) -> FfiTransform ; pub fn carla_rust_client_FfiActor_GetId_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiActor) -> u32 ; pub fn carla_rust_client_FfiActor_GetTypeId_autocxx_wrapper_0xd539d5a17acbdd25 < 'a > (autocxx_gen_this : & 'a FfiActor) -> & 'a CxxString ; pub fn carla_rust_client_FfiActor_GetDisplayId_autocxx_wrapper_0xd539d5a17acbdd25 < 'a > (autocxx_gen_this : & 'a FfiActor) -> & 'a CxxString ; pub fn carla_rust_client_FfiActor_GetParentId_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiActor) -> u32 ; pub fn carla_rust_client_FfiActor_GetSemanticTags_autocxx_wrapper_0xd539d5a17acbdd25 < 'a > (autocxx_gen_this : & 'a FfiActor) -> & 'a CxxVector < u8 > ; pub fn carla_rust_client_FfiActor_GetParent_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiActor) -> SharedPtr < FfiActor > ; pub fn carla_rust_client_FfiActor_GetWorld_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiActor) -> UniquePtr < FfiWorld > ; pub unsafe fn carla_rust_client_FfiActor_GetAttributes_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiActor , placement_return_type : * mut FfiActorAttributeValueList) ; pub fn carla_rust_client_FfiActor_GetVelocity_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiActor) -> Vector3D ; pub fn carla_rust_client_FfiActor_GetAngularVelocity_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiActor) -> Vector3D ; pub fn carla_rust_client_FfiActor_GetAcceleration_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiActor) -> Vector3D ; pub fn carla_rust_client_FfiActor_SetLocation_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiActor , location : & FfiLocation) ; pub fn carla_rust_client_FfiActor_SetTransform_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiActor , transform : & FfiTransform) ; pub fn carla_rust_client_FfiActor_SetTargetVelocity_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiActor , vector : & Vector3D) ; pub fn carla_rust_client_FfiActor_SetTargetAngularVelocity_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiActor , vector : & Vector3D) ; pub fn carla_rust_client_FfiActor_EnableConstantVelocity_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiActor , vector : & Vector3D) ; pub fn carla_rust_client_FfiActor_DisableConstantVelocity_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiActor) ; pub fn carla_rust_client_FfiActor_AddImpulse1_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiActor , vector : & Vector3D) ; # [namespace = "carla_rust::client"] pub fn AddImpulse2 (self : & FfiActor , impulse : & Vector3D , location : & Vector3D) ; pub fn carla_rust_client_FfiActor_AddForce1_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiActor , force : & Vector3D) ; # [namespace = "carla_rust::client"] pub fn AddForce2 (self : & FfiActor , force : & Vector3D , location : & Vector3D) ; pub fn carla_rust_client_FfiActor_AddAngularImpulse_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiActor , vector : & Vector3D) ; pub fn carla_rust_client_FfiActor_AddTorque_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiActor , vector : & Vector3D) ; pub fn carla_rust_client_FfiActor_SetSimulatePhysics_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiActor , enabled : bool) ; pub fn carla_rust_client_FfiActor_SetEnableGravity_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiActor , enabled : bool) ; pub fn carla_rust_client_FfiActor_IsAlive_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiActor) -> bool ; pub fn carla_rust_client_FfiActor_IsDormant_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiActor) -> bool ; pub fn carla_rust_client_FfiActor_IsActive_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiActor) -> bool ; # [namespace = "carla_rust::client"] pub fn to_vehicle (self : & FfiActor) -> SharedPtr < FfiVehicle > ; # [namespace = "carla_rust::client"] pub fn to_sensor (self : & FfiActor) -> SharedPtr < FfiSensor > ; # [namespace = "carla_rust::client"] pub fn to_traffic_sign (self : & FfiActor) -> SharedPtr < FfiTrafficSign > ; # [namespace = "carla_rust::client"] pub fn to_traffic_light (self : & FfiActor) -> SharedPtr < FfiTrafficLight > ; pub unsafe fn carla_rust_client_ListenCallback_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut ListenCallback , caller : * mut c_void , fn_ : * mut c_void , delete_fn : * mut c_void) ; pub unsafe fn carla_rust_client_ListenCallback_new1_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut ListenCallback , arg1 : * mut ListenCallback) ; pub unsafe fn ListenCallback_destructor_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut ListenCallback) ; pub fn carla_rust_client_FfiWaypointList_len_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWaypointList) -> usize ; pub fn carla_rust_client_FfiWaypointList_get_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWaypointList , index : usize) -> SharedPtr < FfiWaypoint > ; # [namespace = "carla_rust::client"] pub fn first (self : & FfiWaypointPair) -> SharedPtr < FfiWaypoint > ; # [namespace = "carla_rust::client"] pub fn second (self : & FfiWaypointPair) -> SharedPtr < FfiWaypoint > ; pub fn carla_rust_client_FfiJunction_GetId_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiJunction) -> i32 ; pub fn carla_rust_client_FfiJunction_GetWaypoints_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiJunction , type_ : Lane_LaneType) -> UniquePtr < CxxVector < FfiWaypointPair > > ; pub fn carla_rust_client_FfiJunction_GetBoundingBox_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiJunction) -> FfiBoundingBox ; pub fn carla_rust_client_FfiLandmarkList_len_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLandmarkList) -> usize ; pub fn carla_rust_client_FfiLandmarkList_get_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLandmarkList , index : usize) -> SharedPtr < FfiLandmark > ; pub fn carla_rust_client_FfiWaypoint_GetId_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWaypoint) -> u64 ; pub fn carla_rust_client_FfiWaypoint_GetRoadId_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWaypoint) -> u32 ; pub fn carla_rust_client_FfiWaypoint_GetSectionId_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWaypoint) -> u32 ; pub fn carla_rust_client_FfiWaypoint_GetLaneId_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWaypoint) -> i32 ; pub fn carla_rust_client_FfiWaypoint_GetDistance_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWaypoint) -> f64 ; pub fn carla_rust_client_FfiWaypoint_GetTransform_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWaypoint) -> FfiTransform ; pub fn carla_rust_client_FfiWaypoint_GetJunctionId_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWaypoint) -> i32 ; pub fn carla_rust_client_FfiWaypoint_IsJunction_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWaypoint) -> bool ; pub fn carla_rust_client_FfiWaypoint_GetJunction_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWaypoint) -> SharedPtr < FfiJunction > ; pub fn carla_rust_client_FfiWaypoint_GetLaneWidth_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWaypoint) -> f64 ; pub fn carla_rust_client_FfiWaypoint_GetType_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWaypoint) -> Lane_LaneType ; pub unsafe fn carla_rust_client_FfiWaypoint_GetNext_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWaypoint , distance : f64 , placement_return_type : * mut FfiWaypointList) ; pub unsafe fn carla_rust_client_FfiWaypoint_GetPrevious_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWaypoint , distance : f64 , placement_return_type : * mut FfiWaypointList) ; pub unsafe fn carla_rust_client_FfiWaypoint_GetNextUntilLaneEnd_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWaypoint , distance : f64 , placement_return_type : * mut FfiWaypointList) ; pub unsafe fn carla_rust_client_FfiWaypoint_GetPreviousUntilLaneStart_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWaypoint , distance : f64 , placement_return_type : * mut FfiWaypointList) ; pub fn carla_rust_client_FfiWaypoint_GetRight_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWaypoint) -> SharedPtr < FfiWaypoint > ; pub fn carla_rust_client_FfiWaypoint_GetLeft_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWaypoint) -> SharedPtr < FfiWaypoint > ; pub fn carla_rust_client_FfiWaypoint_GetRightLaneMarking_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWaypoint) -> UniquePtr < FfiLaneMarking > ; pub fn carla_rust_client_FfiWaypoint_GetLeftLaneMarking_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWaypoint) -> UniquePtr < FfiLaneMarking > ; pub fn carla_rust_client_FfiWaypoint_GetLaneChange_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWaypoint) -> LaneMarking_LaneChange ; pub unsafe fn carla_rust_client_FfiWaypoint_GetAllLandmarksInDistance_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWaypoint , distance : f64 , stop_at_junction : bool , placement_return_type : * mut FfiLandmarkList) ; pub unsafe fn carla_rust_client_FfiWaypoint_GetLandmarksOfTypeInDistance_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWaypoint , distance : f64 , filter_type : UniquePtr < CxxString > , stop_at_junction : bool , placement_return_type : * mut FfiLandmarkList) ; pub fn carla_rust_client_FfiLandmark_GetWaypoint_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLandmark) -> SharedPtr < FfiWaypoint > ; pub fn carla_rust_client_FfiLandmark_GetTransform_autocxx_wrapper_0xd539d5a17acbdd25 < 'a > (autocxx_gen_this : & 'a FfiLandmark) -> & 'a FfiTransform ; pub fn carla_rust_client_FfiLandmark_GetRoadId_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLandmark) -> u32 ; pub fn carla_rust_client_FfiLandmark_GetDistance_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLandmark) -> f64 ; pub fn carla_rust_client_FfiLandmark_GetS_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLandmark) -> f64 ; pub fn carla_rust_client_FfiLandmark_GetT_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLandmark) -> f64 ; pub fn carla_rust_client_FfiLandmark_GetId_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLandmark) -> UniquePtr < CxxString > ; pub fn carla_rust_client_FfiLandmark_GetName_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLandmark) -> UniquePtr < CxxString > ; pub fn carla_rust_client_FfiLandmark_IsDynamic_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLandmark) -> bool ; pub fn carla_rust_client_FfiLandmark_GetOrientation_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLandmark) -> SignalOrientation ; pub fn carla_rust_client_FfiLandmark_GetZOffset_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLandmark) -> f64 ; pub fn carla_rust_client_FfiLandmark_GetCountry_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLandmark) -> UniquePtr < CxxString > ; pub fn carla_rust_client_FfiLandmark_GetType_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLandmark) -> UniquePtr < CxxString > ; pub fn carla_rust_client_FfiLandmark_GetSubType_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLandmark) -> UniquePtr < CxxString > ; pub fn carla_rust_client_FfiLandmark_GetValue_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLandmark) -> f64 ; pub fn carla_rust_client_FfiLandmark_GetUnit_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLandmark) -> UniquePtr < CxxString > ; pub fn carla_rust_client_FfiLandmark_GetHeight_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLandmark) -> f64 ; pub fn carla_rust_client_FfiLandmark_GetWidth_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLandmark) -> f64 ; pub fn carla_rust_client_FfiLandmark_GetText_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLandmark) -> UniquePtr < CxxString > ; pub fn carla_rust_client_FfiLandmark_GethOffset_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLandmark) -> f64 ; pub fn carla_rust_client_FfiLandmark_GetPitch_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLandmark) -> f64 ; pub fn carla_rust_client_FfiLandmark_GetRoll_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLandmark) -> f64 ; pub fn carla_rust_client_FfiTransformList_len_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiTransformList) -> usize ; pub fn carla_rust_client_FfiTransformList_data_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiTransformList) -> * const FfiTransform ; pub fn carla_rust_client_FfiMap_GetName_autocxx_wrapper_0xd539d5a17acbdd25 < 'a > (autocxx_gen_this : & 'a FfiMap) -> & 'a CxxString ; pub fn carla_rust_client_FfiMap_GetOpenDrive_autocxx_wrapper_0xd539d5a17acbdd25 < 'a > (autocxx_gen_this : & 'a FfiMap) -> & 'a CxxString ; pub unsafe fn carla_rust_client_FfiMap_GetRecommendedSpawnPoints_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiMap , placement_return_type : * mut FfiTransformList) ; pub fn carla_rust_client_FfiMap_GetWaypoint_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiMap , location : & FfiLocation , project_to_road : bool , lane_type : i32) -> SharedPtr < FfiWaypoint > ; pub fn carla_rust_client_FfiMap_GetWaypointXODR_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiMap , road_id : u32 , lane_id : i32 , s : f32) -> SharedPtr < FfiWaypoint > ; pub fn carla_rust_client_FfiMap_GenerateWaypoints_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiMap , distance : f64) -> UniquePtr < FfiWaypointList > ; pub fn carla_rust_client_FfiMap_GetJunction_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiMap , waypoint : & FfiWaypoint) -> SharedPtr < FfiJunction > ; pub unsafe fn carla_rust_client_FfiMap_GetAllLandmarks_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiMap , placement_return_type : * mut FfiLandmarkList) ; pub unsafe fn carla_rust_client_FfiMap_GetLandmarksFromId_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiMap , id : UniquePtr < CxxString > , placement_return_type : * mut FfiLandmarkList) ; pub unsafe fn carla_rust_client_FfiMap_GetAllLandmarksOfType_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiMap , type_ : UniquePtr < CxxString > , placement_return_type : * mut FfiLandmarkList) ; pub unsafe fn carla_rust_client_FfiMap_GetLandmarkGroup_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiMap , landmark : & FfiLandmark , placement_return_type : * mut FfiLandmarkList) ; pub unsafe fn carla_rust_client_FfiMap_new1_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiMap , from : * mut FfiMap) ; pub fn carla_rust_client_FfiTrafficSign_GetTriggerVolume_autocxx_wrapper_0xd539d5a17acbdd25 < 'a > (autocxx_gen_this : & 'a FfiTrafficSign) -> & 'a FfiBoundingBox ; pub fn carla_rust_client_FfiTrafficSign_GetSignId_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiTrafficSign) -> UniquePtr < CxxString > ; # [namespace = "carla_rust::client"] pub fn to_actor (self : & FfiTrafficSign) -> SharedPtr < FfiActor > ; pub fn carla_rust_client_FfiVehicle_SetAutopilot_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiVehicle , enabled : bool , tm_port : u16) ; pub fn carla_rust_client_FfiVehicle_ShowDebugTelemetry_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiVehicle , enabled : bool) ; pub fn carla_rust_client_FfiVehicle_ApplyControl_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiVehicle , control : & VehicleControl) ; pub fn carla_rust_client_FfiVehicle_ApplyAckermannControl_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiVehicle , control : & VehicleAckermannControl) ; pub fn carla_rust_client_FfiVehicle_ApplyPhysicsControl_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiVehicle , physics_control : & FfiVehiclePhysicsControl) ; pub fn carla_rust_client_FfiVehicle_GetAckermannControllerSettings_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiVehicle) -> AckermannControllerSettings ; pub fn carla_rust_client_FfiVehicle_ApplyAckermannControllerSettings_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiVehicle , settings : & AckermannControllerSettings) ; pub fn carla_rust_client_FfiVehicle_OpenDoor_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiVehicle , door_idx : VehicleDoor) ; pub fn carla_rust_client_FfiVehicle_CloseDoor_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiVehicle , door_idx : VehicleDoor) ; pub fn carla_rust_client_FfiVehicle_SetLightState_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiVehicle , light_state : & VehicleLightState_LightState) ; pub fn carla_rust_client_FfiVehicle_SetWheelSteerDirection_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiVehicle , wheel_location : VehicleWheelLocation , angle_in_deg : f32) ; pub fn carla_rust_client_FfiVehicle_GetWheelSteerAngle_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiVehicle , wheel_location : VehicleWheelLocation) -> f32 ; pub fn carla_rust_client_FfiVehicle_GetControl_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiVehicle) -> VehicleControl ; pub unsafe fn carla_rust_client_FfiVehicle_GetPhysicsControl_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiVehicle , placement_return_type : * mut FfiVehiclePhysicsControl) ; pub fn carla_rust_client_FfiVehicle_GetLightState_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiVehicle) -> VehicleLightState_LightState ; pub fn carla_rust_client_FfiVehicle_GetSpeedLimit_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiVehicle) -> f32 ; pub fn carla_rust_client_FfiVehicle_GetTrafficLightState_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiVehicle) -> TrafficLightState ; pub fn carla_rust_client_FfiVehicle_IsAtTrafficLight_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiVehicle) -> bool ; pub fn carla_rust_client_FfiVehicle_EnableCarSim_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiVehicle , simfile_path : UniquePtr < CxxString >) ; pub fn carla_rust_client_FfiVehicle_UseCarSimRoad_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiVehicle , enabled : bool) ; pub fn carla_rust_client_FfiVehicle_EnableChronoPhysics_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiVehicle , MaxSubsteps : u64 , MaxSubstepDeltaTime : f32 , VehicleJSON : UniquePtr < CxxString > , PowertrainJSON : UniquePtr < CxxString > , TireJSON : UniquePtr < CxxString > , BaseJSONPath : UniquePtr < CxxString >) ; pub fn carla_rust_client_FfiVehicle_to_actor_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiVehicle) -> SharedPtr < FfiActor > ; pub unsafe fn carla_rust_client_FfiSensor_Listen_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiSensor , caller : * mut c_void , fn_ : * mut c_void , delete_fn : * mut c_void) ; pub fn carla_rust_client_FfiSensor_Stop_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiSensor) ; pub fn carla_rust_client_FfiSensor_IsListening_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiSensor) -> bool ; pub fn carla_rust_client_FfiSensor_to_actor_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiSensor) -> SharedPtr < FfiActor > ; # [namespace = "carla_rust::client"] pub fn filter (self : & FfiBlueprintLibrary , pattern : & CxxString) -> SharedPtr < FfiBlueprintLibrary > ; # [namespace = "carla_rust::client"] pub fn find (self : & FfiBlueprintLibrary , key : & CxxString) -> * const ActorBlueprint ; pub fn carla_rust_client_FfiBlueprintLibrary_at_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiBlueprintLibrary , pos : usize) -> * const ActorBlueprint ; # [namespace = "carla_rust::client"] pub fn is_empty (self : & FfiBlueprintLibrary) -> bool ; pub fn carla_rust_client_FfiBlueprintLibrary_size_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiBlueprintLibrary) -> usize ; pub fn carla_rust_client_FfiActorList_Find_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiActorList , actor_id : u32) -> SharedPtr < FfiActor > ; pub fn carla_rust_client_FfiActorList_Filter_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiActorList , wildcard_pattern : & CxxString) -> SharedPtr < FfiActorList > ; pub fn carla_rust_client_FfiActorList_at_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiActorList , pos : usize) -> SharedPtr < FfiActor > ; pub fn carla_rust_client_FfiActorList_empty_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiActorList) -> bool ; pub fn carla_rust_client_FfiActorList_size_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiActorList) -> usize ; pub fn carla_rust_client_FfiBoundingBoxList_len_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiBoundingBoxList) -> usize ; pub fn carla_rust_client_FfiBoundingBoxList_data_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiBoundingBoxList) -> * const FfiBoundingBox ; pub unsafe fn carla_rust_client_FfiBoundingBoxList_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiBoundingBoxList , vec : * mut CxxVector < BoundingBox >) ; pub fn carla_rust_client_FfiLabelledPointList_len_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLabelledPointList) -> usize ; pub fn carla_rust_client_FfiLabelledPointList_data_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLabelledPointList) -> * const FfiLabelledPoint ; pub unsafe fn carla_rust_client_FfiLabelledPointList_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiLabelledPointList , vec : * mut CxxVector < LabelledPoint >) ; pub fn carla_rust_client_FfiEnvironmentObjectList_len_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiEnvironmentObjectList) -> usize ; pub unsafe fn carla_rust_client_FfiEnvironmentObjectList_get_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiEnvironmentObjectList , index : usize , placement_return_type : * mut FfiEnvironmentObjectRef) ; pub unsafe fn carla_rust_client_FfiEnvironmentObjectList_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiEnvironmentObjectList , vec : * mut CxxVector < EnvironmentObject >) ; pub fn carla_rust_client_FfiActorVec_len_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiActorVec) -> usize ; pub fn carla_rust_client_FfiActorVec_get_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiActorVec , index : usize) -> SharedPtr < FfiActor > ; pub fn carla_rust_client_FfiWorldSnapshot_GetId_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWorldSnapshot) -> u64 ; pub fn carla_rust_client_FfiWorldSnapshot_GetFrame_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWorldSnapshot) -> usize ; pub fn carla_rust_client_FfiWorldSnapshot_GetTimestamp_autocxx_wrapper_0xd539d5a17acbdd25 < 'a > (autocxx_gen_this : & 'a FfiWorldSnapshot) -> & 'a Timestamp ; pub fn carla_rust_client_FfiWorldSnapshot_Contains_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWorldSnapshot , actor_id : u32) -> bool ; pub fn carla_rust_client_FfiWorldSnapshot_size_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWorldSnapshot) -> usize ; pub unsafe fn carla_rust_client_FfiWorldSnapshot_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiWorldSnapshot , base : * mut WorldSnapshot) ; pub fn carla_rust_client_FfiLightRef_GetColor_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLightRef) -> FfiColor ; pub fn carla_rust_client_FfiLightRef_GetId_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLightRef) -> u32 ; pub fn carla_rust_client_FfiLightRef_GetIntensity_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLightRef) -> f32 ; pub fn carla_rust_client_FfiLightRef_GetLocation_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLightRef) -> FfiLocation ; pub fn carla_rust_client_FfiLightRef_GetLightGroup_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLightRef) -> FfiRpcLightGroup ; pub fn carla_rust_client_FfiLightRef_GetLightState_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLightRef) -> FfiClientLightState ; pub fn carla_rust_client_FfiLightRef_IsOn_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLightRef) -> bool ; pub fn carla_rust_client_FfiLightRef_IsOff_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLightRef) -> bool ; pub fn carla_rust_client_FfiLightRef_SetColor_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiLightRef > , color : FfiColor) ; pub fn carla_rust_client_FfiLightRef_SetIntensity_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiLightRef > , intensity : f32) ; pub fn carla_rust_client_FfiLightRef_SetLightGroup_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiLightRef > , group : FfiRpcLightGroup) ; pub fn carla_rust_client_FfiLightRef_SetLightState_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiLightRef > , state : & FfiClientLightState) ; pub fn carla_rust_client_FfiLightRef_TurnOn_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiLightRef >) ; pub fn carla_rust_client_FfiLightRef_TurnOff_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiLightRef >) ; pub unsafe fn carla_rust_client_FfiLightRef_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiLightRef , base : Pin < & mut Light >) ; pub fn carla_rust_client_FfiLightList_size_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLightList) -> usize ; pub unsafe fn carla_rust_client_FfiLightList_at_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiLightList > , index : usize , placement_return_type : * mut FfiLightRef) ; pub fn carla_rust_client_FfiLightList_inner_autocxx_wrapper_0xd539d5a17acbdd25 < 'a > (autocxx_gen_this : Pin < & 'a mut FfiLightList >) -> Pin < & 'a mut CxxVector < Light > > ; pub unsafe fn carla_rust_client_FfiLightList_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiLightList , base : * mut CxxVector < Light >) ; pub unsafe fn carla_rust_client_FfiLightManager_GetAllLights_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLightManager , type_ : FfiRpcLightGroup , placement_return_type : * mut FfiLightList) ; # [namespace = "carla_rust::client"] pub fn TurnOnList (self : & FfiLightManager , lights : Pin < & mut FfiLightList >) ; # [namespace = "carla_rust::client"] pub fn TurnOffList (self : & FfiLightManager , lights : Pin < & mut FfiLightList >) ; pub unsafe fn carla_rust_client_FfiLightManager_GetTurnedOnLights_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLightManager , type_ : FfiRpcLightGroup , placement_return_type : * mut FfiLightList) ; pub unsafe fn carla_rust_client_FfiLightManager_GetTurnedOffLights_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLightManager , type_ : FfiRpcLightGroup , placement_return_type : * mut FfiLightList) ; # [namespace = "carla_rust::client"] pub fn SetColorList1 (self : & FfiLightManager , lights : Pin < & mut FfiLightList > , color : FfiColor) ; # [namespace = "carla_rust::client"] pub fn SetIntensityList1 (self : & FfiLightManager , lights : Pin < & mut FfiLightList > , intensity : f32) ; # [namespace = "carla_rust::client"] pub fn SetIntensityList2 (self : & FfiLightManager , lights : Pin < & mut FfiLightList > , intensities : Pin < & mut CxxVector < f32 > >) ; pub fn GetIntensityList_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLightManager , lights : Pin < & mut FfiLightList >) -> UniquePtr < CxxVector < f32 > > ; # [namespace = "carla_rust::client"] pub fn SetLightGroupList1 (self : & FfiLightManager , lights : Pin < & mut FfiLightList > , group : FfiRpcLightGroup) ; # [namespace = "carla_rust::client"] pub fn SetLightGroupList2 (self : & FfiLightManager , lights : Pin < & mut FfiLightList > , groups : Pin < & mut CxxVector < FfiRpcLightGroup > >) ; pub fn GetLightGroupList_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLightManager , lights : Pin < & mut FfiLightList >) -> UniquePtr < CxxVector < FfiRpcLightGroup > > ; # [namespace = "carla_rust::client"] pub fn SetLightStateList1 (self : & FfiLightManager , lights : Pin < & mut FfiLightList > , state : FfiClientLightState) ; # [namespace = "carla_rust::client"] pub fn SetLightStateList2 (self : Pin < & mut FfiLightManager > , lights : Pin < & mut FfiLightList > , states : Pin < & mut CxxVector < FfiClientLightState > >) ; pub fn GetLightStateList_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLightManager , lights : Pin < & mut FfiLightList >) -> UniquePtr < CxxVector < FfiClientLightState > > ; pub fn carla_rust_client_FfiLightManager_GetColor_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLightManager , id : u32) -> FfiColor ; pub fn carla_rust_client_FfiLightManager_GetIntensity_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLightManager , id : u32) -> f32 ; pub fn carla_rust_client_FfiLightManager_GetLightState_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLightManager , id : u32) -> FfiClientLightState ; pub fn carla_rust_client_FfiLightManager_GetLightGroup_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLightManager , id : u32) -> FfiRpcLightGroup ; pub fn carla_rust_client_FfiLightManager_IsActive_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLightManager , id : u32) -> bool ; pub fn carla_rust_client_FfiLightManager_SetActive_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLightManager , id : u32 , active : bool) ; pub fn carla_rust_client_FfiLightManager_SetColor_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLightManager , id : u32 , color : FfiColor) ; pub fn carla_rust_client_FfiLightManager_SetIntensity_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLightManager , id : u32 , intensity : f32) ; pub fn carla_rust_client_FfiLightManager_SetLightState_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLightManager , id : u32 , new_state : & FfiClientLightState) ; pub fn carla_rust_client_FfiLightManager_SetLightGroup_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLightManager , id : u32 , group : FfiRpcLightGroup) ; pub fn carla_rust_client_FfiWorld_GetId_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWorld) -> u64 ; pub fn carla_rust_client_FfiWorld_GetMap_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWorld) -> SharedPtr < FfiMap > ; pub fn carla_rust_client_FfiWorld_LoadLevelLayer_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWorld , map_layers : u16) ; pub fn carla_rust_client_FfiWorld_UnloadLevelLayer_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWorld , map_layers : u16) ; pub fn carla_rust_client_FfiWorld_GetBlueprintLibrary_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWorld) -> SharedPtr < FfiBlueprintLibrary > ; pub unsafe fn carla_rust_client_FfiWorld_GetVehiclesLightStates_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWorld , placement_return_type : * mut FfiVehicleLightStateList) ; pub fn carla_rust_client_FfiWorld_GetRandomLocationFromNavigation_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWorld) -> UniquePtr < FfiLocation > ; pub fn carla_rust_client_FfiWorld_GetSpectator_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWorld) -> SharedPtr < FfiActor > ; pub unsafe fn carla_rust_client_FfiWorld_TrySpawnActor_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiWorld > , blueprint : & ActorBlueprint , transform : & FfiTransform , parent : * mut FfiActor , attachment_type : AttachmentType) -> SharedPtr < FfiActor > ; pub fn carla_rust_client_FfiWorld_WaitForTick_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWorld , millis : usize) -> UniquePtr < FfiWorldSnapshot > ; pub fn carla_rust_client_FfiWorld_Tick_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiWorld > , millis : usize) -> u64 ; pub fn carla_rust_client_FfiWorld_SetPedestriansCrossFactor_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiWorld > , percentage : f32) ; pub fn carla_rust_client_FfiWorld_SetPedestriansSeed_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiWorld > , seed : c_uint) ; pub fn carla_rust_client_FfiWorld_GetTrafficSign_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWorld , landmark : & FfiLandmark) -> SharedPtr < FfiActor > ; pub fn carla_rust_client_FfiWorld_GetTrafficLight_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWorld , landmark : & FfiLandmark) -> SharedPtr < FfiActor > ; pub fn carla_rust_client_FfiWorld_GetTrafficLightFromOpenDRIVE_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWorld , sign_id : & CxxString) -> SharedPtr < FfiActor > ; pub fn carla_rust_client_FfiWorld_ResetAllTrafficLights_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiWorld >) ; pub fn carla_rust_client_FfiWorld_GetLightManager_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWorld) -> SharedPtr < FfiLightManager > ; pub fn carla_rust_client_FfiWorld_FreezeAllTrafficLights_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiWorld > , frozen : bool) ; pub fn carla_rust_client_FfiWorld_GetLevelBBs_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWorld , queried_tag : u8) -> UniquePtr < FfiBoundingBoxList > ; pub unsafe fn carla_rust_client_FfiWorld_GetTrafficLightsFromWaypoint_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWorld , waypoint : & FfiWaypoint , distance : f64 , placement_return_type : * mut FfiActorVec) ; pub unsafe fn carla_rust_client_FfiWorld_GetTrafficLightsInJunction_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWorld , junc_id : i32 , placement_return_type : * mut FfiActorVec) ; pub unsafe fn carla_rust_client_FfiWorld_GetSettings_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWorld , placement_return_type : * mut FfiEpisodeSettings) ; pub fn carla_rust_client_FfiWorld_ApplySettings_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiWorld > , settings : & FfiEpisodeSettings , timeout_millis : usize) -> u64 ; pub fn carla_rust_client_FfiWorld_GetSnapshot_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWorld) -> UniquePtr < FfiWorldSnapshot > ; pub fn carla_rust_client_FfiWorld_GetNamesOfAllObjects_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWorld) -> UniquePtr < CxxVector < CxxString > > ; pub fn carla_rust_client_FfiWorld_GetActor_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWorld , id : u32) -> SharedPtr < FfiActor > ; pub fn carla_rust_client_FfiWorld_GetActors_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWorld) -> SharedPtr < FfiActorList > ; # [namespace = "carla_rust::client"] pub fn GetActorsByIds (self : & FfiWorld , actor_ids : & CxxVector < u32 >) -> SharedPtr < FfiActorList > ; pub fn carla_rust_client_FfiWorld_GetWeather_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWorld) -> WeatherParameters ; pub fn carla_rust_client_FfiWorld_SetWeather_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiWorld > , weather : & WeatherParameters) ; pub unsafe fn carla_rust_client_FfiWorld_GetEnvironmentObjects_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWorld , queried_tag : u8 , placement_return_type : * mut FfiEnvironmentObjectList) ; pub unsafe fn carla_rust_client_FfiWorld_EnableEnvironmentObjects_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWorld , ids_ptr : * const u64 , ids_len : usize , enable : bool) ; pub fn carla_rust_client_FfiWorld_ProjectPoint_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWorld , location : FfiLocation , direction : Vector3D , search_distance : f32) -> UniquePtr < FfiLabelledPoint > ; pub fn carla_rust_client_FfiWorld_GroundProjection_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWorld , location : FfiLocation , search_distance : f32) -> UniquePtr < FfiLabelledPoint > ; pub unsafe fn carla_rust_client_FfiWorld_CastRay_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWorld , start_location : FfiLocation , end_location : FfiLocation , placement_return_type : * mut FfiLabelledPointList) ; pub unsafe fn clone_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiWorld , placement_return_type : * mut FfiWorld) ; pub unsafe fn carla_rust_client_FfiWorld_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiWorld , base : * mut World) ; pub unsafe fn carla_rust_client_FfiWorld_new1_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiWorld , arg1 : & FfiWorld) ; pub unsafe fn carla_rust_client_FfiWorld_new2_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiWorld , arg1 : * mut FfiWorld) ; pub fn carla_rust_client_FfiClient_GetTimeout_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiClient >) -> usize ; pub fn carla_rust_client_FfiClient_SetTimeout_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiClient > , millis : usize) ; pub fn carla_rust_client_FfiClient_GetClientVersion_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiClient) -> UniquePtr < CxxString > ; pub fn carla_rust_client_FfiClient_GetServerVersion_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiClient) -> UniquePtr < CxxString > ; pub fn carla_rust_client_FfiClient_GetAvailableMaps_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiClient) -> UniquePtr < CxxVector < CxxString > > ; pub unsafe fn carla_rust_client_FfiClient_ReloadWorld_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiClient , reset_settings : bool , placement_return_type : * mut FfiWorld) ; pub unsafe fn carla_rust_client_FfiClient_LoadWorld_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiClient , map_name : UniquePtr < CxxString > , reset_settings : bool , placement_return_type : * mut FfiWorld) ; pub unsafe fn carla_rust_client_FfiClient_GenerateOpenDriveWorld_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiClient , opendrive : UniquePtr < CxxString > , params : & OpendriveGenerationParameters , reset_settings : bool , placement_return_type : * mut FfiWorld) ; pub unsafe fn carla_rust_client_FfiClient_GetWorld_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiClient , placement_return_type : * mut FfiWorld) ; pub unsafe fn carla_rust_client_FfiClient_GetInstanceTM_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiClient , port : u16 , placement_return_type : * mut FfiTrafficManager) ; pub unsafe fn carla_rust_client_FfiClient_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiClient , host : & CxxString , port : u16 , worker_threads : usize) ; pub unsafe fn copy_actor_blueprint_autocxx_wrapper_0xd539d5a17acbdd25 (ref_ : & ActorBlueprint , placement_return_type : * mut ActorBlueprint) ; pub fn carla_rust_client_FfiTrafficLightList_len_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiTrafficLightList) -> usize ; pub fn carla_rust_client_FfiTrafficLightList_get_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiTrafficLightList , index : usize) -> SharedPtr < FfiTrafficLight > ; pub fn carla_rust_client_FfiTrafficLight_GetTriggerVolume_autocxx_wrapper_0xd539d5a17acbdd25 < 'a > (autocxx_gen_this : & 'a FfiTrafficLight) -> & 'a FfiBoundingBox ; pub fn carla_rust_client_FfiTrafficLight_GetSignId_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiTrafficLight) -> UniquePtr < CxxString > ; pub fn carla_rust_client_FfiTrafficLight_SetState_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiTrafficLight , state : TrafficLightState) ; pub fn carla_rust_client_FfiTrafficLight_GetState_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiTrafficLight) -> TrafficLightState ; pub fn carla_rust_client_FfiTrafficLight_SetGreenTime_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiTrafficLight , green_time : f32) ; pub fn carla_rust_client_FfiTrafficLight_GetGreenTime_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiTrafficLight) -> f32 ; pub fn carla_rust_client_FfiTrafficLight_SetYellowTime_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiTrafficLight , yellow_time : f32) ; pub fn carla_rust_client_FfiTrafficLight_GetYellowTime_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiTrafficLight) -> f32 ; pub fn carla_rust_client_FfiTrafficLight_SetRedTime_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiTrafficLight , red_time : f32) ; pub fn carla_rust_client_FfiTrafficLight_GetRedTime_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiTrafficLight) -> f32 ; pub fn carla_rust_client_FfiTrafficLight_GetElapsedTime_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiTrafficLight) -> f32 ; pub fn carla_rust_client_FfiTrafficLight_Freeze_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiTrafficLight , freeze : bool) ; pub fn carla_rust_client_FfiTrafficLight_IsFrozen_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiTrafficLight) -> bool ; pub fn carla_rust_client_FfiTrafficLight_GetPoleIndex_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiTrafficLight) -> u32 ; pub unsafe fn carla_rust_client_FfiTrafficLight_GetGroupTrafficLights_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiTrafficLight , placement_return_type : * mut FfiTrafficLightList) ; pub fn carla_rust_client_FfiTrafficLight_ResetGroup_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiTrafficLight) ; pub unsafe fn carla_rust_client_FfiTrafficLight_GetAffectedLaneWaypoints_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiTrafficLight , placement_return_type : * mut FfiWaypointList) ; pub unsafe fn carla_rust_client_FfiTrafficLight_GetLightBoxes_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiTrafficLight , placement_return_type : * mut FfiBoundingBoxList) ; pub fn carla_rust_client_FfiTrafficLight_GetOpenDRIVEID_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiTrafficLight) -> UniquePtr < CxxString > ; pub unsafe fn carla_rust_client_FfiTrafficLight_GetStopWaypoints_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiTrafficLight , placement_return_type : * mut FfiWaypointList) ; pub fn carla_rust_client_FfiTrafficLight_to_actor_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiTrafficLight) -> SharedPtr < FfiActor > ; pub fn new_uint8_t_vector_autocxx_wrapper_0xd539d5a17acbdd25 () -> UniquePtr < CxxVector < u8 > > ; pub fn new_uint32_t_vector_autocxx_wrapper_0xd539d5a17acbdd25 () -> UniquePtr < CxxVector < u32 > > ; pub fn new_uint64_t_vector_autocxx_wrapper_0xd539d5a17acbdd25 () -> UniquePtr < CxxVector < u64 > > ; pub fn new_vector_2d_vector_autocxx_wrapper_0xd539d5a17acbdd25 () -> UniquePtr < CxxVector < Vector2D > > ; pub fn new_ffi_location_vector_autocxx_wrapper_0xd539d5a17acbdd25 () -> UniquePtr < CxxVector < FfiLocation > > ; pub fn new_gear_physics_control_vector_autocxx_wrapper_0xd539d5a17acbdd25 () -> UniquePtr < CxxVector < GearPhysicsControl > > ; pub fn new_wheel_physics_control_vector_autocxx_wrapper_0xd539d5a17acbdd25 () -> UniquePtr < CxxVector < WheelPhysicsControl > > ; pub unsafe fn FfiLaneMarking_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiLaneMarking ; pub unsafe fn FfiLaneMarking_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiLaneMarking) ; # [namespace = "carla_rust::road::element"] type FfiLaneMarking = super :: bindgen :: root :: carla_rust :: road :: element :: FfiLaneMarking ; pub fn carla_rust_road_element_FfiLaneMarking_type_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLaneMarking) -> LaneMarking_Type ; # [namespace = "carla_rust::road::element"] pub fn color (self : & FfiLaneMarking) -> LaneMarking_Color ; # [namespace = "carla_rust::road::element"] pub fn lane_change (self : & FfiLaneMarking) -> LaneMarking_LaneChange ; pub fn carla_rust_road_element_FfiLaneMarking_width_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLaneMarking) -> f64 ; pub unsafe fn carla_rust_road_element_FfiLaneMarking_clone_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiLaneMarking , placement_return_type : * mut FfiLaneMarking) ; pub unsafe fn carla_rust_road_element_FfiLaneMarking_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiLaneMarking , base : * mut LaneMarking) ; pub unsafe fn carla_rust_road_element_FfiLaneMarking_new1_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiLaneMarking , base : Pin < & mut LaneMarking >) ; pub unsafe fn FfiAction_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiAction ; pub unsafe fn FfiAction_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiAction) ; # [namespace = "carla_rust::traffic_manager"] type FfiAction = super :: bindgen :: root :: carla_rust :: traffic_manager :: FfiAction ; pub unsafe fn FfiActionBuffer_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiActionBuffer ; pub unsafe fn FfiActionBuffer_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiActionBuffer) ; # [namespace = "carla_rust::traffic_manager"] type FfiActionBuffer = super :: bindgen :: root :: carla_rust :: traffic_manager :: FfiActionBuffer ; pub unsafe fn FfiTrafficManager_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut FfiTrafficManager ; pub unsafe fn FfiTrafficManager_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut FfiTrafficManager) ; # [namespace = "carla_rust::traffic_manager"] type FfiTrafficManager = super :: bindgen :: root :: carla_rust :: traffic_manager :: FfiTrafficManager ; # [namespace = "carla_rust::traffic_manager"] pub fn road_option (self : & FfiAction) -> RoadOption ; # [namespace = "carla_rust::traffic_manager"] pub fn waypoint (self : & FfiAction) -> SharedPtr < FfiWaypoint > ; pub unsafe fn carla_rust_traffic_manager_FfiAction_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiAction , base : * mut std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete) ; pub fn carla_rust_traffic_manager_FfiActionBuffer_size_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiActionBuffer) -> usize ; # [namespace = "carla_rust::traffic_manager"] pub fn as_ptr (self : & FfiActionBuffer) -> * const FfiAction ; pub unsafe fn carla_rust_traffic_manager_FfiActionBuffer_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiActionBuffer , base : * mut CxxVector < std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete >) ; pub fn carla_rust_traffic_manager_FfiTrafficManager_Port_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiTrafficManager) -> u16 ; pub fn carla_rust_traffic_manager_FfiTrafficManager_IsValidPort_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : & FfiTrafficManager) -> bool ; pub fn carla_rust_traffic_manager_FfiTrafficManager_SetOSMMode_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager > , mode_switch : bool) ; pub fn carla_rust_traffic_manager_FfiTrafficManager_SetCustomPath_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager > , actor : & FfiActor , path : & CxxVector < FfiLocation > , empty_buffer : bool) ; pub fn carla_rust_traffic_manager_FfiTrafficManager_RemoveUploadPath_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager > , actor_id : & u32 , remove_path : bool) ; pub fn carla_rust_traffic_manager_FfiTrafficManager_UpdateUploadPath_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager > , actor_id : & u32 , path : & CxxVector < FfiLocation >) ; pub unsafe fn carla_rust_traffic_manager_FfiTrafficManager_SetImportedRoute_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager > , actor : & FfiActor , route : * mut CxxVector < u8 > , empty_buffer : bool) ; pub fn carla_rust_traffic_manager_FfiTrafficManager_RemoveImportedRoute_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager > , actor_id : & u32 , remove_path : bool) ; pub unsafe fn carla_rust_traffic_manager_FfiTrafficManager_UpdateImportedRoute_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager > , actor_id : & u32 , route : * mut CxxVector < u8 >) ; pub fn carla_rust_traffic_manager_FfiTrafficManager_SetRespawnDormantVehicles_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager > , mode_switch : bool) ; pub fn carla_rust_traffic_manager_FfiTrafficManager_SetBoundariesRespawnDormantVehicles_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager > , lower_bound : f32 , upper_bound : f32) ; pub fn carla_rust_traffic_manager_FfiTrafficManager_SetMaxBoundaries_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager > , lower : f32 , upper : f32) ; pub fn carla_rust_traffic_manager_FfiTrafficManager_SetHybridPhysicsMode_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager > , mode_switch : bool) ; pub fn carla_rust_traffic_manager_FfiTrafficManager_SetHybridPhysicsRadius_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager > , radius : f32) ; pub unsafe fn carla_rust_traffic_manager_FfiTrafficManager_RegisterVehicles_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager > , actor_ptr : * const SharedPtr < FfiActor > , size : usize) ; pub unsafe fn carla_rust_traffic_manager_FfiTrafficManager_UnregisterVehicles_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager > , actor_ptr : * const SharedPtr < FfiActor > , size : usize) ; pub fn carla_rust_traffic_manager_FfiTrafficManager_SetPercentageSpeedDifference_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager > , actor : & FfiActor , percentage : f32) ; pub fn carla_rust_traffic_manager_FfiTrafficManager_SetLaneOffset_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager > , actor : & FfiActor , offset : f32) ; pub fn carla_rust_traffic_manager_FfiTrafficManager_SetDesiredSpeed_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager > , actor : & FfiActor , value : f32) ; pub fn carla_rust_traffic_manager_FfiTrafficManager_SetGlobalPercentageSpeedDifference_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager > , percentage : f32) ; pub fn carla_rust_traffic_manager_FfiTrafficManager_SetGlobalLaneOffset_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager > , offset : f32) ; pub fn carla_rust_traffic_manager_FfiTrafficManager_SetUpdateVehicleLights_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager > , actor : & FfiActor , do_update : bool) ; pub fn carla_rust_traffic_manager_FfiTrafficManager_SetCollisionDetection_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager > , reference_actor : & FfiActor , other_actor : & FfiActor , detect_collision : bool) ; pub fn carla_rust_traffic_manager_FfiTrafficManager_SetForceLaneChange_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager > , actor : & FfiActor , direction : bool) ; pub fn carla_rust_traffic_manager_FfiTrafficManager_SetAutoLaneChange_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager > , actor : & FfiActor , enable : bool) ; pub fn carla_rust_traffic_manager_FfiTrafficManager_SetDistanceToLeadingVehicle_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager > , actor : & FfiActor , distance : f32) ; pub fn carla_rust_traffic_manager_FfiTrafficManager_SetPercentageIgnoreWalkers_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager > , actor : & FfiActor , perc : f32) ; pub fn carla_rust_traffic_manager_FfiTrafficManager_SetPercentageIgnoreVehicles_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager > , actor : & FfiActor , perc : f32) ; pub fn carla_rust_traffic_manager_FfiTrafficManager_SetPercentageRunningSign_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager > , actor : & FfiActor , perc : f32) ; pub fn carla_rust_traffic_manager_FfiTrafficManager_SetPercentageRunningLight_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager > , actor : & FfiActor , perc : f32) ; pub fn carla_rust_traffic_manager_FfiTrafficManager_SetSynchronousMode_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager > , mode : bool) ; pub fn carla_rust_traffic_manager_FfiTrafficManager_SetSynchronousModeTimeOutInMiliSecond_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager > , time : f64) ; pub fn carla_rust_traffic_manager_FfiTrafficManager_SynchronousTick_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager >) -> bool ; pub fn carla_rust_traffic_manager_FfiTrafficManager_SetGlobalDistanceToLeadingVehicle_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager > , distance : f32) ; pub fn carla_rust_traffic_manager_FfiTrafficManager_SetKeepRightPercentage_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager > , actor : & FfiActor , percentage : f32) ; pub fn carla_rust_traffic_manager_FfiTrafficManager_SetRandomLeftLaneChangePercentage_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager > , actor : & FfiActor , percentage : f32) ; pub fn carla_rust_traffic_manager_FfiTrafficManager_SetRandomRightLaneChangePercentage_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager > , actor : & FfiActor , percentage : f32) ; pub fn carla_rust_traffic_manager_FfiTrafficManager_SetRandomDeviceSeed_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager > , seed : u64) ; pub fn carla_rust_traffic_manager_FfiTrafficManager_ShutDown_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager >) ; pub unsafe fn carla_rust_traffic_manager_FfiTrafficManager_GetNextAction_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager > , actor_id : & u32 , placement_return_type : * mut FfiAction) ; pub unsafe fn carla_rust_traffic_manager_FfiTrafficManager_GetActionBuffer_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : Pin < & mut FfiTrafficManager > , actor_id : & u32 , placement_return_type : * mut FfiActionBuffer) ; pub unsafe fn carla_rust_traffic_manager_FfiTrafficManager_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiTrafficManager , base : * mut TrafficManager) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_geom_Vector3D_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Vector3D , other : * mut Vector3D) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_geom_Vector3D_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Vector3D , other : & Vector3D) ; # [doc = "Synthesized destructor."] pub unsafe fn Vector3D_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Vector3D) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_geom_Vector3DInt_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Vector3DInt , other : * mut Vector3DInt) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_geom_Vector3DInt_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Vector3DInt , other : & Vector3DInt) ; # [doc = "Synthesized destructor."] pub unsafe fn Vector3DInt_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Vector3DInt) ; # [doc = "Synthesized default constructor."] pub unsafe fn carla_geom_Math_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Math) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_geom_Math_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Math , other : * mut Math) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_geom_Math_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Math , other : & Math) ; # [doc = "Synthesized destructor."] pub unsafe fn Math_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Math) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_geom_Rotation_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Rotation , other : * mut Rotation) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_geom_Rotation_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Rotation , other : & Rotation) ; # [doc = "Synthesized destructor."] pub unsafe fn Rotation_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Rotation) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_geom_BoundingBox_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut BoundingBox , other : * mut BoundingBox) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_geom_BoundingBox_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut BoundingBox , other : & BoundingBox) ; # [doc = "Synthesized destructor."] pub unsafe fn BoundingBox_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut BoundingBox) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_geom_Vector2D_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Vector2D , other : * mut Vector2D) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_geom_Vector2D_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Vector2D , other : & Vector2D) ; # [doc = "Synthesized destructor."] pub unsafe fn Vector2D_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Vector2D) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_geom_MeshMaterial_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut MeshMaterial , other : * mut MeshMaterial) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_geom_MeshMaterial_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut MeshMaterial , other : & MeshMaterial) ; # [doc = "Synthesized destructor."] pub unsafe fn MeshMaterial_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut MeshMaterial) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_geom_Mesh_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Mesh , other : * mut Mesh) ; # [doc = "Synthesized destructor."] pub unsafe fn Mesh_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Mesh) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_geom_GeoLocation_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut GeoLocation , other : * mut GeoLocation) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_geom_GeoLocation_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut GeoLocation , other : & GeoLocation) ; # [doc = "Synthesized destructor."] pub unsafe fn GeoLocation_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut GeoLocation) ; # [doc = "Synthesized destructor."] pub unsafe fn CubicPolynomial_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut CubicPolynomial) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rpc_VehicleControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut VehicleControl , other : * mut VehicleControl) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_rpc_VehicleControl_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut VehicleControl , other : & VehicleControl) ; # [doc = "Synthesized destructor."] pub unsafe fn VehicleControl_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut VehicleControl) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rpc_EpisodeSettings_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut EpisodeSettings , other : * mut EpisodeSettings) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_rpc_EpisodeSettings_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut EpisodeSettings , other : & EpisodeSettings) ; # [doc = "Synthesized destructor."] pub unsafe fn EpisodeSettings_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut EpisodeSettings) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rpc_LabelledPoint_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut LabelledPoint , other : * mut LabelledPoint) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_rpc_LabelledPoint_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut LabelledPoint , other : & LabelledPoint) ; # [doc = "Synthesized destructor."] pub unsafe fn LabelledPoint_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut LabelledPoint) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rpc_GearPhysicsControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut GearPhysicsControl , other : * mut GearPhysicsControl) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_rpc_GearPhysicsControl_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut GearPhysicsControl , other : & GearPhysicsControl) ; # [doc = "Synthesized destructor."] pub unsafe fn GearPhysicsControl_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut GearPhysicsControl) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rpc_WheelPhysicsControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut WheelPhysicsControl , other : * mut WheelPhysicsControl) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_rpc_WheelPhysicsControl_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut WheelPhysicsControl , other : & WheelPhysicsControl) ; # [doc = "Synthesized destructor."] pub unsafe fn WheelPhysicsControl_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut WheelPhysicsControl) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rpc_WeatherParameters_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut WeatherParameters , other : * mut WeatherParameters) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_rpc_WeatherParameters_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut WeatherParameters , other : & WeatherParameters) ; # [doc = "Synthesized destructor."] pub unsafe fn WeatherParameters_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut WeatherParameters) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rpc_VehicleLightState_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut VehicleLightState , other : * mut VehicleLightState) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_rpc_VehicleLightState_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut VehicleLightState , other : & VehicleLightState) ; # [doc = "Synthesized destructor."] pub unsafe fn VehicleLightState_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut VehicleLightState) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rpc_AckermannControllerSettings_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut AckermannControllerSettings , other : * mut AckermannControllerSettings) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_rpc_AckermannControllerSettings_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut AckermannControllerSettings , other : & AckermannControllerSettings) ; # [doc = "Synthesized destructor."] pub unsafe fn AckermannControllerSettings_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut AckermannControllerSettings) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rpc_VehicleAckermannControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut VehicleAckermannControl , other : * mut VehicleAckermannControl) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_rpc_VehicleAckermannControl_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut VehicleAckermannControl , other : & VehicleAckermannControl) ; # [doc = "Synthesized destructor."] pub unsafe fn VehicleAckermannControl_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut VehicleAckermannControl) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rpc_OpendriveGenerationParameters_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut OpendriveGenerationParameters , other : * mut OpendriveGenerationParameters) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_rpc_OpendriveGenerationParameters_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut OpendriveGenerationParameters , other : & OpendriveGenerationParameters) ; # [doc = "Synthesized destructor."] pub unsafe fn OpendriveGenerationParameters_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut OpendriveGenerationParameters) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_sensor_data_SemanticLidarDetection_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut SemanticLidarDetection , other : * mut SemanticLidarDetection) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_sensor_data_SemanticLidarDetection_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut SemanticLidarDetection , other : & SemanticLidarDetection) ; # [doc = "Synthesized destructor."] pub unsafe fn SemanticLidarDetection_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut SemanticLidarDetection) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_sensor_data_LidarDetection_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut LidarDetection , other : * mut LidarDetection) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_sensor_data_LidarDetection_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut LidarDetection , other : & LidarDetection) ; # [doc = "Synthesized destructor."] pub unsafe fn LidarDetection_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut LidarDetection) ; # [doc = "Synthesized destructor."] pub unsafe fn LidarMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut LidarMeasurement) ; # [doc = "Synthesized destructor."] pub unsafe fn SemanticLidarMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut SemanticLidarMeasurement) ; # [doc = "Synthesized default constructor."] pub unsafe fn carla_sensor_data_RadarDetection_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut RadarDetection) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_sensor_data_RadarDetection_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut RadarDetection , other : * mut RadarDetection) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_sensor_data_RadarDetection_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut RadarDetection , other : & RadarDetection) ; # [doc = "Synthesized destructor."] pub unsafe fn RadarDetection_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut RadarDetection) ; # [doc = "Synthesized destructor."] pub unsafe fn RadarData_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut RadarData) ; # [doc = "Synthesized destructor."] pub unsafe fn RadarMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut RadarMeasurement) ; # [doc = "Synthesized destructor."] pub unsafe fn Landmark_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Landmark) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_client_Timestamp_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Timestamp , other : * mut Timestamp) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_client_Timestamp_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Timestamp , other : & Timestamp) ; # [doc = "Synthesized destructor."] pub unsafe fn Timestamp_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Timestamp) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_client_WorldSnapshot_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut WorldSnapshot , other : * mut WorldSnapshot) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_client_WorldSnapshot_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut WorldSnapshot , other : & WorldSnapshot) ; # [doc = "Synthesized destructor."] pub unsafe fn WorldSnapshot_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut WorldSnapshot) ; # [doc = "Synthesized destructor."] pub unsafe fn Light_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Light) ; # [doc = "Synthesized destructor."] pub unsafe fn ActorBlueprint_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut ActorBlueprint) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rust_geom_FfiLocation_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiLocation , other : * mut FfiLocation) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_rust_geom_FfiLocation_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiLocation , other : & FfiLocation) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiLocation_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiLocation) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rust_geom_FfiTransform_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiTransform , other : * mut FfiTransform) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_rust_geom_FfiTransform_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiTransform , other : & FfiTransform) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiTransform_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiTransform) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rust_geom_FfiBoundingBox_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiBoundingBox , other : * mut FfiBoundingBox) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_rust_geom_FfiBoundingBox_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiBoundingBox , other : & FfiBoundingBox) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiBoundingBox_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiBoundingBox) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rust_rpc_FfiVehiclePhysicsControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiVehiclePhysicsControl , other : * mut FfiVehiclePhysicsControl) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiVehiclePhysicsControl_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiVehiclePhysicsControl) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rust_rpc_FfiEpisodeSettings_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiEpisodeSettings , other : * mut FfiEpisodeSettings) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_rust_rpc_FfiEpisodeSettings_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiEpisodeSettings , other : & FfiEpisodeSettings) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiEpisodeSettings_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiEpisodeSettings) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rust_rpc_FfiLabelledPoint_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiLabelledPoint , other : * mut FfiLabelledPoint) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_rust_rpc_FfiLabelledPoint_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiLabelledPoint , other : & FfiLabelledPoint) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiLabelledPoint_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiLabelledPoint) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rust_rpc_FfiVehicleLightStateElementRef_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiVehicleLightStateElementRef , other : * mut FfiVehicleLightStateElementRef) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_rust_rpc_FfiVehicleLightStateElementRef_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiVehicleLightStateElementRef , other : & FfiVehicleLightStateElementRef) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiVehicleLightStateElementRef_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiVehicleLightStateElementRef) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rust_rpc_FfiVehicleLightStateList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiVehicleLightStateList , other : * mut FfiVehicleLightStateList) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiVehicleLightStateList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiVehicleLightStateList) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rust_rpc_FfiEnvironmentObjectRef_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiEnvironmentObjectRef , other : * mut FfiEnvironmentObjectRef) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_rust_rpc_FfiEnvironmentObjectRef_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiEnvironmentObjectRef , other : & FfiEnvironmentObjectRef) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiEnvironmentObjectRef_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiEnvironmentObjectRef) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rust_rpc_FfiRpcColor_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiRpcColor , other : * mut FfiRpcColor) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_rust_rpc_FfiRpcColor_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiRpcColor , other : & FfiRpcColor) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiRpcColor_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiRpcColor) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rust_rpc_FfiRpcLightState_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiRpcLightState , other : * mut FfiRpcLightState) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_rust_rpc_FfiRpcLightState_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiRpcLightState , other : & FfiRpcLightState) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiRpcLightState_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiRpcLightState) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rust_sensor_data_FfiColor_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiColor , other : * mut FfiColor) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_rust_sensor_data_FfiColor_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiColor , other : & FfiColor) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiColor_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiColor) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiCollisionEvent_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiCollisionEvent) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiImage_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiImage) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiLaneInvasionEvent_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiLaneInvasionEvent) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rust_sensor_data_FfiLidarDetection_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiLidarDetection , other : * mut FfiLidarDetection) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_rust_sensor_data_FfiLidarDetection_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiLidarDetection , other : & FfiLidarDetection) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiLidarDetection_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiLidarDetection) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiObstacleDetectionEvent_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiObstacleDetectionEvent) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rust_sensor_data_FfiSemanticLidarDetection_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiSemanticLidarDetection , other : * mut FfiSemanticLidarDetection) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_rust_sensor_data_FfiSemanticLidarDetection_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiSemanticLidarDetection , other : & FfiSemanticLidarDetection) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiSemanticLidarDetection_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiSemanticLidarDetection) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiLidarMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiLidarMeasurement) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiSemanticLidarMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiSemanticLidarMeasurement) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiRadarMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiRadarMeasurement) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiGnssMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiGnssMeasurement) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiImuMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiImuMeasurement) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiSensorData_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiSensorData) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rust_client_FfiActorAttributeValue_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiActorAttributeValue , other : * mut FfiActorAttributeValue) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_rust_client_FfiActorAttributeValue_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiActorAttributeValue , other : & FfiActorAttributeValue) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiActorAttributeValue_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiActorAttributeValue) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiActor_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiActor) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rust_client_FfiWaypointList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiWaypointList , other : * mut FfiWaypointList) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_rust_client_FfiWaypointList_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiWaypointList , other : & FfiWaypointList) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiWaypointList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiWaypointList) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rust_client_FfiWaypointPair_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiWaypointPair , other : * mut FfiWaypointPair) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_rust_client_FfiWaypointPair_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiWaypointPair , other : & FfiWaypointPair) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiWaypointPair_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiWaypointPair) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiJunction_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiJunction) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rust_client_FfiLandmarkList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiLandmarkList , other : * mut FfiLandmarkList) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_rust_client_FfiLandmarkList_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiLandmarkList , other : & FfiLandmarkList) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiLandmarkList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiLandmarkList) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiWaypoint_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiWaypoint) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiLandmark_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiLandmark) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rust_client_FfiTransformList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiTransformList , other : * mut FfiTransformList) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiTransformList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiTransformList) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiMap_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiMap) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiTrafficSign_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiTrafficSign) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiVehicle_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiVehicle) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiSensor_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiSensor) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiBlueprintLibrary_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiBlueprintLibrary) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiActorList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiActorList) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rust_client_FfiBoundingBoxList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiBoundingBoxList , other : * mut FfiBoundingBoxList) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiBoundingBoxList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiBoundingBoxList) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rust_client_FfiLabelledPointList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiLabelledPointList , other : * mut FfiLabelledPointList) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiLabelledPointList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiLabelledPointList) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rust_client_FfiEnvironmentObjectList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiEnvironmentObjectList , other : * mut FfiEnvironmentObjectList) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiEnvironmentObjectList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiEnvironmentObjectList) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rust_client_FfiActorVec_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiActorVec , other : * mut FfiActorVec) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_rust_client_FfiActorVec_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiActorVec , other : & FfiActorVec) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiActorVec_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiActorVec) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rust_client_FfiWorldSnapshot_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiWorldSnapshot , other : * mut FfiWorldSnapshot) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_rust_client_FfiWorldSnapshot_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiWorldSnapshot , other : & FfiWorldSnapshot) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiWorldSnapshot_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiWorldSnapshot) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rust_client_FfiClientLightState_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiClientLightState , other : * mut FfiClientLightState) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_rust_client_FfiClientLightState_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiClientLightState , other : & FfiClientLightState) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiClientLightState_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiClientLightState) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rust_client_FfiLightRef_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiLightRef , other : * mut FfiLightRef) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_rust_client_FfiLightRef_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiLightRef , other : & FfiLightRef) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiLightRef_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiLightRef) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rust_client_FfiLightList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiLightList , other : * mut FfiLightList) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiLightList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiLightList) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiLightManager_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiLightManager) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rust_client_FfiClient_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiClient , other : * mut FfiClient) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_rust_client_FfiClient_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiClient , other : & FfiClient) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiClient_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiClient) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rust_client_FfiTrafficLightList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiTrafficLightList , other : * mut FfiTrafficLightList) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_rust_client_FfiTrafficLightList_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiTrafficLightList , other : & FfiTrafficLightList) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiTrafficLightList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiTrafficLightList) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiTrafficLight_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiTrafficLight) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rust_traffic_manager_FfiActionBuffer_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiActionBuffer , other : * mut FfiActionBuffer) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiActionBuffer_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiActionBuffer) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rust_traffic_manager_FfiTrafficManager_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiTrafficManager , other : * mut FfiTrafficManager) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_rust_traffic_manager_FfiTrafficManager_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiTrafficManager , other : & FfiTrafficManager) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiTrafficManager_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiTrafficManager) ; # [doc = "Synthesized destructor."] pub unsafe fn IMUMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut IMUMeasurement) ; # [doc = "Synthesized destructor."] pub unsafe fn GnssMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut GnssMeasurement) ; # [doc = "Synthesized destructor."] pub unsafe fn Vehicle_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Vehicle) ; # [doc = "Synthesized destructor."] pub unsafe fn TrafficSign_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut TrafficSign) ; # [doc = "Synthesized destructor."] pub unsafe fn TrafficLight_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut TrafficLight) ; # [doc = "Synthesized destructor."] pub unsafe fn Walker_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut Walker) ; # [doc = "Synthesized destructor."] pub unsafe fn ActorList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut ActorList) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiActorAttributeValueList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiActorAttributeValueList) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiWorld_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiWorld) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rust_road_element_FfiLaneMarking_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiLaneMarking , other : * mut FfiLaneMarking) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_rust_road_element_FfiLaneMarking_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiLaneMarking , other : & FfiLaneMarking) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiLaneMarking_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiLaneMarking) ; # [doc = "Synthesized destructor."] pub unsafe fn FfiAction_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut FfiAction) ; type std_pair_float_float_AutocxxConcrete ; # [namespace = "carla::rpc::VehicleLightState"] # [cxx_name = "LightState"] # [doc = " Can be used as flags"] type VehicleLightState_LightState = super :: bindgen :: root :: carla :: rpc :: VehicleLightState_LightState ; type std_basic_ostream_char_AutocxxConcrete ; # [namespace = "carla::sensor"] # [doc = " Wrapper around the raw data generated by a sensor plus some useful\n meta-information."] type RawData = super :: bindgen :: root :: carla :: sensor :: RawData ; type carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete ; # [namespace = "carla::road"] type SignalOrientation = super :: bindgen :: root :: carla :: road :: SignalOrientation ; # [namespace = "carla::road"] type LaneValidity = super :: bindgen :: root :: carla :: road :: LaneValidity ; # [namespace = "carla::client::detail"] # [doc = " Represents the state of all the actors of an episode at a given frame."] type EpisodeState = super :: bindgen :: root :: carla :: client :: detail :: EpisodeState ; # [namespace = "carla::rpc"] type VehiclePhysicsControl = super :: bindgen :: root :: carla :: rpc :: VehiclePhysicsControl ; # [namespace = "carla::rpc"] type VehicleFailureState = super :: bindgen :: root :: carla :: rpc :: VehicleFailureState ; # [namespace = "carla::client"] # [doc = " Used to initialize Actor classes. Only the ActorFactory can create this\n object, thus only the ActorFactory can create actors."] type ActorInitializer = super :: bindgen :: root :: carla :: client :: ActorInitializer ; # [namespace = "carla::rpc"] type WalkerControl = super :: bindgen :: root :: carla :: rpc :: WalkerControl ; # [namespace = "carla::rpc"] type WalkerBoneControlOut = super :: bindgen :: root :: carla :: rpc :: WalkerBoneControlOut ; # [namespace = "carla::rpc"] type WalkerBoneControlIn = super :: bindgen :: root :: carla :: rpc :: WalkerBoneControlIn ; # [namespace = "carla::rpc"] type ActorDescription = super :: bindgen :: root :: carla :: rpc :: ActorDescription ; # [namespace = "carla::rpc"] type ActorDefinition = super :: bindgen :: root :: carla :: rpc :: ActorDefinition ; type std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete ; # [namespace = "carla::rpc"] type EnvironmentObject = super :: bindgen :: root :: carla :: rpc :: EnvironmentObject ; # [namespace = "carla::road::Lane"] # [cxx_name = "LaneType"] # [doc = " Can be used as flags"] type Lane_LaneType = super :: bindgen :: root :: carla :: road :: Lane_LaneType ; # [namespace = "carla::client"] type World = super :: bindgen :: root :: carla :: client :: World ; # [namespace = "carla::road::element"] type LaneMarking = super :: bindgen :: root :: carla :: road :: element :: LaneMarking ; type std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete ; # [namespace = "carla::traffic_manager"] # [doc = " This class integrates all the various stages of\n the traffic manager appropriately using messengers."] type TrafficManager = super :: bindgen :: root :: carla :: traffic_manager :: TrafficManager ; pub unsafe fn RawData_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut RawData ; pub unsafe fn RawData_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut RawData) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_sensor_RawData_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut RawData , other : * mut RawData) ; pub unsafe fn LaneValidity_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut LaneValidity ; pub unsafe fn LaneValidity_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut LaneValidity) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_road_LaneValidity_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut LaneValidity , other : * mut LaneValidity) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_road_LaneValidity_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut LaneValidity , other : & LaneValidity) ; pub unsafe fn EpisodeState_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut EpisodeState ; pub unsafe fn EpisodeState_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut EpisodeState) ; pub unsafe fn VehiclePhysicsControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut VehiclePhysicsControl ; pub unsafe fn VehiclePhysicsControl_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut VehiclePhysicsControl) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rpc_VehiclePhysicsControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut VehiclePhysicsControl , other : * mut VehiclePhysicsControl) ; pub unsafe fn ActorInitializer_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut ActorInitializer ; pub unsafe fn ActorInitializer_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut ActorInitializer) ; pub unsafe fn carla_client_ActorInitializer_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut ActorInitializer , arg1 : * mut ActorInitializer) ; pub unsafe fn WalkerControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut WalkerControl ; pub unsafe fn WalkerControl_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut WalkerControl) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rpc_WalkerControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut WalkerControl , other : * mut WalkerControl) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_rpc_WalkerControl_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut WalkerControl , other : & WalkerControl) ; pub unsafe fn WalkerBoneControlOut_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut WalkerBoneControlOut ; pub unsafe fn WalkerBoneControlOut_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut WalkerBoneControlOut) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rpc_WalkerBoneControlOut_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut WalkerBoneControlOut , other : * mut WalkerBoneControlOut) ; pub unsafe fn WalkerBoneControlIn_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut WalkerBoneControlIn ; pub unsafe fn WalkerBoneControlIn_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut WalkerBoneControlIn) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rpc_WalkerBoneControlIn_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut WalkerBoneControlIn , other : * mut WalkerBoneControlIn) ; pub unsafe fn ActorDescription_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut ActorDescription ; pub unsafe fn ActorDescription_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut ActorDescription) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rpc_ActorDescription_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut ActorDescription , other : * mut ActorDescription) ; pub unsafe fn ActorDefinition_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut ActorDefinition ; pub unsafe fn ActorDefinition_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut ActorDefinition) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_rpc_ActorDefinition_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut ActorDefinition , other : * mut ActorDefinition) ; pub unsafe fn EnvironmentObject_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut EnvironmentObject ; pub unsafe fn EnvironmentObject_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut EnvironmentObject) ; pub unsafe fn World_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut World ; pub unsafe fn World_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut World) ; pub unsafe fn carla_client_World_new1_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut World , arg1 : & World) ; pub unsafe fn carla_client_World_new2_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut World , arg1 : * mut World) ; pub unsafe fn LaneMarking_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut LaneMarking ; pub unsafe fn LaneMarking_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut LaneMarking) ; # [doc = "Synthesized move constructor."] pub unsafe fn carla_road_element_LaneMarking_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut LaneMarking , other : * mut LaneMarking) ; # [doc = "Synthesized copy constructor."] pub unsafe fn carla_road_element_LaneMarking_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut LaneMarking , other : & LaneMarking) ; pub unsafe fn TrafficManager_alloc_autocxx_wrapper_0xd539d5a17acbdd25 () -> * mut TrafficManager ; pub unsafe fn TrafficManager_free_autocxx_wrapper_0xd539d5a17acbdd25 (arg0 : * mut TrafficManager) ; pub unsafe fn carla_traffic_manager_TrafficManager_new1_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut TrafficManager , other : & TrafficManager) ; pub unsafe fn carla_traffic_manager_TrafficManager_new3_autocxx_wrapper_0xd539d5a17acbdd25 (autocxx_gen_this : * mut TrafficManager , arg1 : * mut TrafficManager) ; type c_int = autocxx :: c_int ; type c_uint = autocxx :: c_uint ; type c_void = autocxx :: c_void ; include ! ("carla_rust.hpp") ; include ! ("carla/Time.h") ; include ! ("carla/Memory.h") ; include ! ("carla/geom/Location.h") ; include ! ("carla/geom/Rotation.h") ; include ! ("carla/geom/Transform.h") ; include ! ("carla/geom/Vector2D.h") ; include ! ("carla/geom/Vector3D.h") ; include ! ("carla/rpc/AttachmentType.h") ; include ! ("carla/rpc/VehicleControl.h") ; include ! ("carla/rpc/VehicleLightState.h") ; include ! ("carla/rpc/VehicleDoor.h") ; include ! ("carla/rpc/VehicleWheels.h") ; include ! ("carla/rpc/VehicleAckermannControl.h") ; include ! ("carla/rpc/OpendriveGenerationParameters.h") ; include ! ("carla/rpc/TrafficLightState.h") ; include ! ("carla/rpc/GearPhysicsControl.h") ; include ! ("carla/rpc/WeatherParameters.h") ; include ! ("carla/rpc/ObjectLabel.h") ; include ! ("carla/trafficmanager/Constants.h") ; include ! ("carla/trafficmanager/TrafficManager.h") ; include ! ("carla/trafficmanager/SimpleWaypoint.h") ; include ! ("carla/client/Waypoint.h") ; include ! ("carla/client/Sensor.h") ; include ! ("carla/client/Vehicle.h") ; include ! ("carla/client/Walker.h") ; include ! ("carla/client/TrafficLight.h") ; include ! ("carla/client/TrafficSign.h") ; include ! ("carla/client/Junction.h") ; include ! ("carla/client/ActorBlueprint.h") ; include ! ("carla/client/ActorList.h") ; include ! ("carla/client/BlueprintLibrary.h") ; include ! ("carla/client/Landmark.h") ; include ! ("carla/client/LaneInvasionSensor.h") ; include ! ("carla/client/Light.h") ; include ! ("carla/client/LightManager.h") ; include ! ("carla/client/Map.h") ; include ! ("carla/client/World.h") ; include ! ("carla/client/WorldSnapshot.h") ; include ! ("carla/client/Timestamp.h") ; include ! ("carla/client/Light.h") ; include ! ("carla/sensor/SensorData.h") ; include ! ("carla/sensor/data/Image.h") ; include ! ("carla/sensor/data/RadarMeasurement.h") ; include ! ("carla/sensor/data/RadarData.h") ; include ! ("carla/sensor/data/LidarMeasurement.h") ; include ! ("carla/sensor/data/SemanticLidarMeasurement.h") ; include ! ("carla/sensor/data/LidarData.h") ; include ! ("carla/sensor/data/SemanticLidarData.h") ; include ! ("carla/sensor/data/ObstacleDetectionEvent.h") ; include ! ("carla/sensor/data/CollisionEvent.h") ; include ! ("carla/sensor/data/LaneInvasionEvent.h") ; include ! ("autocxxgen_ffi.h") ; } extern "Rust" { } } # [allow (unused_imports)] use bindgen :: root ; pub use cxxbridge :: autocxx_make_string_0xd539d5a17acbdd25 as make_string ; pub use bindgen :: root :: std_pair_float_float_AutocxxConcrete ; pub use bindgen :: root :: std_basic_ostream_char_AutocxxConcrete ; pub use bindgen :: root :: carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete ; pub use bindgen :: root :: std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete ; pub use bindgen :: root :: std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete ; pub mod carla { pub use super :: bindgen :: root :: carla :: SharedPtr ; pub use super :: bindgen :: root :: carla :: time_duration ; pub mod client { pub use super :: super :: bindgen :: root :: carla :: client :: Landmark ; pub use super :: super :: bindgen :: root :: carla :: client :: Junction ; pub use super :: super :: bindgen :: root :: carla :: client :: Timestamp ; pub use super :: super :: bindgen :: root :: carla :: client :: WorldSnapshot ; pub use super :: super :: bindgen :: root :: carla :: client :: Light ; pub use super :: super :: bindgen :: root :: carla :: client :: Vehicle ; pub use super :: super :: bindgen :: root :: carla :: client :: TrafficSign ; pub use super :: super :: bindgen :: root :: carla :: client :: TrafficLight ; pub use super :: super :: bindgen :: root :: carla :: client :: Walker ; pub use super :: super :: bindgen :: root :: carla :: client :: ActorBlueprint ; pub use super :: super :: bindgen :: root :: carla :: client :: ActorList ; pub use super :: super :: bindgen :: root :: carla :: client :: LaneInvasionSensor ; pub use super :: super :: bindgen :: root :: carla :: client :: Vehicle_Control ; pub use super :: super :: bindgen :: root :: carla :: client :: Vehicle_AckermannControl ; pub use super :: super :: bindgen :: root :: carla :: client :: Vehicle_PhysicsControl ; pub use super :: super :: bindgen :: root :: carla :: client :: ActorInitializer ; pub use super :: super :: bindgen :: root :: carla :: client :: Walker_Control ; pub use super :: super :: bindgen :: root :: carla :: client :: Walker_BoneControlOut ; pub use super :: super :: bindgen :: root :: carla :: client :: Walker_BoneControlIn ; pub use super :: super :: bindgen :: root :: carla :: client :: World ; pub mod detail { pub use super :: super :: super :: bindgen :: root :: carla :: client :: detail :: EpisodeState ; } } pub mod geom { pub use super :: super :: bindgen :: root :: carla :: geom :: Vector3D ; pub use super :: super :: bindgen :: root :: carla :: geom :: Vector3DInt ; pub use super :: super :: bindgen :: root :: carla :: geom :: Math ; pub use super :: super :: bindgen :: root :: carla :: geom :: Location ; pub use super :: super :: bindgen :: root :: carla :: geom :: Rotation ; pub use super :: super :: bindgen :: root :: carla :: geom :: BoundingBox ; pub use super :: super :: bindgen :: root :: carla :: geom :: Vector2D ; pub use super :: super :: bindgen :: root :: carla :: geom :: MeshMaterial ; pub use super :: super :: bindgen :: root :: carla :: geom :: Mesh ; pub use super :: super :: bindgen :: root :: carla :: geom :: Mesh_vertex_type ; pub use super :: super :: bindgen :: root :: carla :: geom :: Mesh_normal_type ; pub use super :: super :: bindgen :: root :: carla :: geom :: Mesh_index_type ; pub use super :: super :: bindgen :: root :: carla :: geom :: Mesh_uv_type ; pub use super :: super :: bindgen :: root :: carla :: geom :: Mesh_material_type ; pub use super :: super :: bindgen :: root :: carla :: geom :: PointCloudRtree_BPoint ; pub use super :: super :: bindgen :: root :: carla :: geom :: PointCloudRtree_TreeElement ; pub use super :: super :: bindgen :: root :: carla :: geom :: SegmentCloudRtree_BPoint ; pub use super :: super :: bindgen :: root :: carla :: geom :: SegmentCloudRtree_BSegment ; pub use super :: super :: bindgen :: root :: carla :: geom :: SegmentCloudRtree_TreeElement ; pub use super :: super :: bindgen :: root :: carla :: geom :: GeoLocation ; pub use super :: super :: bindgen :: root :: carla :: geom :: CubicPolynomial ; pub use super :: super :: bindgen :: root :: carla :: geom :: CubicPolynomial_value_type ; pub use super :: super :: bindgen :: root :: carla :: geom :: Transform ; } pub mod road { pub use super :: super :: bindgen :: root :: carla :: road :: RoadId ; pub use super :: super :: bindgen :: root :: carla :: road :: SignalOrientation ; pub use super :: super :: bindgen :: root :: carla :: road :: LaneValidity ; pub use super :: super :: bindgen :: root :: carla :: road :: SignId ; pub use super :: super :: bindgen :: root :: carla :: road :: JuncId ; pub use super :: super :: bindgen :: root :: carla :: road :: Lane_LaneType ; pub use super :: super :: bindgen :: root :: carla :: road :: SectionId ; pub use super :: super :: bindgen :: root :: carla :: road :: LaneId ; pub mod element { pub use super :: super :: super :: bindgen :: root :: carla :: road :: element :: LaneMarking_Type ; pub use super :: super :: super :: bindgen :: root :: carla :: road :: element :: LaneMarking_Color ; pub use super :: super :: super :: bindgen :: root :: carla :: road :: element :: LaneMarking_LaneChange ; pub use super :: super :: super :: bindgen :: root :: carla :: road :: element :: LaneMarking ; } } pub mod rpc { pub use super :: super :: bindgen :: root :: carla :: rpc :: ActorState ; pub use super :: super :: bindgen :: root :: carla :: rpc :: TrafficLightState ; pub use super :: super :: bindgen :: root :: carla :: rpc :: VehicleControl ; pub use super :: super :: bindgen :: root :: carla :: rpc :: ActorAttributeType ; pub use super :: super :: bindgen :: root :: carla :: rpc :: LightId ; pub use super :: super :: bindgen :: root :: carla :: rpc :: AttachmentType ; pub use super :: super :: bindgen :: root :: carla :: rpc :: EpisodeSettings ; pub use super :: super :: bindgen :: root :: carla :: rpc :: CityObjectLabel ; pub use super :: super :: bindgen :: root :: carla :: rpc :: LabelledPoint ; pub use super :: super :: bindgen :: root :: carla :: rpc :: GearPhysicsControl ; pub use super :: super :: bindgen :: root :: carla :: rpc :: WheelPhysicsControl ; pub use super :: super :: bindgen :: root :: carla :: rpc :: WeatherParameters ; pub use super :: super :: bindgen :: root :: carla :: rpc :: VehicleLightState ; pub use super :: super :: bindgen :: root :: carla :: rpc :: AckermannControllerSettings ; pub use super :: super :: bindgen :: root :: carla :: rpc :: VehicleAckermannControl ; pub use super :: super :: bindgen :: root :: carla :: rpc :: VehicleDoor ; pub use super :: super :: bindgen :: root :: carla :: rpc :: VehicleWheelLocation ; pub use super :: super :: bindgen :: root :: carla :: rpc :: OpendriveGenerationParameters ; pub use super :: super :: bindgen :: root :: carla :: rpc :: VehicleLightState_LightState ; pub use super :: super :: bindgen :: root :: carla :: rpc :: VehicleLightState_flag_type ; pub use super :: super :: bindgen :: root :: carla :: rpc :: VehiclePhysicsControl ; pub use super :: super :: bindgen :: root :: carla :: rpc :: VehicleFailureState ; pub use super :: super :: bindgen :: root :: carla :: rpc :: WalkerControl ; pub use super :: super :: bindgen :: root :: carla :: rpc :: WalkerBoneControlOut ; pub use super :: super :: bindgen :: root :: carla :: rpc :: WalkerBoneControlIn ; pub use super :: super :: bindgen :: root :: carla :: rpc :: ActorDescription ; pub use super :: super :: bindgen :: root :: carla :: rpc :: ActorDefinition ; pub use super :: super :: bindgen :: root :: carla :: rpc :: VehicleLightStateList ; pub use super :: super :: bindgen :: root :: carla :: rpc :: EnvironmentObject ; } pub mod sensor { pub use super :: super :: bindgen :: root :: carla :: sensor :: SensorData ; pub use super :: super :: bindgen :: root :: carla :: sensor :: RawData ; pub mod data { pub use super :: super :: super :: bindgen :: root :: carla :: sensor :: data :: Image ; pub use super :: super :: super :: bindgen :: root :: carla :: sensor :: data :: SemanticLidarDetection ; pub use super :: super :: super :: bindgen :: root :: carla :: sensor :: data :: SemanticLidarData ; pub use super :: super :: super :: bindgen :: root :: carla :: sensor :: data :: LidarDetection ; pub use super :: super :: super :: bindgen :: root :: carla :: sensor :: data :: LidarData ; pub use super :: super :: super :: bindgen :: root :: carla :: sensor :: data :: IMUMeasurement ; pub use super :: super :: super :: bindgen :: root :: carla :: sensor :: data :: GnssMeasurement ; pub use super :: super :: super :: bindgen :: root :: carla :: sensor :: data :: LidarMeasurement ; pub use super :: super :: super :: bindgen :: root :: carla :: sensor :: data :: SemanticLidarMeasurement ; pub use super :: super :: super :: bindgen :: root :: carla :: sensor :: data :: RadarDetection ; pub use super :: super :: super :: bindgen :: root :: carla :: sensor :: data :: RadarData ; pub use super :: super :: super :: bindgen :: root :: carla :: sensor :: data :: RadarMeasurement ; } } pub mod traffic_manager { pub use super :: super :: bindgen :: root :: carla :: traffic_manager :: RoadOption ; pub use super :: super :: bindgen :: root :: carla :: traffic_manager :: Action ; pub use super :: super :: bindgen :: root :: carla :: traffic_manager :: ActionBuffer ; pub use super :: super :: bindgen :: root :: carla :: traffic_manager :: TrafficManager ; pub mod constants { pub mod Collision { pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: Collision :: BOUNDARY_EXTENSION_MINIMUM ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: Collision :: BOUNDARY_EXTENSION_RATE ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: Collision :: COS_10_DEGREES ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: Collision :: OVERLAP_THRESHOLD ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: Collision :: LOCKING_DISTANCE_PADDING ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: Collision :: COLLISION_RADIUS_STOP ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: Collision :: COLLISION_RADIUS_MIN ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: Collision :: COLLISION_RADIUS_RATE ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: Collision :: MAX_LOCKING_EXTENSION ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: Collision :: WALKER_TIME_EXTENSION ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: Collision :: SQUARE_ROOT_OF_TWO ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: Collision :: VERTICAL_OVERLAP_THRESHOLD ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: Collision :: EPSILON ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: Collision :: MIN_REFERENCE_DISTANCE ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: Collision :: MIN_VELOCITY_COLL_RADIUS ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: Collision :: VEL_EXT_FACTOR ; } pub mod FrameMemory { pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: FrameMemory :: INITIAL_SIZE ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: FrameMemory :: GROWTH_STEP_SIZE ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: FrameMemory :: INV_GROWTH_STEP_SIZE ; } pub mod HybridMode { pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: HybridMode :: HYBRID_MODE_DT_FL ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: HybridMode :: HYBRID_MODE_DT ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: HybridMode :: INV_HYBRID_DT ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: HybridMode :: PHYSICS_RADIUS ; } pub mod LaneChange { pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: LaneChange :: MINIMUM_LANE_CHANGE_DISTANCE ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: LaneChange :: MAXIMUM_LANE_OBSTACLE_DISTANCE ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: LaneChange :: MAXIMUM_LANE_OBSTACLE_CURVATURE ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: LaneChange :: INTER_LANE_CHANGE_DISTANCE ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: LaneChange :: MIN_WPT_DISTANCE ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: LaneChange :: MAX_WPT_DISTANCE ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: LaneChange :: MIN_LANE_CHANGE_SPEED ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: LaneChange :: FIFTYPERC ; } pub mod Map { pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: Map :: INFINITE_DISTANCE ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: Map :: MAX_GEODESIC_GRID_LENGTH ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: Map :: MAP_RESOLUTION ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: Map :: INV_MAP_RESOLUTION ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: Map :: MAX_WPT_DISTANCE ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: Map :: MAX_WPT_RADIANS ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: Map :: DELTA ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: Map :: Z_DELTA ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: Map :: STRAIGHT_DEG ; } pub mod MotionPlan { pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: MotionPlan :: RELATIVE_APPROACH_SPEED ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: MotionPlan :: MIN_FOLLOW_LEAD_DISTANCE ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: MotionPlan :: CRITICAL_BRAKING_MARGIN ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: MotionPlan :: EPSILON_RELATIVE_SPEED ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: MotionPlan :: MAX_JUNCTION_BLOCK_DISTANCE ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: MotionPlan :: TWO_KM ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: MotionPlan :: ATTEMPTS_TO_TELEPORT ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: MotionPlan :: LANDMARK_DETECTION_TIME ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: MotionPlan :: TL_TARGET_VELOCITY ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: MotionPlan :: STOP_TARGET_VELOCITY ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: MotionPlan :: YIELD_TARGET_VELOCITY ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: MotionPlan :: FRICTION ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: MotionPlan :: GRAVITY ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: MotionPlan :: PI ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: MotionPlan :: PERC_MAX_SLOWDOWN ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: MotionPlan :: FOLLOW_LEAD_FACTOR ; } pub mod Networking { pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: Networking :: MIN_TRY_COUNT ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: Networking :: TM_DEFAULT_PORT ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: Networking :: TM_TIMEOUT ; } pub mod PID { pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: PID :: MAX_THROTTLE ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: PID :: MAX_BRAKE ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: PID :: MAX_STEERING ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: PID :: MAX_STEERING_DIFF ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: PID :: DT ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: PID :: INV_DT ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: PID :: LONGITUDIAL_PARAM ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: PID :: LONGITUDIAL_HIGHWAY_PARAM ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: PID :: LATERAL_PARAM ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: PID :: LATERAL_HIGHWAY_PARAM ; } pub mod PathBufferUpdate { pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: PathBufferUpdate :: MAX_START_DISTANCE ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: PathBufferUpdate :: MINIMUM_HORIZON_LENGTH ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: PathBufferUpdate :: HORIZON_RATE ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: PathBufferUpdate :: HIGH_SPEED_HORIZON_RATE ; } pub mod SpeedThreshold { pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: SpeedThreshold :: HIGHWAY_SPEED ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: SpeedThreshold :: AFTER_JUNCTION_MIN_SPEED ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: SpeedThreshold :: INITIAL_PERCENTAGE_SPEED_DIFFERENCE ; } pub mod TrackTraffic { pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: TrackTraffic :: BUFFER_STEP_THROUGH ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: TrackTraffic :: INV_BUFFER_STEP_THROUGH ; } pub mod TrafficLight { pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: TrafficLight :: MINIMUM_STOP_TIME ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: TrafficLight :: EXIT_JUNCTION_THRESHOLD ; } pub mod VehicleLight { pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: VehicleLight :: SUN_ALTITUDE_DEGREES_BEFORE_DAWN ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: VehicleLight :: SUN_ALTITUDE_DEGREES_AFTER_SUNSET ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: VehicleLight :: SUN_ALTITUDE_DEGREES_JUST_AFTER_DAWN ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: VehicleLight :: SUN_ALTITUDE_DEGREES_JUST_BEFORE_SUNSET ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: VehicleLight :: HEAVY_PRECIPITATION_THRESHOLD ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: VehicleLight :: FOG_DENSITY_THRESHOLD ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: VehicleLight :: MAX_DISTANCE_LIGHT_CHECK ; } pub mod VehicleRemoval { pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: VehicleRemoval :: STOPPED_VELOCITY_THRESHOLD ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: VehicleRemoval :: BLOCKED_TIME_THRESHOLD ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: VehicleRemoval :: RED_TL_BLOCKED_TIME_THRESHOLD ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: VehicleRemoval :: DELTA_TIME_BETWEEN_DESTRUCTIONS ; } pub mod WaypointSelection { pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: WaypointSelection :: TARGET_WAYPOINT_TIME_HORIZON ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: WaypointSelection :: MIN_TARGET_WAYPOINT_DISTANCE ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: WaypointSelection :: JUNCTION_LOOK_AHEAD ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: WaypointSelection :: SAFE_DISTANCE_AFTER_JUNCTION ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: WaypointSelection :: MIN_JUNCTION_LENGTH ; pub use super :: super :: super :: super :: bindgen :: root :: carla :: traffic_manager :: constants :: WaypointSelection :: MIN_SAFE_INTERVAL_LENGTH ; } } } } pub mod carla_rust { pub mod client { pub use super :: super :: bindgen :: root :: carla_rust :: client :: FfiActorAttributeValue ; pub use super :: super :: bindgen :: root :: carla_rust :: client :: FfiActorAttributeValueList ; pub use super :: super :: bindgen :: root :: carla_rust :: client :: FfiActor ; pub use super :: super :: bindgen :: root :: carla_rust :: client :: ListenCallback ; pub use super :: super :: bindgen :: root :: carla_rust :: client :: FfiWaypointList ; pub use super :: super :: bindgen :: root :: carla_rust :: client :: FfiWaypointPair ; pub use super :: super :: bindgen :: root :: carla_rust :: client :: FfiJunction ; pub use super :: super :: bindgen :: root :: carla_rust :: client :: FfiLandmarkList ; pub use super :: super :: bindgen :: root :: carla_rust :: client :: FfiWaypoint ; pub use super :: super :: bindgen :: root :: carla_rust :: client :: FfiLandmark ; pub use super :: super :: bindgen :: root :: carla_rust :: client :: FfiTransformList ; pub use super :: super :: bindgen :: root :: carla_rust :: client :: FfiMap ; pub use super :: super :: bindgen :: root :: carla_rust :: client :: FfiTrafficSign ; pub use super :: super :: bindgen :: root :: carla_rust :: client :: FfiVehicle ; pub use super :: super :: bindgen :: root :: carla_rust :: client :: FfiSensor ; pub use super :: super :: bindgen :: root :: carla_rust :: client :: FfiBlueprintLibrary ; pub use super :: super :: bindgen :: root :: carla_rust :: client :: FfiActorList ; pub use super :: super :: bindgen :: root :: carla_rust :: client :: FfiBoundingBoxList ; pub use super :: super :: bindgen :: root :: carla_rust :: client :: FfiLabelledPointList ; pub use super :: super :: bindgen :: root :: carla_rust :: client :: FfiEnvironmentObjectList ; pub use super :: super :: bindgen :: root :: carla_rust :: client :: FfiActorVec ; pub use super :: super :: bindgen :: root :: carla_rust :: client :: FfiWorldSnapshot ; pub use super :: super :: bindgen :: root :: carla_rust :: client :: FfiClientLightState ; pub use super :: super :: bindgen :: root :: carla_rust :: client :: LightId ; pub use super :: super :: bindgen :: root :: carla_rust :: client :: FfiLightRef ; pub use super :: super :: bindgen :: root :: carla_rust :: client :: FfiLightList ; pub use super :: super :: bindgen :: root :: carla_rust :: client :: FfiLightManager ; pub use super :: super :: bindgen :: root :: carla_rust :: client :: FfiLightManager_LightGroup ; pub use super :: super :: bindgen :: root :: carla_rust :: client :: FfiWorld ; pub use super :: super :: bindgen :: root :: carla_rust :: client :: FfiClient ; pub use super :: super :: bindgen :: root :: carla_rust :: client :: FfiTrafficLightList ; pub use super :: super :: bindgen :: root :: carla_rust :: client :: FfiTrafficLight ; pub use super :: super :: bindgen :: root :: carla_rust :: client :: copy_actor_blueprint ; } pub mod geom { pub use super :: super :: bindgen :: root :: carla_rust :: geom :: FfiLocation ; pub use super :: super :: bindgen :: root :: carla_rust :: geom :: FfiTransform ; pub use super :: super :: bindgen :: root :: carla_rust :: geom :: FfiBoundingBox ; } pub mod road { pub mod element { pub use super :: super :: super :: bindgen :: root :: carla_rust :: road :: element :: FfiLaneMarking ; } } pub mod rpc { pub use super :: super :: bindgen :: root :: carla_rust :: rpc :: FfiActorId ; pub use super :: super :: bindgen :: root :: carla_rust :: rpc :: FfiVehiclePhysicsControl ; pub use super :: super :: bindgen :: root :: carla_rust :: rpc :: FfiEpisodeSettings ; pub use super :: super :: bindgen :: root :: carla_rust :: rpc :: FfiLabelledPoint ; pub use super :: super :: bindgen :: root :: carla_rust :: rpc :: FfiVehicleLightStateElementRef ; pub use super :: super :: bindgen :: root :: carla_rust :: rpc :: FfiVehicleLightStateList ; pub use super :: super :: bindgen :: root :: carla_rust :: rpc :: FfiEnvironmentObjectRef ; pub use super :: super :: bindgen :: root :: carla_rust :: rpc :: FfiRpcColor ; pub use super :: super :: bindgen :: root :: carla_rust :: rpc :: FfiLightId ; pub use super :: super :: bindgen :: root :: carla_rust :: rpc :: FfiRpcLightGroup ; pub use super :: super :: bindgen :: root :: carla_rust :: rpc :: FfiRpcLightState ; } pub mod sensor { pub use super :: super :: bindgen :: root :: carla_rust :: sensor :: FfiSensorData ; pub mod data { pub use super :: super :: super :: bindgen :: root :: carla_rust :: sensor :: data :: FfiColor ; pub use super :: super :: super :: bindgen :: root :: carla_rust :: sensor :: data :: FfiCollisionEvent ; pub use super :: super :: super :: bindgen :: root :: carla_rust :: sensor :: data :: FfiImage ; pub use super :: super :: super :: bindgen :: root :: carla_rust :: sensor :: data :: FfiLaneInvasionEvent ; pub use super :: super :: super :: bindgen :: root :: carla_rust :: sensor :: data :: FfiLidarDetection ; pub use super :: super :: super :: bindgen :: root :: carla_rust :: sensor :: data :: FfiObstacleDetectionEvent ; pub use super :: super :: super :: bindgen :: root :: carla_rust :: sensor :: data :: FfiSemanticLidarDetection ; pub use super :: super :: super :: bindgen :: root :: carla_rust :: sensor :: data :: FfiLidarMeasurement ; pub use super :: super :: super :: bindgen :: root :: carla_rust :: sensor :: data :: FfiSemanticLidarMeasurement ; pub use super :: super :: super :: bindgen :: root :: carla_rust :: sensor :: data :: FfiRadarMeasurement ; pub use super :: super :: super :: bindgen :: root :: carla_rust :: sensor :: data :: FfiGnssMeasurement ; pub use super :: super :: super :: bindgen :: root :: carla_rust :: sensor :: data :: FfiImuMeasurement ; } } pub mod traffic_manager { pub use super :: super :: bindgen :: root :: carla_rust :: traffic_manager :: FfiPath ; pub use super :: super :: bindgen :: root :: carla_rust :: traffic_manager :: FfiRoute ; pub use super :: super :: bindgen :: root :: carla_rust :: traffic_manager :: FfiAction ; pub use super :: super :: bindgen :: root :: carla_rust :: traffic_manager :: FfiActionBuffer ; pub use super :: super :: bindgen :: root :: carla_rust :: traffic_manager :: FfiTrafficManager ; } pub mod utils { pub use super :: super :: bindgen :: root :: carla_rust :: utils :: VectorRef ; pub use super :: super :: cxxbridge :: new_uint8_t_vector_autocxx_wrapper_0xd539d5a17acbdd25 as new_uint8_t_vector ; pub use super :: super :: cxxbridge :: new_uint32_t_vector_autocxx_wrapper_0xd539d5a17acbdd25 as new_uint32_t_vector ; pub use super :: super :: cxxbridge :: new_uint64_t_vector_autocxx_wrapper_0xd539d5a17acbdd25 as new_uint64_t_vector ; pub use super :: super :: cxxbridge :: new_vector_2d_vector_autocxx_wrapper_0xd539d5a17acbdd25 as new_vector_2d_vector ; pub use super :: super :: cxxbridge :: new_ffi_location_vector_autocxx_wrapper_0xd539d5a17acbdd25 as new_ffi_location_vector ; pub use super :: super :: cxxbridge :: new_gear_physics_control_vector_autocxx_wrapper_0xd539d5a17acbdd25 as new_gear_physics_control_vector ; pub use super :: super :: cxxbridge :: new_wheel_physics_control_vector_autocxx_wrapper_0xd539d5a17acbdd25 as new_wheel_physics_control_vector ; } } pub mod std { pub use super :: bindgen :: root :: std :: ostream ; } }